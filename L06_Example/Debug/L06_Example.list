
L06_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c800  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d0  0800c9d0  0800c9d0  0001c9d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cea0  0800cea0  00020228  2**0
                  CONTENTS
  4 .ARM          00000008  0800cea0  0800cea0  0001cea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cea8  0800cea8  00020228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cea8  0800cea8  0001cea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ceac  0800ceac  0001ceac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  0800ceb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000039c  20000228  0800d0d8  00020228  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200005c4  0800d0d8  000205c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY
 13 .debug_info   000156b2  00000000  00000000  0002029b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031ac  00000000  00000000  0003594d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001230  00000000  00000000  00038b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e1d  00000000  00000000  00039d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028aa2  00000000  00000000  0003ab4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017467  00000000  00000000  000635ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f736e  00000000  00000000  0007aa56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006070  00000000  00000000  00171dc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000fa  00000000  00000000  00177e34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000228 	.word	0x20000228
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c9b8 	.word	0x0800c9b8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000022c 	.word	0x2000022c
 800020c:	0800c9b8 	.word	0x0800c9b8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cdc:	f000 b9a6 	b.w	800102c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9e08      	ldr	r6, [sp, #32]
 8000d6a:	460d      	mov	r5, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	460f      	mov	r7, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4694      	mov	ip, r2
 8000d78:	d965      	bls.n	8000e46 <__udivmoddi4+0xe2>
 8000d7a:	fab2 f382 	clz	r3, r2
 8000d7e:	b143      	cbz	r3, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d84:	f1c3 0220 	rsb	r2, r3, #32
 8000d88:	409f      	lsls	r7, r3
 8000d8a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d8e:	4317      	orrs	r7, r2
 8000d90:	409c      	lsls	r4, r3
 8000d92:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d96:	fa1f f58c 	uxth.w	r5, ip
 8000d9a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d9e:	0c22      	lsrs	r2, r4, #16
 8000da0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000da4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000da8:	fb01 f005 	mul.w	r0, r1, r5
 8000dac:	4290      	cmp	r0, r2
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db0:	eb1c 0202 	adds.w	r2, ip, r2
 8000db4:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000db8:	f080 811c 	bcs.w	8000ff4 <__udivmoddi4+0x290>
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	f240 8119 	bls.w	8000ff4 <__udivmoddi4+0x290>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	4462      	add	r2, ip
 8000dc6:	1a12      	subs	r2, r2, r0
 8000dc8:	b2a4      	uxth	r4, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dd6:	fb00 f505 	mul.w	r5, r0, r5
 8000dda:	42a5      	cmp	r5, r4
 8000ddc:	d90a      	bls.n	8000df4 <__udivmoddi4+0x90>
 8000dde:	eb1c 0404 	adds.w	r4, ip, r4
 8000de2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000de6:	f080 8107 	bcs.w	8000ff8 <__udivmoddi4+0x294>
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	f240 8104 	bls.w	8000ff8 <__udivmoddi4+0x294>
 8000df0:	4464      	add	r4, ip
 8000df2:	3802      	subs	r0, #2
 8000df4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df8:	1b64      	subs	r4, r4, r5
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11e      	cbz	r6, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40dc      	lsrs	r4, r3
 8000e00:	2300      	movs	r3, #0
 8000e02:	e9c6 4300 	strd	r4, r3, [r6]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0xbc>
 8000e0e:	2e00      	cmp	r6, #0
 8000e10:	f000 80ed 	beq.w	8000fee <__udivmoddi4+0x28a>
 8000e14:	2100      	movs	r1, #0
 8000e16:	e9c6 0500 	strd	r0, r5, [r6]
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e20:	fab3 f183 	clz	r1, r3
 8000e24:	2900      	cmp	r1, #0
 8000e26:	d149      	bne.n	8000ebc <__udivmoddi4+0x158>
 8000e28:	42ab      	cmp	r3, r5
 8000e2a:	d302      	bcc.n	8000e32 <__udivmoddi4+0xce>
 8000e2c:	4282      	cmp	r2, r0
 8000e2e:	f200 80f8 	bhi.w	8001022 <__udivmoddi4+0x2be>
 8000e32:	1a84      	subs	r4, r0, r2
 8000e34:	eb65 0203 	sbc.w	r2, r5, r3
 8000e38:	2001      	movs	r0, #1
 8000e3a:	4617      	mov	r7, r2
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d0e2      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	e9c6 4700 	strd	r4, r7, [r6]
 8000e44:	e7df      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e46:	b902      	cbnz	r2, 8000e4a <__udivmoddi4+0xe6>
 8000e48:	deff      	udf	#255	; 0xff
 8000e4a:	fab2 f382 	clz	r3, r2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f040 8090 	bne.w	8000f74 <__udivmoddi4+0x210>
 8000e54:	1a8a      	subs	r2, r1, r2
 8000e56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e5a:	fa1f fe8c 	uxth.w	lr, ip
 8000e5e:	2101      	movs	r1, #1
 8000e60:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e64:	fb07 2015 	mls	r0, r7, r5, r2
 8000e68:	0c22      	lsrs	r2, r4, #16
 8000e6a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e6e:	fb0e f005 	mul.w	r0, lr, r5
 8000e72:	4290      	cmp	r0, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x124>
 8000e76:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x122>
 8000e80:	4290      	cmp	r0, r2
 8000e82:	f200 80cb 	bhi.w	800101c <__udivmoddi4+0x2b8>
 8000e86:	4645      	mov	r5, r8
 8000e88:	1a12      	subs	r2, r2, r0
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e90:	fb07 2210 	mls	r2, r7, r0, r2
 8000e94:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e98:	fb0e fe00 	mul.w	lr, lr, r0
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x14e>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000ea8:	d202      	bcs.n	8000eb0 <__udivmoddi4+0x14c>
 8000eaa:	45a6      	cmp	lr, r4
 8000eac:	f200 80bb 	bhi.w	8001026 <__udivmoddi4+0x2c2>
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	eba4 040e 	sub.w	r4, r4, lr
 8000eb6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eba:	e79f      	b.n	8000dfc <__udivmoddi4+0x98>
 8000ebc:	f1c1 0720 	rsb	r7, r1, #32
 8000ec0:	408b      	lsls	r3, r1
 8000ec2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ec6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eca:	fa05 f401 	lsl.w	r4, r5, r1
 8000ece:	fa20 f307 	lsr.w	r3, r0, r7
 8000ed2:	40fd      	lsrs	r5, r7
 8000ed4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed8:	4323      	orrs	r3, r4
 8000eda:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ede:	fa1f fe8c 	uxth.w	lr, ip
 8000ee2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ee6:	0c1c      	lsrs	r4, r3, #16
 8000ee8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eec:	fb08 f50e 	mul.w	r5, r8, lr
 8000ef0:	42a5      	cmp	r5, r4
 8000ef2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef6:	fa00 f001 	lsl.w	r0, r0, r1
 8000efa:	d90b      	bls.n	8000f14 <__udivmoddi4+0x1b0>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f04:	f080 8088 	bcs.w	8001018 <__udivmoddi4+0x2b4>
 8000f08:	42a5      	cmp	r5, r4
 8000f0a:	f240 8085 	bls.w	8001018 <__udivmoddi4+0x2b4>
 8000f0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f12:	4464      	add	r4, ip
 8000f14:	1b64      	subs	r4, r4, r5
 8000f16:	b29d      	uxth	r5, r3
 8000f18:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f1c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f20:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f24:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f28:	45a6      	cmp	lr, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x1da>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000f34:	d26c      	bcs.n	8001010 <__udivmoddi4+0x2ac>
 8000f36:	45a6      	cmp	lr, r4
 8000f38:	d96a      	bls.n	8001010 <__udivmoddi4+0x2ac>
 8000f3a:	3b02      	subs	r3, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f42:	fba3 9502 	umull	r9, r5, r3, r2
 8000f46:	eba4 040e 	sub.w	r4, r4, lr
 8000f4a:	42ac      	cmp	r4, r5
 8000f4c:	46c8      	mov	r8, r9
 8000f4e:	46ae      	mov	lr, r5
 8000f50:	d356      	bcc.n	8001000 <__udivmoddi4+0x29c>
 8000f52:	d053      	beq.n	8000ffc <__udivmoddi4+0x298>
 8000f54:	b156      	cbz	r6, 8000f6c <__udivmoddi4+0x208>
 8000f56:	ebb0 0208 	subs.w	r2, r0, r8
 8000f5a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f62:	40ca      	lsrs	r2, r1
 8000f64:	40cc      	lsrs	r4, r1
 8000f66:	4317      	orrs	r7, r2
 8000f68:	e9c6 7400 	strd	r7, r4, [r6]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	2100      	movs	r1, #0
 8000f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f74:	f1c3 0120 	rsb	r1, r3, #32
 8000f78:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f7c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f80:	fa25 f101 	lsr.w	r1, r5, r1
 8000f84:	409d      	lsls	r5, r3
 8000f86:	432a      	orrs	r2, r5
 8000f88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f8c:	fa1f fe8c 	uxth.w	lr, ip
 8000f90:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f94:	fb07 1510 	mls	r5, r7, r0, r1
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f9e:	fb00 f50e 	mul.w	r5, r0, lr
 8000fa2:	428d      	cmp	r5, r1
 8000fa4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fa8:	d908      	bls.n	8000fbc <__udivmoddi4+0x258>
 8000faa:	eb1c 0101 	adds.w	r1, ip, r1
 8000fae:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fb2:	d22f      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fb4:	428d      	cmp	r5, r1
 8000fb6:	d92d      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fb8:	3802      	subs	r0, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	1b49      	subs	r1, r1, r5
 8000fbe:	b292      	uxth	r2, r2
 8000fc0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fc4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fc8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fcc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fd0:	4291      	cmp	r1, r2
 8000fd2:	d908      	bls.n	8000fe6 <__udivmoddi4+0x282>
 8000fd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fd8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000fdc:	d216      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000fde:	4291      	cmp	r1, r2
 8000fe0:	d914      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000fe2:	3d02      	subs	r5, #2
 8000fe4:	4462      	add	r2, ip
 8000fe6:	1a52      	subs	r2, r2, r1
 8000fe8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fec:	e738      	b.n	8000e60 <__udivmoddi4+0xfc>
 8000fee:	4631      	mov	r1, r6
 8000ff0:	4630      	mov	r0, r6
 8000ff2:	e708      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000ff4:	4639      	mov	r1, r7
 8000ff6:	e6e6      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	e6fb      	b.n	8000df4 <__udivmoddi4+0x90>
 8000ffc:	4548      	cmp	r0, r9
 8000ffe:	d2a9      	bcs.n	8000f54 <__udivmoddi4+0x1f0>
 8001000:	ebb9 0802 	subs.w	r8, r9, r2
 8001004:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001008:	3b01      	subs	r3, #1
 800100a:	e7a3      	b.n	8000f54 <__udivmoddi4+0x1f0>
 800100c:	4645      	mov	r5, r8
 800100e:	e7ea      	b.n	8000fe6 <__udivmoddi4+0x282>
 8001010:	462b      	mov	r3, r5
 8001012:	e794      	b.n	8000f3e <__udivmoddi4+0x1da>
 8001014:	4640      	mov	r0, r8
 8001016:	e7d1      	b.n	8000fbc <__udivmoddi4+0x258>
 8001018:	46d0      	mov	r8, sl
 800101a:	e77b      	b.n	8000f14 <__udivmoddi4+0x1b0>
 800101c:	3d02      	subs	r5, #2
 800101e:	4462      	add	r2, ip
 8001020:	e732      	b.n	8000e88 <__udivmoddi4+0x124>
 8001022:	4608      	mov	r0, r1
 8001024:	e70a      	b.n	8000e3c <__udivmoddi4+0xd8>
 8001026:	4464      	add	r4, ip
 8001028:	3802      	subs	r0, #2
 800102a:	e742      	b.n	8000eb2 <__udivmoddi4+0x14e>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <bmp2_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp2_init(struct bmp2_dev *dev)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f000 fa47 	bl	80014cc <null_ptr_check>
 800103e:	4603      	mov	r3, r0
 8001040:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP2_OK)
 8001042:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d117      	bne.n	800107a <bmp2_init+0x4a>
    {
        rslt = bmp2_get_regs(BMP2_REG_CHIP_ID, &dev->chip_id, 1, dev);
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2201      	movs	r2, #1
 8001050:	20d0      	movs	r0, #208	; 0xd0
 8001052:	f000 f818 	bl	8001086 <bmp2_get_regs>
 8001056:	4603      	mov	r3, r0
 8001058:	73fb      	strb	r3, [r7, #15]

        /* Check for chip id validity */
        if (rslt == BMP2_OK)
 800105a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d10b      	bne.n	800107a <bmp2_init+0x4a>
        {
            if (dev->chip_id == BMP2_CHIP_ID)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b58      	cmp	r3, #88	; 0x58
 8001068:	d105      	bne.n	8001076 <bmp2_init+0x46>
            {
                rslt = get_calib_param(dev);
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f000 fa79 	bl	8001562 <get_calib_param>
 8001070:	4603      	mov	r3, r0
 8001072:	73fb      	strb	r3, [r7, #15]
 8001074:	e001      	b.n	800107a <bmp2_init+0x4a>
            }
            else
            {
                rslt = BMP2_E_DEV_NOT_FOUND;
 8001076:	23fc      	movs	r3, #252	; 0xfc
 8001078:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800107a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800107e:	4618      	mov	r0, r3
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <bmp2_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp2_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 8001086:	b590      	push	{r4, r7, lr}
 8001088:	b087      	sub	sp, #28
 800108a:	af00      	add	r7, sp, #0
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	607a      	str	r2, [r7, #4]
 8001090:	603b      	str	r3, [r7, #0]
 8001092:	4603      	mov	r3, r0
 8001094:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8001096:	6838      	ldr	r0, [r7, #0]
 8001098:	f000 fa18 	bl	80014cc <null_ptr_check>
 800109c:	4603      	mov	r3, r0
 800109e:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (reg_data != NULL))
 80010a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d11e      	bne.n	80010e6 <bmp2_get_regs+0x60>
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d01b      	beq.n	80010e6 <bmp2_get_regs+0x60>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP2_SPI_INTF)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	785b      	ldrb	r3, [r3, #1]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d103      	bne.n	80010be <bmp2_get_regs+0x38>
        {
            reg_addr = reg_addr | BMP2_SPI_RD_MASK;
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010bc:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	68dc      	ldr	r4, [r3, #12]
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	7bf8      	ldrb	r0, [r7, #15]
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	68b9      	ldr	r1, [r7, #8]
 80010cc:	47a0      	blx	r4
 80010ce:	4603      	mov	r3, r0
 80010d0:	461a      	mov	r2, r3
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	721a      	strb	r2, [r3, #8]

        /* Check for communication error and mask with an internal error code */
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d004      	beq.n	80010ea <bmp2_get_regs+0x64>
        {
            rslt = BMP2_E_COM_FAIL;
 80010e0:	23fe      	movs	r3, #254	; 0xfe
 80010e2:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 80010e4:	e001      	b.n	80010ea <bmp2_get_regs+0x64>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80010e6:	23ff      	movs	r3, #255	; 0xff
 80010e8:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80010ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	371c      	adds	r7, #28
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd90      	pop	{r4, r7, pc}

080010f6 <bmp2_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp2_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 80010f6:	b590      	push	{r4, r7, lr}
 80010f8:	b08b      	sub	sp, #44	; 0x2c
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	60f8      	str	r0, [r7, #12]
 80010fe:	60b9      	str	r1, [r7, #8]
 8001100:	607a      	str	r2, [r7, #4]
 8001102:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > BMP2_MAX_LEN)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b04      	cmp	r3, #4
 8001108:	d901      	bls.n	800110e <bmp2_set_regs+0x18>
    {
        len = BMP2_MAX_LEN;
 800110a:	2304      	movs	r3, #4
 800110c:	607b      	str	r3, [r7, #4]
    }

    rslt = null_ptr_check(dev);
 800110e:	6838      	ldr	r0, [r7, #0]
 8001110:	f000 f9dc 	bl	80014cc <null_ptr_check>
 8001114:	4603      	mov	r3, r0
 8001116:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if ((rslt == BMP2_OK) && (reg_addr != NULL) && (reg_data != NULL))
 800111a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800111e:	2b00      	cmp	r3, #0
 8001120:	d150      	bne.n	80011c4 <bmp2_set_regs+0xce>
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d04d      	beq.n	80011c4 <bmp2_set_regs+0xce>
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d04a      	beq.n	80011c4 <bmp2_set_regs+0xce>
    {
        if (len > 0)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d043      	beq.n	80011bc <bmp2_set_regs+0xc6>
        {
            temp_buff[0] = reg_data[0];
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	753b      	strb	r3, [r7, #20]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP2_SPI_INTF)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	785b      	ldrb	r3, [r3, #1]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d114      	bne.n	800116c <bmp2_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001142:	2300      	movs	r3, #0
 8001144:	77fb      	strb	r3, [r7, #31]
 8001146:	e00d      	b.n	8001164 <bmp2_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & BMP2_SPI_WR_MASK;
 8001148:	7ffb      	ldrb	r3, [r7, #31]
 800114a:	68fa      	ldr	r2, [r7, #12]
 800114c:	4413      	add	r3, r2
 800114e:	781a      	ldrb	r2, [r3, #0]
 8001150:	7ffb      	ldrb	r3, [r7, #31]
 8001152:	68f9      	ldr	r1, [r7, #12]
 8001154:	440b      	add	r3, r1
 8001156:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800115e:	7ffb      	ldrb	r3, [r7, #31]
 8001160:	3301      	adds	r3, #1
 8001162:	77fb      	strb	r3, [r7, #31]
 8001164:	7ffb      	ldrb	r3, [r7, #31]
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	429a      	cmp	r2, r3
 800116a:	d8ed      	bhi.n	8001148 <bmp2_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d90b      	bls.n	800118a <bmp2_set_regs+0x94>
            {
                /* Interleave register address w.r.t data for burst write */
                interleave_data(reg_addr, temp_buff, reg_data, len);
 8001172:	f107 0114 	add.w	r1, r7, #20
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	68ba      	ldr	r2, [r7, #8]
 800117a:	68f8      	ldr	r0, [r7, #12]
 800117c:	f000 f9c6 	bl	800150c <interleave_data>
                temp_len = ((len * 2) - 1);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	3b01      	subs	r3, #1
 8001186:	623b      	str	r3, [r7, #32]
 8001188:	e001      	b.n	800118e <bmp2_set_regs+0x98>
            }
            else
            {
                temp_len = len;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	623b      	str	r3, [r7, #32]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	691c      	ldr	r4, [r3, #16]
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	7818      	ldrb	r0, [r3, #0]
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f107 0114 	add.w	r1, r7, #20
 800119e:	6a3a      	ldr	r2, [r7, #32]
 80011a0:	47a0      	blx	r4
 80011a2:	4603      	mov	r3, r0
 80011a4:	461a      	mov	r2, r3
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	721a      	strb	r2, [r3, #8]

            /* Check for communication error and mask with an internal error code */
            if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d00b      	beq.n	80011cc <bmp2_set_regs+0xd6>
            {
                rslt = BMP2_E_COM_FAIL;
 80011b4:	23fe      	movs	r3, #254	; 0xfe
 80011b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len > 0)
 80011ba:	e007      	b.n	80011cc <bmp2_set_regs+0xd6>
            }
        }
        else
        {
            rslt = BMP2_E_INVALID_LEN;
 80011bc:	23fd      	movs	r3, #253	; 0xfd
 80011be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len > 0)
 80011c2:	e003      	b.n	80011cc <bmp2_set_regs+0xd6>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80011c4:	23ff      	movs	r3, #255	; 0xff
 80011c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80011ca:	e000      	b.n	80011ce <bmp2_set_regs+0xd8>
        if (len > 0)
 80011cc:	bf00      	nop
    }

    return rslt;
 80011ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	372c      	adds	r7, #44	; 0x2c
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd90      	pop	{r4, r7, pc}

080011da <bmp2_soft_reset>:

/*!
 * @brief This API triggers the soft-reset of the sensor.
 */
int8_t bmp2_soft_reset(struct bmp2_dev *dev)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b084      	sub	sp, #16
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP2_REG_SOFT_RESET;
 80011e2:	23e0      	movs	r3, #224	; 0xe0
 80011e4:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP2_SOFT_RESET_CMD;
 80011e6:	23b6      	movs	r3, #182	; 0xb6
 80011e8:	737b      	strb	r3, [r7, #13]

    rslt = bmp2_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80011ea:	f107 010d 	add.w	r1, r7, #13
 80011ee:	f107 000e 	add.w	r0, r7, #14
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2201      	movs	r2, #1
 80011f6:	f7ff ff7e 	bl	80010f6 <bmp2_set_regs>
 80011fa:	4603      	mov	r3, r0
 80011fc:	73fb      	strb	r3, [r7, #15]

    return rslt;
 80011fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001202:	4618      	mov	r0, r3
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <bmp2_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp2_get_config(struct bmp2_config *conf, struct bmp2_dev *dev)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b084      	sub	sp, #16
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
 8001212:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8001214:	2300      	movs	r3, #0
 8001216:	81bb      	strh	r3, [r7, #12]

    if (conf != NULL)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d02d      	beq.n	800127a <bmp2_get_config+0x70>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 800121e:	f107 010c 	add.w	r1, r7, #12
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	2202      	movs	r2, #2
 8001226:	20f4      	movs	r0, #244	; 0xf4
 8001228:	f7ff ff2d 	bl	8001086 <bmp2_get_regs>
 800122c:	4603      	mov	r3, r0
 800122e:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 8001230:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d122      	bne.n	800127e <bmp2_get_config+0x74>
        {
            conf->os_temp = BMP2_GET_BITS(temp[0], BMP2_OS_TEMP);
 8001238:	7b3b      	ldrb	r3, [r7, #12]
 800123a:	095b      	lsrs	r3, r3, #5
 800123c:	b2da      	uxtb	r2, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP2_GET_BITS(temp[0], BMP2_OS_PRES);
 8001242:	7b3b      	ldrb	r3, [r7, #12]
 8001244:	109b      	asrs	r3, r3, #2
 8001246:	b2db      	uxtb	r3, r3
 8001248:	f003 0307 	and.w	r3, r3, #7
 800124c:	b2da      	uxtb	r2, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP2_GET_BITS(temp[1], BMP2_STANDBY_DURN);
 8001252:	7b7b      	ldrb	r3, [r7, #13]
 8001254:	095b      	lsrs	r3, r3, #5
 8001256:	b2da      	uxtb	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP2_GET_BITS(temp[1], BMP2_FILTER);
 800125c:	7b7b      	ldrb	r3, [r7, #13]
 800125e:	109b      	asrs	r3, r3, #2
 8001260:	b2db      	uxtb	r3, r3
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	b2da      	uxtb	r2, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	711a      	strb	r2, [r3, #4]
            conf->spi3w_en = BMP2_GET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE);
 800126c:	7b7b      	ldrb	r3, [r7, #13]
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	b2da      	uxtb	r2, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	715a      	strb	r2, [r3, #5]
 8001278:	e001      	b.n	800127e <bmp2_get_config+0x74>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800127a:	23ff      	movs	r3, #255	; 0xff
 800127c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800127e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001282:	4618      	mov	r0, r3
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <bmp2_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the over-sampling mode, power mode configuration,
 * sleep duration and IIR filter coefficient.
 */
int8_t bmp2_set_config(const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b082      	sub	sp, #8
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
 8001292:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP2_POWERMODE_SLEEP, conf, dev);
 8001294:	683a      	ldr	r2, [r7, #0]
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	2000      	movs	r0, #0
 800129a:	f000 f9fd 	bl	8001698 <conf_sensor>
 800129e:	4603      	mov	r3, r0
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <bmp2_get_status>:

/*!
 * @brief This API reads the status register
 */
int8_t bmp2_get_status(struct bmp2_status *status, struct bmp2_dev *dev)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp;

    if (status != NULL)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d01b      	beq.n	80012f0 <bmp2_get_status+0x48>
    {
        rslt = bmp2_get_regs(BMP2_REG_STATUS, &temp, 1, dev);
 80012b8:	f107 010e 	add.w	r1, r7, #14
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	2201      	movs	r2, #1
 80012c0:	20f3      	movs	r0, #243	; 0xf3
 80012c2:	f7ff fee0 	bl	8001086 <bmp2_get_regs>
 80012c6:	4603      	mov	r3, r0
 80012c8:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 80012ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d110      	bne.n	80012f4 <bmp2_get_status+0x4c>
        {
            status->measuring = BMP2_GET_BITS(temp, BMP2_STATUS_MEAS);
 80012d2:	7bbb      	ldrb	r3, [r7, #14]
 80012d4:	10db      	asrs	r3, r3, #3
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	f003 0301 	and.w	r3, r3, #1
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	701a      	strb	r2, [r3, #0]
            status->im_update = BMP2_GET_BITS_POS_0(temp, BMP2_STATUS_IM_UPDATE);
 80012e2:	7bbb      	ldrb	r3, [r7, #14]
 80012e4:	f003 0301 	and.w	r3, r3, #1
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	705a      	strb	r2, [r3, #1]
 80012ee:	e001      	b.n	80012f4 <bmp2_get_status+0x4c>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80012f0:	23ff      	movs	r3, #255	; 0xff
 80012f2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80012f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3710      	adds	r7, #16
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <bmp2_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp2_set_power_mode(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
 800130c:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = conf_sensor(mode, conf, dev);
 800130e:	7bfb      	ldrb	r3, [r7, #15]
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	68b9      	ldr	r1, [r7, #8]
 8001314:	4618      	mov	r0, r3
 8001316:	f000 f9bf 	bl	8001698 <conf_sensor>
 800131a:	4603      	mov	r3, r0
 800131c:	75fb      	strb	r3, [r7, #23]

    return rslt;
 800131e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001322:	4618      	mov	r0, r3
 8001324:	3718      	adds	r7, #24
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <bmp2_get_sensor_data>:
 * @brief This API reads the pressure and temperature data from the
 * sensor, compensates the data and store it in the bmp2_data structure
 * instance passed by the user.
 */
int8_t bmp2_get_sensor_data(struct bmp2_data *comp_data, struct bmp2_dev *dev)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b086      	sub	sp, #24
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
 8001332:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[BMP2_P_T_LEN] = { 0 };
 8001334:	2300      	movs	r3, #0
 8001336:	613b      	str	r3, [r7, #16]
 8001338:	2300      	movs	r3, #0
 800133a:	82bb      	strh	r3, [r7, #20]
    struct bmp2_uncomp_data uncomp_data = { 0 };
 800133c:	f107 0308 	add.w	r3, r7, #8
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]

    if (comp_data != NULL)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d024      	beq.n	8001396 <bmp2_get_sensor_data+0x6c>
    {
        rslt = bmp2_get_regs(BMP2_REG_PRES_MSB, temp, BMP2_P_T_LEN, dev);
 800134c:	f107 0110 	add.w	r1, r7, #16
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	2206      	movs	r2, #6
 8001354:	20f7      	movs	r0, #247	; 0xf7
 8001356:	f7ff fe96 	bl	8001086 <bmp2_get_regs>
 800135a:	4603      	mov	r3, r0
 800135c:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 800135e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d119      	bne.n	800139a <bmp2_get_sensor_data+0x70>
        {
            /* Parse the read data from the sensor */
            rslt = parse_sensor_data(temp, &uncomp_data);
 8001366:	f107 0208 	add.w	r2, r7, #8
 800136a:	f107 0310 	add.w	r3, r7, #16
 800136e:	4611      	mov	r1, r2
 8001370:	4618      	mov	r0, r3
 8001372:	f000 fab9 	bl	80018e8 <parse_sensor_data>
 8001376:	4603      	mov	r3, r0
 8001378:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 800137a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d10b      	bne.n	800139a <bmp2_get_sensor_data+0x70>
            {
                /* Compensate the pressure and/or temperature
                 * data from the sensor
                 */
                rslt = bmp2_compensate_data(&uncomp_data, comp_data, dev);
 8001382:	f107 0308 	add.w	r3, r7, #8
 8001386:	683a      	ldr	r2, [r7, #0]
 8001388:	6879      	ldr	r1, [r7, #4]
 800138a:	4618      	mov	r0, r3
 800138c:	f000 f80b 	bl	80013a6 <bmp2_compensate_data>
 8001390:	4603      	mov	r3, r0
 8001392:	75fb      	strb	r3, [r7, #23]
 8001394:	e001      	b.n	800139a <bmp2_get_sensor_data+0x70>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001396:	23ff      	movs	r3, #255	; 0xff
 8001398:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800139a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3718      	adds	r7, #24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <bmp2_compensate_data>:
 * temperature data.
 */
int8_t bmp2_compensate_data(const struct bmp2_uncomp_data *uncomp_data,
                            struct bmp2_data *comp_data,
                            struct bmp2_dev *dev)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b086      	sub	sp, #24
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	60f8      	str	r0, [r7, #12]
 80013ae:	60b9      	str	r1, [r7, #8]
 80013b0:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f000 f88a 	bl	80014cc <null_ptr_check>
 80013b8:	4603      	mov	r3, r0
 80013ba:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (uncomp_data != NULL) && (comp_data != NULL))
 80013bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d129      	bne.n	8001418 <bmp2_compensate_data+0x72>
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d026      	beq.n	8001418 <bmp2_compensate_data+0x72>
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d023      	beq.n	8001418 <bmp2_compensate_data+0x72>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 80013d0:	68b9      	ldr	r1, [r7, #8]
 80013d2:	f04f 0200 	mov.w	r2, #0
 80013d6:	f04f 0300 	mov.w	r3, #0
 80013da:	e9c1 2302 	strd	r2, r3, [r1, #8]
        comp_data->pressure = 0;
 80013de:	68b9      	ldr	r1, [r7, #8]
 80013e0:	f04f 0200 	mov.w	r2, #0
 80013e4:	f04f 0300 	mov.w	r3, #0
 80013e8:	e9c1 2300 	strd	r2, r3, [r1]

        rslt = compensate_temperature(&comp_data->temperature, uncomp_data, dev);
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	3308      	adds	r3, #8
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	68f9      	ldr	r1, [r7, #12]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f000 fabb 	bl	8001970 <compensate_temperature>
 80013fa:	4603      	mov	r3, r0
 80013fc:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 80013fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d10a      	bne.n	800141c <bmp2_compensate_data+0x76>
        {
            rslt = compensate_pressure(&comp_data->pressure, uncomp_data, dev);
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	68f9      	ldr	r1, [r7, #12]
 800140c:	4618      	mov	r0, r3
 800140e:	f000 fba7 	bl	8001b60 <compensate_pressure>
 8001412:	4603      	mov	r3, r0
 8001414:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP2_OK)
 8001416:	e001      	b.n	800141c <bmp2_compensate_data+0x76>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001418:	23ff      	movs	r3, #255	; 0xff
 800141a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800141c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001420:	4618      	mov	r0, r3
 8001422:	3718      	adds	r7, #24
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <bmp2_compute_meas_time>:
/*!
 * @brief This API computes the measurement time in microseconds for the
 * active configuration based on standbytime(conf->odr) and over-sampling mode(conf->os_mode)
 */
int8_t bmp2_compute_meas_time(uint32_t *sampling_time, const struct bmp2_config *conf, const struct bmp2_dev *dev)
{
 8001428:	b5b0      	push	{r4, r5, r7, lr}
 800142a:	b092      	sub	sp, #72	; 0x48
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Array contains measurement time in microseconds */
    uint32_t measurement_time[] = { 5500, 7500, 11500, 19500, 37500 };
 8001434:	4b23      	ldr	r3, [pc, #140]	; (80014c4 <bmp2_compute_meas_time+0x9c>)
 8001436:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800143a:	461d      	mov	r5, r3
 800143c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800143e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001440:	682b      	ldr	r3, [r5, #0]
 8001442:	6023      	str	r3, [r4, #0]
    uint32_t standby_time[] = { 500, 62500, 125000, 250000, 500000, 1000000, 2000000, 4000000 };
 8001444:	4b20      	ldr	r3, [pc, #128]	; (80014c8 <bmp2_compute_meas_time+0xa0>)
 8001446:	f107 0410 	add.w	r4, r7, #16
 800144a:	461d      	mov	r5, r3
 800144c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800144e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001450:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001454:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    rslt = null_ptr_check(dev);
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f000 f837 	bl	80014cc <null_ptr_check>
 800145e:	4603      	mov	r3, r0
 8001460:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    if ((rslt == BMP2_OK) && (conf != NULL))
 8001464:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8001468:	2b00      	cmp	r3, #0
 800146a:	d122      	bne.n	80014b2 <bmp2_compute_meas_time+0x8a>
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d01f      	beq.n	80014b2 <bmp2_compute_meas_time+0x8a>
    {
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	7e1b      	ldrb	r3, [r3, #24]
 8001476:	2b03      	cmp	r3, #3
 8001478:	d111      	bne.n	800149e <bmp2_compute_meas_time+0x76>
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode] + standby_time[conf->odr];
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	78db      	ldrb	r3, [r3, #3]
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	3348      	adds	r3, #72	; 0x48
 8001482:	443b      	add	r3, r7
 8001484:	f853 2c18 	ldr.w	r2, [r3, #-24]
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	789b      	ldrb	r3, [r3, #2]
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	3348      	adds	r3, #72	; 0x48
 8001490:	443b      	add	r3, r7
 8001492:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8001496:	441a      	add	r2, r3
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 800149c:	e00c      	b.n	80014b8 <bmp2_compute_meas_time+0x90>
        }
        else
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode];
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	78db      	ldrb	r3, [r3, #3]
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	3348      	adds	r3, #72	; 0x48
 80014a6:	443b      	add	r3, r7
 80014a8:	f853 2c18 	ldr.w	r2, [r3, #-24]
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 80014b0:	e002      	b.n	80014b8 <bmp2_compute_meas_time+0x90>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80014b2:	23ff      	movs	r3, #255	; 0xff
 80014b4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }

    return rslt;
 80014b8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3748      	adds	r7, #72	; 0x48
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bdb0      	pop	{r4, r5, r7, pc}
 80014c4:	0800c9d0 	.word	0x0800c9d0
 80014c8:	0800c9e4 	.word	0x0800c9e4

080014cc <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp2_dev *dev)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d00b      	beq.n	80014f2 <null_ptr_check+0x26>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d007      	beq.n	80014f2 <null_ptr_check+0x26>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	691b      	ldr	r3, [r3, #16]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d003      	beq.n	80014f2 <null_ptr_check+0x26>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	695b      	ldr	r3, [r3, #20]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d102      	bne.n	80014f8 <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP2_E_NULL_PTR;
 80014f2:	23ff      	movs	r3, #255	; 0xff
 80014f4:	73fb      	strb	r3, [r7, #15]
 80014f6:	e001      	b.n	80014fc <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP2_OK;
 80014f8:	2300      	movs	r3, #0
 80014fa:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80014fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001500:	4618      	mov	r0, r3
 8001502:	3714      	adds	r7, #20
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 800150c:	b480      	push	{r7}
 800150e:	b087      	sub	sp, #28
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
 8001518:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 800151a:	2301      	movs	r3, #1
 800151c:	617b      	str	r3, [r7, #20]
 800151e:	e015      	b.n	800154c <interleave_data+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8001520:	68fa      	ldr	r2, [r7, #12]
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	441a      	add	r2, r3
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	3b01      	subs	r3, #1
 800152c:	68b9      	ldr	r1, [r7, #8]
 800152e:	440b      	add	r3, r1
 8001530:	7812      	ldrb	r2, [r2, #0]
 8001532:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	441a      	add	r2, r3
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	68b9      	ldr	r1, [r7, #8]
 8001540:	440b      	add	r3, r1
 8001542:	7812      	ldrb	r2, [r2, #0]
 8001544:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	3301      	adds	r3, #1
 800154a:	617b      	str	r3, [r7, #20]
 800154c:	697a      	ldr	r2, [r7, #20]
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	429a      	cmp	r2, r3
 8001552:	d3e5      	bcc.n	8001520 <interleave_data+0x14>
    }
}
 8001554:	bf00      	nop
 8001556:	bf00      	nop
 8001558:	371c      	adds	r7, #28
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp2_dev *dev)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b08a      	sub	sp, #40	; 0x28
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP2_CALIB_DATA_SIZE] = { 0 };
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	f107 0310 	add.w	r3, r7, #16
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	605a      	str	r2, [r3, #4]
 8001578:	609a      	str	r2, [r3, #8]
 800157a:	60da      	str	r2, [r3, #12]
 800157c:	611a      	str	r2, [r3, #16]
 800157e:	751a      	strb	r2, [r3, #20]

    rslt = bmp2_get_regs(BMP2_REG_DIG_T1_LSB, temp, BMP2_CALIB_DATA_SIZE, dev);
 8001580:	f107 010c 	add.w	r1, r7, #12
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2219      	movs	r2, #25
 8001588:	2088      	movs	r0, #136	; 0x88
 800158a:	f7ff fd7c 	bl	8001086 <bmp2_get_regs>
 800158e:	4603      	mov	r3, r0
 8001590:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (rslt == BMP2_OK)
 8001594:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001598:	2b00      	cmp	r3, #0
 800159a:	d177      	bne.n	800168c <get_calib_param+0x12a>
    {
        dev->calib_param.dig_t1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T1_MSB_POS], temp[BMP2_DIG_T1_LSB_POS]));
 800159c:	7b7b      	ldrb	r3, [r7, #13]
 800159e:	021b      	lsls	r3, r3, #8
 80015a0:	b21a      	sxth	r2, r3
 80015a2:	7b3b      	ldrb	r3, [r7, #12]
 80015a4:	b21b      	sxth	r3, r3
 80015a6:	4313      	orrs	r3, r2
 80015a8:	b21b      	sxth	r3, r3
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	839a      	strh	r2, [r3, #28]
        dev->calib_param.dig_t2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T2_MSB_POS], temp[BMP2_DIG_T2_LSB_POS]));
 80015b0:	7bfb      	ldrb	r3, [r7, #15]
 80015b2:	021b      	lsls	r3, r3, #8
 80015b4:	b21a      	sxth	r2, r3
 80015b6:	7bbb      	ldrb	r3, [r7, #14]
 80015b8:	b21b      	sxth	r3, r3
 80015ba:	4313      	orrs	r3, r2
 80015bc:	b21a      	sxth	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	83da      	strh	r2, [r3, #30]
        dev->calib_param.dig_t3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T3_MSB_POS], temp[BMP2_DIG_T3_LSB_POS]));
 80015c2:	7c7b      	ldrb	r3, [r7, #17]
 80015c4:	021b      	lsls	r3, r3, #8
 80015c6:	b21a      	sxth	r2, r3
 80015c8:	7c3b      	ldrb	r3, [r7, #16]
 80015ca:	b21b      	sxth	r3, r3
 80015cc:	4313      	orrs	r3, r2
 80015ce:	b21a      	sxth	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	841a      	strh	r2, [r3, #32]
        dev->calib_param.dig_p1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P1_MSB_POS], temp[BMP2_DIG_P1_LSB_POS]));
 80015d4:	7cfb      	ldrb	r3, [r7, #19]
 80015d6:	021b      	lsls	r3, r3, #8
 80015d8:	b21a      	sxth	r2, r3
 80015da:	7cbb      	ldrb	r3, [r7, #18]
 80015dc:	b21b      	sxth	r3, r3
 80015de:	4313      	orrs	r3, r2
 80015e0:	b21b      	sxth	r3, r3
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	845a      	strh	r2, [r3, #34]	; 0x22
        dev->calib_param.dig_p2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P2_MSB_POS], temp[BMP2_DIG_P2_LSB_POS]));
 80015e8:	7d7b      	ldrb	r3, [r7, #21]
 80015ea:	021b      	lsls	r3, r3, #8
 80015ec:	b21a      	sxth	r2, r3
 80015ee:	7d3b      	ldrb	r3, [r7, #20]
 80015f0:	b21b      	sxth	r3, r3
 80015f2:	4313      	orrs	r3, r2
 80015f4:	b21a      	sxth	r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	849a      	strh	r2, [r3, #36]	; 0x24
        dev->calib_param.dig_p3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P3_MSB_POS], temp[BMP2_DIG_P3_LSB_POS]));
 80015fa:	7dfb      	ldrb	r3, [r7, #23]
 80015fc:	021b      	lsls	r3, r3, #8
 80015fe:	b21a      	sxth	r2, r3
 8001600:	7dbb      	ldrb	r3, [r7, #22]
 8001602:	b21b      	sxth	r3, r3
 8001604:	4313      	orrs	r3, r2
 8001606:	b21a      	sxth	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	84da      	strh	r2, [r3, #38]	; 0x26
        dev->calib_param.dig_p4 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P4_MSB_POS], temp[BMP2_DIG_P4_LSB_POS]));
 800160c:	7e7b      	ldrb	r3, [r7, #25]
 800160e:	021b      	lsls	r3, r3, #8
 8001610:	b21a      	sxth	r2, r3
 8001612:	7e3b      	ldrb	r3, [r7, #24]
 8001614:	b21b      	sxth	r3, r3
 8001616:	4313      	orrs	r3, r2
 8001618:	b21a      	sxth	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	851a      	strh	r2, [r3, #40]	; 0x28
        dev->calib_param.dig_p5 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P5_MSB_POS], temp[BMP2_DIG_P5_LSB_POS]));
 800161e:	7efb      	ldrb	r3, [r7, #27]
 8001620:	021b      	lsls	r3, r3, #8
 8001622:	b21a      	sxth	r2, r3
 8001624:	7ebb      	ldrb	r3, [r7, #26]
 8001626:	b21b      	sxth	r3, r3
 8001628:	4313      	orrs	r3, r2
 800162a:	b21a      	sxth	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	855a      	strh	r2, [r3, #42]	; 0x2a
        dev->calib_param.dig_p6 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P6_MSB_POS], temp[BMP2_DIG_P6_LSB_POS]));
 8001630:	7f7b      	ldrb	r3, [r7, #29]
 8001632:	021b      	lsls	r3, r3, #8
 8001634:	b21a      	sxth	r2, r3
 8001636:	7f3b      	ldrb	r3, [r7, #28]
 8001638:	b21b      	sxth	r3, r3
 800163a:	4313      	orrs	r3, r2
 800163c:	b21a      	sxth	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	859a      	strh	r2, [r3, #44]	; 0x2c
        dev->calib_param.dig_p7 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P7_MSB_POS], temp[BMP2_DIG_P7_LSB_POS]));
 8001642:	7ffb      	ldrb	r3, [r7, #31]
 8001644:	021b      	lsls	r3, r3, #8
 8001646:	b21a      	sxth	r2, r3
 8001648:	7fbb      	ldrb	r3, [r7, #30]
 800164a:	b21b      	sxth	r3, r3
 800164c:	4313      	orrs	r3, r2
 800164e:	b21a      	sxth	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	85da      	strh	r2, [r3, #46]	; 0x2e
        dev->calib_param.dig_p8 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P8_MSB_POS], temp[BMP2_DIG_P8_LSB_POS]));
 8001654:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001658:	021b      	lsls	r3, r3, #8
 800165a:	b21a      	sxth	r2, r3
 800165c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001660:	b21b      	sxth	r3, r3
 8001662:	4313      	orrs	r3, r2
 8001664:	b21a      	sxth	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	861a      	strh	r2, [r3, #48]	; 0x30
        dev->calib_param.dig_p9 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P9_MSB_POS], temp[BMP2_DIG_P9_LSB_POS]));
 800166a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800166e:	021b      	lsls	r3, r3, #8
 8001670:	b21a      	sxth	r2, r3
 8001672:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001676:	b21b      	sxth	r3, r3
 8001678:	4313      	orrs	r3, r2
 800167a:	b21a      	sxth	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	865a      	strh	r2, [r3, #50]	; 0x32
        dev->calib_param.dig_p10 = (int8_t) ((uint8_t)(temp[BMP2_DIG_P10_POS]));
 8001680:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001684:	b25a      	sxtb	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    return rslt;
 800168c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001690:	4618      	mov	r0, r3
 8001692:	3728      	adds	r7, #40	; 0x28
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
 80016a4:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 80016a6:	2300      	movs	r3, #0
 80016a8:	82bb      	strh	r3, [r7, #20]
    uint8_t reg_addr[2] = { BMP2_REG_CTRL_MEAS, BMP2_REG_CONFIG };
 80016aa:	f24f 53f4 	movw	r3, #62964	; 0xf5f4
 80016ae:	823b      	strh	r3, [r7, #16]

    if (conf != NULL)
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d074      	beq.n	80017a0 <conf_sensor+0x108>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 80016b6:	f107 0114 	add.w	r1, r7, #20
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2202      	movs	r2, #2
 80016be:	20f4      	movs	r0, #244	; 0xf4
 80016c0:	f7ff fce1 	bl	8001086 <bmp2_get_regs>
 80016c4:	4603      	mov	r3, r0
 80016c6:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 80016c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d169      	bne.n	80017a4 <conf_sensor+0x10c>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp2_soft_reset(dev);
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff fd82 	bl	80011da <bmp2_soft_reset>
 80016d6:	4603      	mov	r3, r0
 80016d8:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 80016da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d160      	bne.n	80017a4 <conf_sensor+0x10c>
            {
                set_os_mode(temp, conf);
 80016e2:	f107 0314 	add.w	r3, r7, #20
 80016e6:	68b9      	ldr	r1, [r7, #8]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f000 f861 	bl	80017b0 <set_os_mode>
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_STANDBY_DURN, conf->odr);
 80016ee:	7d7b      	ldrb	r3, [r7, #21]
 80016f0:	b25b      	sxtb	r3, r3
 80016f2:	f003 031f 	and.w	r3, r3, #31
 80016f6:	b25a      	sxtb	r2, r3
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	789b      	ldrb	r3, [r3, #2]
 80016fc:	015b      	lsls	r3, r3, #5
 80016fe:	b25b      	sxtb	r3, r3
 8001700:	4313      	orrs	r3, r2
 8001702:	b25b      	sxtb	r3, r3
 8001704:	b2db      	uxtb	r3, r3
 8001706:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_FILTER, conf->filter);
 8001708:	7d7b      	ldrb	r3, [r7, #21]
 800170a:	b25b      	sxtb	r3, r3
 800170c:	f023 031c 	bic.w	r3, r3, #28
 8001710:	b25a      	sxtb	r2, r3
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	791b      	ldrb	r3, [r3, #4]
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	b25b      	sxtb	r3, r3
 800171a:	f003 031c 	and.w	r3, r3, #28
 800171e:	b25b      	sxtb	r3, r3
 8001720:	4313      	orrs	r3, r2
 8001722:	b25b      	sxtb	r3, r3
 8001724:	b2db      	uxtb	r3, r3
 8001726:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE, conf->spi3w_en);
 8001728:	7d7b      	ldrb	r3, [r7, #21]
 800172a:	b25b      	sxtb	r3, r3
 800172c:	f023 0301 	bic.w	r3, r3, #1
 8001730:	b25a      	sxtb	r2, r3
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	795b      	ldrb	r3, [r3, #5]
 8001736:	b25b      	sxtb	r3, r3
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	b25b      	sxtb	r3, r3
 800173e:	4313      	orrs	r3, r2
 8001740:	b25b      	sxtb	r3, r3
 8001742:	b2db      	uxtb	r3, r3
 8001744:	757b      	strb	r3, [r7, #21]

                rslt = bmp2_set_regs(reg_addr, temp, 2, dev);
 8001746:	f107 0114 	add.w	r1, r7, #20
 800174a:	f107 0010 	add.w	r0, r7, #16
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2202      	movs	r2, #2
 8001752:	f7ff fcd0 	bl	80010f6 <bmp2_set_regs>
 8001756:	4603      	mov	r3, r0
 8001758:	75fb      	strb	r3, [r7, #23]

                if ((rslt == BMP2_OK) && (mode != BMP2_POWERMODE_SLEEP))
 800175a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d120      	bne.n	80017a4 <conf_sensor+0x10c>
 8001762:	7bfb      	ldrb	r3, [r7, #15]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d01d      	beq.n	80017a4 <conf_sensor+0x10c>
                {
                    dev->power_mode = mode;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	7bfa      	ldrb	r2, [r7, #15]
 800176c:	761a      	strb	r2, [r3, #24]

                    /* Write only the power mode register in a separate write */
                    temp[0] = BMP2_SET_BITS_POS_0(temp[0], BMP2_POWERMODE, mode);
 800176e:	7d3b      	ldrb	r3, [r7, #20]
 8001770:	b25b      	sxtb	r3, r3
 8001772:	f023 0303 	bic.w	r3, r3, #3
 8001776:	b25a      	sxtb	r2, r3
 8001778:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800177c:	f003 0303 	and.w	r3, r3, #3
 8001780:	b25b      	sxtb	r3, r3
 8001782:	4313      	orrs	r3, r2
 8001784:	b25b      	sxtb	r3, r3
 8001786:	b2db      	uxtb	r3, r3
 8001788:	753b      	strb	r3, [r7, #20]
                    rslt = bmp2_set_regs(reg_addr, temp, 1, dev);
 800178a:	f107 0114 	add.w	r1, r7, #20
 800178e:	f107 0010 	add.w	r0, r7, #16
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2201      	movs	r2, #1
 8001796:	f7ff fcae 	bl	80010f6 <bmp2_set_regs>
 800179a:	4603      	mov	r3, r0
 800179c:	75fb      	strb	r3, [r7, #23]
 800179e:	e001      	b.n	80017a4 <conf_sensor+0x10c>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80017a0:	23ff      	movs	r3, #255	; 0xff
 80017a2:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80017a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3718      	adds	r7, #24
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <set_os_mode>:
/*!
 *  @brief This internal API is used to set the over-sampling rate of temperature and pressure
 *  based on the over-sampling mode.
 */
static void set_os_mode(uint8_t *reg_data, const struct bmp2_config *conf)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
    switch (conf->os_mode)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	78db      	ldrb	r3, [r3, #3]
 80017be:	2b04      	cmp	r3, #4
 80017c0:	f200 808b 	bhi.w	80018da <set_os_mode+0x12a>
 80017c4:	a201      	add	r2, pc, #4	; (adr r2, 80017cc <set_os_mode+0x1c>)
 80017c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ca:	bf00      	nop
 80017cc:	080017e1 	.word	0x080017e1
 80017d0:	08001813 	.word	0x08001813
 80017d4:	08001845 	.word	0x08001845
 80017d8:	08001877 	.word	0x08001877
 80017dc:	080018a9 	.word	0x080018a9
    {
        case BMP2_OS_MODE_ULTRA_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	b25b      	sxtb	r3, r3
 80017e6:	f003 031f 	and.w	r3, r3, #31
 80017ea:	b25b      	sxtb	r3, r3
 80017ec:	f043 0320 	orr.w	r3, r3, #32
 80017f0:	b25b      	sxtb	r3, r3
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_1X);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	b25b      	sxtb	r3, r3
 80017fe:	f023 031c 	bic.w	r3, r3, #28
 8001802:	b25b      	sxtb	r3, r3
 8001804:	f043 0304 	orr.w	r3, r3, #4
 8001808:	b25b      	sxtb	r3, r3
 800180a:	b2da      	uxtb	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	701a      	strb	r2, [r3, #0]
            break;
 8001810:	e064      	b.n	80018dc <set_os_mode+0x12c>
        case BMP2_OS_MODE_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	b25b      	sxtb	r3, r3
 8001818:	f003 031f 	and.w	r3, r3, #31
 800181c:	b25b      	sxtb	r3, r3
 800181e:	f043 0320 	orr.w	r3, r3, #32
 8001822:	b25b      	sxtb	r3, r3
 8001824:	b2da      	uxtb	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_2X);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	b25b      	sxtb	r3, r3
 8001830:	f023 031c 	bic.w	r3, r3, #28
 8001834:	b25b      	sxtb	r3, r3
 8001836:	f043 0308 	orr.w	r3, r3, #8
 800183a:	b25b      	sxtb	r3, r3
 800183c:	b2da      	uxtb	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	701a      	strb	r2, [r3, #0]
            break;
 8001842:	e04b      	b.n	80018dc <set_os_mode+0x12c>
        case BMP2_OS_MODE_STANDARD_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	b25b      	sxtb	r3, r3
 800184a:	f003 031f 	and.w	r3, r3, #31
 800184e:	b25b      	sxtb	r3, r3
 8001850:	f043 0320 	orr.w	r3, r3, #32
 8001854:	b25b      	sxtb	r3, r3
 8001856:	b2da      	uxtb	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_4X);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	b25b      	sxtb	r3, r3
 8001862:	f023 031c 	bic.w	r3, r3, #28
 8001866:	b25b      	sxtb	r3, r3
 8001868:	f043 030c 	orr.w	r3, r3, #12
 800186c:	b25b      	sxtb	r3, r3
 800186e:	b2da      	uxtb	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	701a      	strb	r2, [r3, #0]
            break;
 8001874:	e032      	b.n	80018dc <set_os_mode+0x12c>
        case BMP2_OS_MODE_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	b25b      	sxtb	r3, r3
 800187c:	f003 031f 	and.w	r3, r3, #31
 8001880:	b25b      	sxtb	r3, r3
 8001882:	f043 0320 	orr.w	r3, r3, #32
 8001886:	b25b      	sxtb	r3, r3
 8001888:	b2da      	uxtb	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_8X);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	b25b      	sxtb	r3, r3
 8001894:	f023 031c 	bic.w	r3, r3, #28
 8001898:	b25b      	sxtb	r3, r3
 800189a:	f043 0310 	orr.w	r3, r3, #16
 800189e:	b25b      	sxtb	r3, r3
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	701a      	strb	r2, [r3, #0]
            break;
 80018a6:	e019      	b.n	80018dc <set_os_mode+0x12c>
        case BMP2_OS_MODE_ULTRA_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_2X);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	b25b      	sxtb	r3, r3
 80018ae:	f003 031f 	and.w	r3, r3, #31
 80018b2:	b25b      	sxtb	r3, r3
 80018b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018b8:	b25b      	sxtb	r3, r3
 80018ba:	b2da      	uxtb	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_16X);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	b25b      	sxtb	r3, r3
 80018c6:	f023 031c 	bic.w	r3, r3, #28
 80018ca:	b25b      	sxtb	r3, r3
 80018cc:	f043 0314 	orr.w	r3, r3, #20
 80018d0:	b25b      	sxtb	r3, r3
 80018d2:	b2da      	uxtb	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	701a      	strb	r2, [r3, #0]
            break;
 80018d8:	e000      	b.n	80018dc <set_os_mode+0x12c>
        default:
            break;
 80018da:	bf00      	nop
    }
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure and temperature
 *  data and store it in the bmp2_uncomp_data structure instance.
 */
static int8_t parse_sensor_data(const uint8_t *reg_data, struct bmp2_uncomp_data *uncomp_data)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	031b      	lsls	r3, r3, #12
 80018f8:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	3301      	adds	r3, #1
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	011b      	lsls	r3, r3, #4
 8001902:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3302      	adds	r3, #2
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	091b      	lsrs	r3, r3, #4
 800190c:	b2db      	uxtb	r3, r3
 800190e:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001910:	697a      	ldr	r2, [r7, #20]
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	431a      	orrs	r2, r3
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	431a      	orrs	r2, r3
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for temperature data */
    data_msb = (int32_t)reg_data[3] << 12;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	3303      	adds	r3, #3
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	031b      	lsls	r3, r3, #12
 8001926:	617b      	str	r3, [r7, #20]
    data_lsb = (int32_t)reg_data[4] << 4;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3304      	adds	r3, #4
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	011b      	lsls	r3, r3, #4
 8001930:	613b      	str	r3, [r7, #16]
    data_xlsb = (int32_t)reg_data[5] >> 4;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	3305      	adds	r3, #5
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	091b      	lsrs	r3, r3, #4
 800193a:	b2db      	uxtb	r3, r3
 800193c:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = (int32_t)(data_msb | data_lsb | data_xlsb);
 800193e:	697a      	ldr	r2, [r7, #20]
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	431a      	orrs	r2, r3
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	4313      	orrs	r3, r2
 8001948:	461a      	mov	r2, r3
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	601a      	str	r2, [r3, #0]

    rslt = st_check_boundaries((int32_t)uncomp_data->temperature, (int32_t)uncomp_data->pressure);
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	4619      	mov	r1, r3
 8001958:	4610      	mov	r0, r2
 800195a:	f000 fae5 	bl	8001f28 <st_check_boundaries>
 800195e:	4603      	mov	r3, r0
 8001960:	72fb      	strb	r3, [r7, #11]

    return rslt;
 8001962:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8001966:	4618      	mov	r0, r3
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
	...

08001970 <compensate_temperature>:
 * uncompensated temperature. This API uses double floating precision.
 */
static int8_t compensate_temperature(double *comp_temperature,
                                     const struct bmp2_uncomp_data *uncomp_data,
                                     struct bmp2_dev *dev)
{
 8001970:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001974:	b08c      	sub	sp, #48	; 0x30
 8001976:	af00      	add	r7, sp, #0
 8001978:	60f8      	str	r0, [r7, #12]
 800197a:	60b9      	str	r1, [r7, #8]
 800197c:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 800197e:	2300      	movs	r3, #0
 8001980:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double var1, var2;
    double temperature;

    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f7fe fdeb 	bl	8000564 <__aeabi_i2d>
 800198e:	f04f 0200 	mov.w	r2, #0
 8001992:	4b6c      	ldr	r3, [pc, #432]	; (8001b44 <compensate_temperature+0x1d4>)
 8001994:	f7fe ff7a 	bl	800088c <__aeabi_ddiv>
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	4614      	mov	r4, r2
 800199e:	461d      	mov	r5, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	8b9b      	ldrh	r3, [r3, #28]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7fe fdcd 	bl	8000544 <__aeabi_ui2d>
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	4b66      	ldr	r3, [pc, #408]	; (8001b48 <compensate_temperature+0x1d8>)
 80019b0:	f7fe ff6c 	bl	800088c <__aeabi_ddiv>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	4620      	mov	r0, r4
 80019ba:	4629      	mov	r1, r5
 80019bc:	f7fe fc84 	bl	80002c8 <__aeabi_dsub>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	4614      	mov	r4, r2
 80019c6:	461d      	mov	r5, r3
           ((double) dev->calib_param.dig_t2);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7fe fdc8 	bl	8000564 <__aeabi_i2d>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 80019d8:	4620      	mov	r0, r4
 80019da:	4629      	mov	r1, r5
 80019dc:	f7fe fe2c 	bl	8000638 <__aeabi_dmul>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 =
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7fe fdb9 	bl	8000564 <__aeabi_i2d>
 80019f2:	f04f 0200 	mov.w	r2, #0
 80019f6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80019fa:	f7fe ff47 	bl	800088c <__aeabi_ddiv>
 80019fe:	4602      	mov	r2, r0
 8001a00:	460b      	mov	r3, r1
 8001a02:	4614      	mov	r4, r2
 8001a04:	461d      	mov	r5, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	8b9b      	ldrh	r3, [r3, #28]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7fe fd9a 	bl	8000544 <__aeabi_ui2d>
 8001a10:	f04f 0200 	mov.w	r2, #0
 8001a14:	4b4d      	ldr	r3, [pc, #308]	; (8001b4c <compensate_temperature+0x1dc>)
 8001a16:	f7fe ff39 	bl	800088c <__aeabi_ddiv>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	4620      	mov	r0, r4
 8001a20:	4629      	mov	r1, r5
 8001a22:	f7fe fc51 	bl	80002c8 <__aeabi_dsub>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	4614      	mov	r4, r2
 8001a2c:	461d      	mov	r5, r3
         (((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)) *
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7fe fd96 	bl	8000564 <__aeabi_i2d>
 8001a38:	f04f 0200 	mov.w	r2, #0
 8001a3c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001a40:	f7fe ff24 	bl	800088c <__aeabi_ddiv>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	4690      	mov	r8, r2
 8001a4a:	4699      	mov	r9, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	8b9b      	ldrh	r3, [r3, #28]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7fe fd77 	bl	8000544 <__aeabi_ui2d>
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	4b3c      	ldr	r3, [pc, #240]	; (8001b4c <compensate_temperature+0x1dc>)
 8001a5c:	f7fe ff16 	bl	800088c <__aeabi_ddiv>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	4640      	mov	r0, r8
 8001a66:	4649      	mov	r1, r9
 8001a68:	f7fe fc2e 	bl	80002c8 <__aeabi_dsub>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8001a70:	4620      	mov	r0, r4
 8001a72:	4629      	mov	r1, r5
 8001a74:	f7fe fde0 	bl	8000638 <__aeabi_dmul>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	4614      	mov	r4, r2
 8001a7e:	461d      	mov	r5, r3
        ((double) dev->calib_param.dig_t3);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7fe fd6c 	bl	8000564 <__aeabi_i2d>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
    var2 =
 8001a90:	4620      	mov	r0, r4
 8001a92:	4629      	mov	r1, r5
 8001a94:	f7fe fdd0 	bl	8000638 <__aeabi_dmul>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	e9c7 2304 	strd	r2, r3, [r7, #16]

    dev->calib_param.t_fine = (int32_t) (var1 + var2);
 8001aa0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001aa4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001aa8:	f7fe fc10 	bl	80002cc <__adddf3>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	4610      	mov	r0, r2
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	f7ff f870 	bl	8000b98 <__aeabi_d2iz>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	639a      	str	r2, [r3, #56]	; 0x38
    temperature = (var1 + var2) / 5120.0;
 8001abe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ac2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ac6:	f7fe fc01 	bl	80002cc <__adddf3>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	4610      	mov	r0, r2
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	f04f 0200 	mov.w	r2, #0
 8001ad6:	4b1e      	ldr	r3, [pc, #120]	; (8001b50 <compensate_temperature+0x1e0>)
 8001ad8:	f7fe fed8 	bl	800088c <__aeabi_ddiv>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	e9c7 2308 	strd	r2, r3, [r7, #32]

    if (temperature < BMP2_MIN_TEMP_DOUBLE)
 8001ae4:	f04f 0200 	mov.w	r2, #0
 8001ae8:	4b1a      	ldr	r3, [pc, #104]	; (8001b54 <compensate_temperature+0x1e4>)
 8001aea:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001aee:	f7ff f815 	bl	8000b1c <__aeabi_dcmplt>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d007      	beq.n	8001b08 <compensate_temperature+0x198>
    {
        temperature = BMP2_MIN_TEMP_DOUBLE;
 8001af8:	f04f 0200 	mov.w	r2, #0
 8001afc:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <compensate_temperature+0x1e4>)
 8001afe:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MIN_TEMP;
 8001b02:	2301      	movs	r3, #1
 8001b04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if (temperature > BMP2_MAX_TEMP_DOUBLE)
 8001b08:	f04f 0200 	mov.w	r2, #0
 8001b0c:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <compensate_temperature+0x1e8>)
 8001b0e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b12:	f7ff f821 	bl	8000b58 <__aeabi_dcmpgt>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d007      	beq.n	8001b2c <compensate_temperature+0x1bc>
    {
        temperature = BMP2_MAX_TEMP_DOUBLE;
 8001b1c:	f04f 0200 	mov.w	r2, #0
 8001b20:	4b0d      	ldr	r3, [pc, #52]	; (8001b58 <compensate_temperature+0x1e8>)
 8001b22:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MAX_TEMP;
 8001b26:	2302      	movs	r3, #2
 8001b28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    (*comp_temperature) = temperature;
 8001b2c:	68f9      	ldr	r1, [r7, #12]
 8001b2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b32:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 8001b36:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3730      	adds	r7, #48	; 0x30
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b44:	40d00000 	.word	0x40d00000
 8001b48:	40900000 	.word	0x40900000
 8001b4c:	40c00000 	.word	0x40c00000
 8001b50:	40b40000 	.word	0x40b40000
 8001b54:	c0440000 	.word	0xc0440000
 8001b58:	40554000 	.word	0x40554000
 8001b5c:	00000000 	.word	0x00000000

08001b60 <compensate_pressure>:
 * uncompensated pressure. This API uses double floating precision.
 */
static int8_t compensate_pressure(double *comp_pressure,
                                  const struct bmp2_uncomp_data *uncomp_data,
                                  const struct bmp2_dev *dev)
{
 8001b60:	b5b0      	push	{r4, r5, r7, lr}
 8001b62:	b08c      	sub	sp, #48	; 0x30
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double var1, var2;
    double pressure = 0.0;
 8001b72:	f04f 0200 	mov.w	r2, #0
 8001b76:	f04f 0300 	mov.w	r3, #0
 8001b7a:	e9c7 2308 	strd	r2, r3, [r7, #32]

    var1 = ((double) dev->calib_param.t_fine / 2.0) - 64000.0;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7fe fcee 	bl	8000564 <__aeabi_i2d>
 8001b88:	f04f 0200 	mov.w	r2, #0
 8001b8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b90:	f7fe fe7c 	bl	800088c <__aeabi_ddiv>
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	4610      	mov	r0, r2
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	4bcb      	ldr	r3, [pc, #812]	; (8001ed0 <compensate_pressure+0x370>)
 8001ba2:	f7fe fb91 	bl	80002c8 <__aeabi_dsub>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 = var1 * var1 * ((double) dev->calib_param.dig_p6) / 32768.0;
 8001bae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bb2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001bb6:	f7fe fd3f 	bl	8000638 <__aeabi_dmul>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	4614      	mov	r4, r2
 8001bc0:	461d      	mov	r5, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7fe fccb 	bl	8000564 <__aeabi_i2d>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	4620      	mov	r0, r4
 8001bd4:	4629      	mov	r1, r5
 8001bd6:	f7fe fd2f 	bl	8000638 <__aeabi_dmul>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	4610      	mov	r0, r2
 8001be0:	4619      	mov	r1, r3
 8001be2:	f04f 0200 	mov.w	r2, #0
 8001be6:	4bbb      	ldr	r3, [pc, #748]	; (8001ed4 <compensate_pressure+0x374>)
 8001be8:	f7fe fe50 	bl	800088c <__aeabi_ddiv>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = var2 + var1 * ((double) dev->calib_param.dig_p5) * 2.0;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7fe fcb2 	bl	8000564 <__aeabi_i2d>
 8001c00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c04:	f7fe fd18 	bl	8000638 <__aeabi_dmul>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	4610      	mov	r0, r2
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	f7fe fb5a 	bl	80002cc <__adddf3>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c20:	f7fe fb54 	bl	80002cc <__adddf3>
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (var2 / 4.0) + (((double) dev->calib_param.dig_p4) * 65536.0);
 8001c2c:	f04f 0200 	mov.w	r2, #0
 8001c30:	4ba9      	ldr	r3, [pc, #676]	; (8001ed8 <compensate_pressure+0x378>)
 8001c32:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c36:	f7fe fe29 	bl	800088c <__aeabi_ddiv>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	4614      	mov	r4, r2
 8001c40:	461d      	mov	r5, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7fe fc8b 	bl	8000564 <__aeabi_i2d>
 8001c4e:	f04f 0200 	mov.w	r2, #0
 8001c52:	4ba2      	ldr	r3, [pc, #648]	; (8001edc <compensate_pressure+0x37c>)
 8001c54:	f7fe fcf0 	bl	8000638 <__aeabi_dmul>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	4620      	mov	r0, r4
 8001c5e:	4629      	mov	r1, r5
 8001c60:	f7fe fb34 	bl	80002cc <__adddf3>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var1 = (((double)dev->calib_param.dig_p3) * var1 * var1 / 524288.0 + ((double)dev->calib_param.dig_p2) * var1) /
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7fe fc76 	bl	8000564 <__aeabi_i2d>
 8001c78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c7c:	f7fe fcdc 	bl	8000638 <__aeabi_dmul>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	4610      	mov	r0, r2
 8001c86:	4619      	mov	r1, r3
 8001c88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c8c:	f7fe fcd4 	bl	8000638 <__aeabi_dmul>
 8001c90:	4602      	mov	r2, r0
 8001c92:	460b      	mov	r3, r1
 8001c94:	4610      	mov	r0, r2
 8001c96:	4619      	mov	r1, r3
 8001c98:	f04f 0200 	mov.w	r2, #0
 8001c9c:	4b90      	ldr	r3, [pc, #576]	; (8001ee0 <compensate_pressure+0x380>)
 8001c9e:	f7fe fdf5 	bl	800088c <__aeabi_ddiv>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	4614      	mov	r4, r2
 8001ca8:	461d      	mov	r5, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7fe fc57 	bl	8000564 <__aeabi_i2d>
 8001cb6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cba:	f7fe fcbd 	bl	8000638 <__aeabi_dmul>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	4620      	mov	r0, r4
 8001cc4:	4629      	mov	r1, r5
 8001cc6:	f7fe fb01 	bl	80002cc <__adddf3>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	4610      	mov	r0, r2
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	f04f 0200 	mov.w	r2, #0
 8001cd6:	4b82      	ldr	r3, [pc, #520]	; (8001ee0 <compensate_pressure+0x380>)
 8001cd8:	f7fe fdd8 	bl	800088c <__aeabi_ddiv>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	e9c7 2306 	strd	r2, r3, [r7, #24]
           524288.0;
    var1 = (1.0 + var1 / 32768.0) * ((double) dev->calib_param.dig_p1);
 8001ce4:	f04f 0200 	mov.w	r2, #0
 8001ce8:	4b7a      	ldr	r3, [pc, #488]	; (8001ed4 <compensate_pressure+0x374>)
 8001cea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001cee:	f7fe fdcd 	bl	800088c <__aeabi_ddiv>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	4610      	mov	r0, r2
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	f04f 0200 	mov.w	r2, #0
 8001cfe:	4b79      	ldr	r3, [pc, #484]	; (8001ee4 <compensate_pressure+0x384>)
 8001d00:	f7fe fae4 	bl	80002cc <__adddf3>
 8001d04:	4602      	mov	r2, r0
 8001d06:	460b      	mov	r3, r1
 8001d08:	4614      	mov	r4, r2
 8001d0a:	461d      	mov	r5, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7fe fc17 	bl	8000544 <__aeabi_ui2d>
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	4620      	mov	r0, r4
 8001d1c:	4629      	mov	r1, r5
 8001d1e:	f7fe fc8b 	bl	8000638 <__aeabi_dmul>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	e9c7 2306 	strd	r2, r3, [r7, #24]

    if (var1 < 0 || var1 > 0)
 8001d2a:	f04f 0200 	mov.w	r2, #0
 8001d2e:	f04f 0300 	mov.w	r3, #0
 8001d32:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d36:	f7fe fef1 	bl	8000b1c <__aeabi_dcmplt>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d10b      	bne.n	8001d58 <compensate_pressure+0x1f8>
 8001d40:	f04f 0200 	mov.w	r2, #0
 8001d44:	f04f 0300 	mov.w	r3, #0
 8001d48:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d4c:	f7fe ff04 	bl	8000b58 <__aeabi_dcmpgt>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f000 80de 	beq.w	8001f14 <compensate_pressure+0x3b4>
    {
        pressure = 1048576.0 - (double)uncomp_data->pressure;
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7fe fbf1 	bl	8000544 <__aeabi_ui2d>
 8001d62:	4602      	mov	r2, r0
 8001d64:	460b      	mov	r3, r1
 8001d66:	f04f 0000 	mov.w	r0, #0
 8001d6a:	495f      	ldr	r1, [pc, #380]	; (8001ee8 <compensate_pressure+0x388>)
 8001d6c:	f7fe faac 	bl	80002c8 <__aeabi_dsub>
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	e9c7 2308 	strd	r2, r3, [r7, #32]
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8001d78:	f04f 0200 	mov.w	r2, #0
 8001d7c:	4b5b      	ldr	r3, [pc, #364]	; (8001eec <compensate_pressure+0x38c>)
 8001d7e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d82:	f7fe fd83 	bl	800088c <__aeabi_ddiv>
 8001d86:	4602      	mov	r2, r0
 8001d88:	460b      	mov	r3, r1
 8001d8a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001d8e:	f7fe fa9b 	bl	80002c8 <__aeabi_dsub>
 8001d92:	4602      	mov	r2, r0
 8001d94:	460b      	mov	r3, r1
 8001d96:	4610      	mov	r0, r2
 8001d98:	4619      	mov	r1, r3
 8001d9a:	a347      	add	r3, pc, #284	; (adr r3, 8001eb8 <compensate_pressure+0x358>)
 8001d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da0:	f7fe fc4a 	bl	8000638 <__aeabi_dmul>
 8001da4:	4602      	mov	r2, r0
 8001da6:	460b      	mov	r3, r1
 8001da8:	4610      	mov	r0, r2
 8001daa:	4619      	mov	r1, r3
 8001dac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001db0:	f7fe fd6c 	bl	800088c <__aeabi_ddiv>
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	e9c7 2308 	strd	r2, r3, [r7, #32]
        var1 = ((double)dev->calib_param.dig_p9) * pressure * pressure / 2147483648.0;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7fe fbce 	bl	8000564 <__aeabi_i2d>
 8001dc8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001dcc:	f7fe fc34 	bl	8000638 <__aeabi_dmul>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	4610      	mov	r0, r2
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ddc:	f7fe fc2c 	bl	8000638 <__aeabi_dmul>
 8001de0:	4602      	mov	r2, r0
 8001de2:	460b      	mov	r3, r1
 8001de4:	4610      	mov	r0, r2
 8001de6:	4619      	mov	r1, r3
 8001de8:	f04f 0200 	mov.w	r2, #0
 8001dec:	4b40      	ldr	r3, [pc, #256]	; (8001ef0 <compensate_pressure+0x390>)
 8001dee:	f7fe fd4d 	bl	800088c <__aeabi_ddiv>
 8001df2:	4602      	mov	r2, r0
 8001df4:	460b      	mov	r3, r1
 8001df6:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 = pressure * ((double)dev->calib_param.dig_p8) / 32768.0;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7fe fbaf 	bl	8000564 <__aeabi_i2d>
 8001e06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e0a:	f7fe fc15 	bl	8000638 <__aeabi_dmul>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	460b      	mov	r3, r1
 8001e12:	4610      	mov	r0, r2
 8001e14:	4619      	mov	r1, r3
 8001e16:	f04f 0200 	mov.w	r2, #0
 8001e1a:	4b2e      	ldr	r3, [pc, #184]	; (8001ed4 <compensate_pressure+0x374>)
 8001e1c:	f7fe fd36 	bl	800088c <__aeabi_ddiv>
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	e9c7 2304 	strd	r2, r3, [r7, #16]

        pressure = pressure + (var1 + var2 + ((double)dev->calib_param.dig_p7)) / 16.0;
 8001e28:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e2c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e30:	f7fe fa4c 	bl	80002cc <__adddf3>
 8001e34:	4602      	mov	r2, r0
 8001e36:	460b      	mov	r3, r1
 8001e38:	4614      	mov	r4, r2
 8001e3a:	461d      	mov	r5, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7fe fb8e 	bl	8000564 <__aeabi_i2d>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	4620      	mov	r0, r4
 8001e4e:	4629      	mov	r1, r5
 8001e50:	f7fe fa3c 	bl	80002cc <__adddf3>
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	4610      	mov	r0, r2
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	f04f 0200 	mov.w	r2, #0
 8001e60:	4b24      	ldr	r3, [pc, #144]	; (8001ef4 <compensate_pressure+0x394>)
 8001e62:	f7fe fd13 	bl	800088c <__aeabi_ddiv>
 8001e66:	4602      	mov	r2, r0
 8001e68:	460b      	mov	r3, r1
 8001e6a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e6e:	f7fe fa2d 	bl	80002cc <__adddf3>
 8001e72:	4602      	mov	r2, r0
 8001e74:	460b      	mov	r3, r1
 8001e76:	e9c7 2308 	strd	r2, r3, [r7, #32]

        if (pressure < BMP2_MIN_PRES_DOUBLE)
 8001e7a:	a311      	add	r3, pc, #68	; (adr r3, 8001ec0 <compensate_pressure+0x360>)
 8001e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e80:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e84:	f7fe fe4a 	bl	8000b1c <__aeabi_dcmplt>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d007      	beq.n	8001e9e <compensate_pressure+0x33e>
        {
            pressure = BMP2_MIN_PRES_DOUBLE;
 8001e8e:	a30c      	add	r3, pc, #48	; (adr r3, 8001ec0 <compensate_pressure+0x360>)
 8001e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e94:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MIN_PRES;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        if (pressure > BMP2_MAX_PRES_DOUBLE)
 8001e9e:	a30a      	add	r3, pc, #40	; (adr r3, 8001ec8 <compensate_pressure+0x368>)
 8001ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ea8:	f7fe fe56 	bl	8000b58 <__aeabi_dcmpgt>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	e022      	b.n	8001ef8 <compensate_pressure+0x398>
 8001eb2:	bf00      	nop
 8001eb4:	f3af 8000 	nop.w
 8001eb8:	00000000 	.word	0x00000000
 8001ebc:	40b86a00 	.word	0x40b86a00
 8001ec0:	00000000 	.word	0x00000000
 8001ec4:	40dd4c00 	.word	0x40dd4c00
 8001ec8:	00000000 	.word	0x00000000
 8001ecc:	40fadb00 	.word	0x40fadb00
 8001ed0:	40ef4000 	.word	0x40ef4000
 8001ed4:	40e00000 	.word	0x40e00000
 8001ed8:	40100000 	.word	0x40100000
 8001edc:	40f00000 	.word	0x40f00000
 8001ee0:	41200000 	.word	0x41200000
 8001ee4:	3ff00000 	.word	0x3ff00000
 8001ee8:	41300000 	.word	0x41300000
 8001eec:	40b00000 	.word	0x40b00000
 8001ef0:	41e00000 	.word	0x41e00000
 8001ef4:	40300000 	.word	0x40300000
 8001ef8:	d007      	beq.n	8001f0a <compensate_pressure+0x3aa>
        {
            pressure = BMP2_MAX_PRES_DOUBLE;
 8001efa:	a309      	add	r3, pc, #36	; (adr r3, 8001f20 <compensate_pressure+0x3c0>)
 8001efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f00:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MAX_PRES;
 8001f04:	2304      	movs	r3, #4
 8001f06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        (*comp_pressure) = pressure;
 8001f0a:	68f9      	ldr	r1, [r7, #12]
 8001f0c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f10:	e9c1 2300 	strd	r2, r3, [r1]
    }

    return rslt;
 8001f14:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3730      	adds	r7, #48	; 0x30
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bdb0      	pop	{r4, r5, r7, pc}
 8001f20:	00000000 	.word	0x00000000
 8001f24:	40fadb00 	.word	0x40fadb00

08001f28 <st_check_boundaries>:
/*!
 * @This internal API checks whether the uncompensated temperature and
 * uncompensated pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001f32:	2300      	movs	r3, #0
 8001f34:	73fb      	strb	r3, [r7, #15]

    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in valid range */
    if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	db03      	blt.n	8001f44 <st_check_boundaries+0x1c>
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	4a1c      	ldr	r2, [pc, #112]	; (8001fb0 <st_check_boundaries+0x88>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	dd09      	ble.n	8001f58 <st_check_boundaries+0x30>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	db06      	blt.n	8001f58 <st_check_boundaries+0x30>
        (utemperature >= BMP2_ST_ADC_T_MIN && utemperature <= BMP2_ST_ADC_T_MAX))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a18      	ldr	r2, [pc, #96]	; (8001fb0 <st_check_boundaries+0x88>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	dc02      	bgt.n	8001f58 <st_check_boundaries+0x30>
    {
        rslt = BMP2_E_UNCOMP_PRESS_RANGE;
 8001f52:	23fa      	movs	r3, #250	; 0xfa
 8001f54:	73fb      	strb	r3, [r7, #15]
 8001f56:	e023      	b.n	8001fa0 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated temperature in not valid range AND uncompensated pressure in valid range */
    else if ((utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX) &&
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	db03      	blt.n	8001f66 <st_check_boundaries+0x3e>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a13      	ldr	r2, [pc, #76]	; (8001fb0 <st_check_boundaries+0x88>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	dd09      	ble.n	8001f7a <st_check_boundaries+0x52>
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	db06      	blt.n	8001f7a <st_check_boundaries+0x52>
             (upressure >= BMP2_ST_ADC_P_MIN && upressure <= BMP2_ST_ADC_P_MAX))
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	4a10      	ldr	r2, [pc, #64]	; (8001fb0 <st_check_boundaries+0x88>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	dc02      	bgt.n	8001f7a <st_check_boundaries+0x52>
    {
        rslt = BMP2_E_UNCOMP_TEMP_RANGE;
 8001f74:	23fb      	movs	r3, #251	; 0xfb
 8001f76:	73fb      	strb	r3, [r7, #15]
 8001f78:	e012      	b.n	8001fa0 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in not valid range */
    else if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	db03      	blt.n	8001f88 <st_check_boundaries+0x60>
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	4a0b      	ldr	r2, [pc, #44]	; (8001fb0 <st_check_boundaries+0x88>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	dd09      	ble.n	8001f9c <st_check_boundaries+0x74>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	db03      	blt.n	8001f96 <st_check_boundaries+0x6e>
             (utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a07      	ldr	r2, [pc, #28]	; (8001fb0 <st_check_boundaries+0x88>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	dd02      	ble.n	8001f9c <st_check_boundaries+0x74>
    {
        rslt = BMP2_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 8001f96:	23f9      	movs	r3, #249	; 0xf9
 8001f98:	73fb      	strb	r3, [r7, #15]
 8001f9a:	e001      	b.n	8001fa0 <st_check_boundaries+0x78>
    }
    else
    {
        rslt = BMP2_OK;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001fa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	000ffff0 	.word	0x000ffff0

08001fb4 <BMP2_Init>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
int8_t BMP2_Init(struct bmp2_dev* dev)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  uint32_t meas_time;
  struct bmp2_config conf;

  rslt = bmp2_init(dev);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f7ff f837 	bl	8001030 <bmp2_init>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	75fb      	strb	r3, [r7, #23]

  /* Always read the current settings before writing, especially when all the configuration is not modified */
  rslt = bmp2_get_config(&conf, dev);
 8001fc6:	f107 0308 	add.w	r3, r7, #8
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff f91c 	bl	800120a <bmp2_get_config>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	75fb      	strb	r3, [r7, #23]

  /* Configuring the over-sampling mode, filter coefficient and output data rate */
  /* Overwrite the desired settings */
  conf.filter = BMP2_FILTER_COEFF_8;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	733b      	strb	r3, [r7, #12]
  /* Over-sampling mode is set as ultra low resolution i.e., os_pres = 1x and os_temp = 1x */
  conf.os_mode = BMP2_OS_MODE_ULTRA_LOW_POWER;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	72fb      	strb	r3, [r7, #11]
  /* Setting the output data rate */
  conf.odr = BMP2_ODR_250_MS;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	72bb      	strb	r3, [r7, #10]

  rslt = bmp2_set_config(&conf, dev);
 8001fe2:	f107 0308 	add.w	r3, r7, #8
 8001fe6:	6879      	ldr	r1, [r7, #4]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff f94e 	bl	800128a <bmp2_set_config>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	75fb      	strb	r3, [r7, #23]

  /* Set normal power mode */
  rslt = bmp2_set_power_mode(BMP2_POWERMODE_NORMAL, &conf, dev);
 8001ff2:	f107 0308 	add.w	r3, r7, #8
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	2003      	movs	r0, #3
 8001ffc:	f7ff f980 	bl	8001300 <bmp2_set_power_mode>
 8002000:	4603      	mov	r3, r0
 8002002:	75fb      	strb	r3, [r7, #23]

  /* Calculate measurement time in microseconds */
  rslt = bmp2_compute_meas_time(&meas_time, &conf, dev);
 8002004:	f107 0108 	add.w	r1, r7, #8
 8002008:	f107 0310 	add.w	r3, r7, #16
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff fa0a 	bl	8001428 <bmp2_compute_meas_time>
 8002014:	4603      	mov	r3, r0
 8002016:	75fb      	strb	r3, [r7, #23]

  return rslt;
 8002018:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800201c:	4618      	mov	r0, r3
 800201e:	3718      	adds	r7, #24
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <bmp2_spi_read>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0
 800202a:	60b9      	str	r1, [r7, #8]
 800202c:	607a      	str	r2, [r7, #4]
 800202e:	603b      	str	r3, [r7, #0]
 8002030:	4603      	mov	r3, r0
 8002032:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI read routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 8002034:	2300      	movs	r3, #0
 8002036:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8002038:	2300      	movs	r3, #0
 800203a:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	6858      	ldr	r0, [r3, #4]
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	891b      	ldrh	r3, [r3, #8]
 8002048:	2200      	movs	r2, #0
 800204a:	4619      	mov	r1, r3
 800204c:	f001 fcba 	bl	80039c4 <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI , &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	6818      	ldr	r0, [r3, #0]
 8002054:	f107 010f 	add.w	r1, r7, #15
 8002058:	2305      	movs	r3, #5
 800205a:	2201      	movs	r2, #1
 800205c:	f002 fe91 	bl	8004d82 <HAL_SPI_Transmit>
 8002060:	4603      	mov	r3, r0
 8002062:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Receive( hbmp2->SPI,  reg_data, length,            BMP2_TIMEOUT);
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	6818      	ldr	r0, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	b29a      	uxth	r2, r3
 800206c:	2305      	movs	r3, #5
 800206e:	68b9      	ldr	r1, [r7, #8]
 8002070:	f002 fff5 	bl	800505e <HAL_SPI_Receive>
 8002074:	4603      	mov	r3, r0
 8002076:	461a      	mov	r2, r3
 8002078:	7dbb      	ldrb	r3, [r7, #22]
 800207a:	4413      	add	r3, r2
 800207c:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	6858      	ldr	r0, [r3, #4]
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	891b      	ldrh	r3, [r3, #8]
 8002086:	2201      	movs	r2, #1
 8002088:	4619      	mov	r1, r3
 800208a:	f001 fc9b 	bl	80039c4 <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 800208e:	7dbb      	ldrb	r3, [r7, #22]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <bmp2_spi_read+0x74>
    iError = -1;
 8002094:	23ff      	movs	r3, #255	; 0xff
 8002096:	75fb      	strb	r3, [r7, #23]

  return iError;
 8002098:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800209c:	4618      	mov	r0, r3
 800209e:	3718      	adds	r7, #24
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <bmp2_spi_write>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60b9      	str	r1, [r7, #8]
 80020ac:	607a      	str	r2, [r7, #4]
 80020ae:	603b      	str	r3, [r7, #0]
 80020b0:	4603      	mov	r3, r0
 80020b2:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI write routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 80020b4:	2300      	movs	r3, #0
 80020b6:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 80020b8:	2300      	movs	r3, #0
 80020ba:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	6858      	ldr	r0, [r3, #4]
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	891b      	ldrh	r3, [r3, #8]
 80020c8:	2200      	movs	r2, #0
 80020ca:	4619      	mov	r1, r3
 80020cc:	f001 fc7a 	bl	80039c4 <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI, &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	6818      	ldr	r0, [r3, #0]
 80020d4:	f107 010f 	add.w	r1, r7, #15
 80020d8:	2305      	movs	r3, #5
 80020da:	2201      	movs	r2, #1
 80020dc:	f002 fe51 	bl	8004d82 <HAL_SPI_Transmit>
 80020e0:	4603      	mov	r3, r0
 80020e2:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Transmit(hbmp2->SPI, (uint8_t*)reg_data, length,   BMP2_TIMEOUT);
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	6818      	ldr	r0, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	b29a      	uxth	r2, r3
 80020ec:	2305      	movs	r3, #5
 80020ee:	68b9      	ldr	r1, [r7, #8]
 80020f0:	f002 fe47 	bl	8004d82 <HAL_SPI_Transmit>
 80020f4:	4603      	mov	r3, r0
 80020f6:	461a      	mov	r2, r3
 80020f8:	7dbb      	ldrb	r3, [r7, #22]
 80020fa:	4413      	add	r3, r2
 80020fc:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	6858      	ldr	r0, [r3, #4]
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	891b      	ldrh	r3, [r3, #8]
 8002106:	2201      	movs	r2, #1
 8002108:	4619      	mov	r1, r3
 800210a:	f001 fc5b 	bl	80039c4 <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 800210e:	7dbb      	ldrb	r3, [r7, #22]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <bmp2_spi_write+0x74>
    iError = -1;
 8002114:	23ff      	movs	r3, #255	; 0xff
 8002116:	75fb      	strb	r3, [r7, #23]

  return iError;
 8002118:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800211c:	4618      	mov	r0, r3
 800211e:	3718      	adds	r7, #24
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <bmp2_delay_us>:
 *  @param[in] intf_ptr   : Interface pointer
 *
 *  @return void.
 */
void bmp2_delay_us(uint32_t period_us, void *intf_ptr)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  UNUSED(intf_ptr);
  HAL_Delay(period_us / 1000uL);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a05      	ldr	r2, [pc, #20]	; (8002148 <bmp2_delay_us+0x24>)
 8002132:	fba2 2303 	umull	r2, r3, r2, r3
 8002136:	099b      	lsrs	r3, r3, #6
 8002138:	4618      	mov	r0, r3
 800213a:	f001 f8cf 	bl	80032dc <HAL_Delay>
}
 800213e:	bf00      	nop
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	10624dd3 	.word	0x10624dd3

0800214c <BMP2_ReadData>:
 *  @retval 0 -> Success.
 *  @retval <0 -> Failure.
 *
 */
int8_t BMP2_ReadData(struct bmp2_dev *dev, double* press, double* temp)
{
 800214c:	b590      	push	{r4, r7, lr}
 800214e:	b08b      	sub	sp, #44	; 0x2c
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]
  int8_t rslt = BMP2_E_NULL_PTR;
 8002158:	23ff      	movs	r3, #255	; 0xff
 800215a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  struct bmp2_status status;
  struct bmp2_data comp_data;
  int8_t try = BMP2_GET_MAX_RETRY(dev);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	899b      	ldrh	r3, [r3, #12]
 8002164:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  do {
    /* Read sensor status */
    rslt = bmp2_get_status(&status, dev);
 8002168:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800216c:	68f9      	ldr	r1, [r7, #12]
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff f89a 	bl	80012a8 <bmp2_get_status>
 8002174:	4603      	mov	r3, r0
 8002176:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    /* Read compensated data */
    rslt = bmp2_get_sensor_data(&comp_data, dev);
 800217a:	f107 0310 	add.w	r3, r7, #16
 800217e:	68f9      	ldr	r1, [r7, #12]
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff f8d2 	bl	800132a <bmp2_get_sensor_data>
 8002186:	4603      	mov	r3, r0
 8002188:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    *temp = comp_data.temperature;
 800218c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	e9c1 2300 	strd	r2, r3, [r1]
    *press = comp_data.pressure / 100.0;
 8002196:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800219a:	f04f 0200 	mov.w	r2, #0
 800219e:	4b1c      	ldr	r3, [pc, #112]	; (8002210 <BMP2_ReadData+0xc4>)
 80021a0:	f7fe fb74 	bl	800088c <__aeabi_ddiv>
 80021a4:	4602      	mov	r2, r0
 80021a6:	460b      	mov	r3, r1
 80021a8:	68b9      	ldr	r1, [r7, #8]
 80021aa:	e9c1 2300 	strd	r2, r3, [r1]
    try--;
 80021ae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	3b01      	subs	r3, #1
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  } while (status.measuring != BMP2_MEAS_DONE && try > 0);
 80021bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d003      	beq.n	80021cc <BMP2_ReadData+0x80>
 80021c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	dccd      	bgt.n	8002168 <BMP2_ReadData+0x1c>

  /* Save reading result in sensor handler */
  BMP2_GET_PRESS(dev) = *press;
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d2:	68f9      	ldr	r1, [r7, #12]
 80021d4:	684c      	ldr	r4, [r1, #4]
 80021d6:	4610      	mov	r0, r2
 80021d8:	4619      	mov	r1, r3
 80021da:	f7fe fd25 	bl	8000c28 <__aeabi_d2f>
 80021de:	4603      	mov	r3, r0
 80021e0:	6163      	str	r3, [r4, #20]
  BMP2_GET_TEMP(dev) = *temp;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e8:	68f9      	ldr	r1, [r7, #12]
 80021ea:	684c      	ldr	r4, [r1, #4]
 80021ec:	4610      	mov	r0, r2
 80021ee:	4619      	mov	r1, r3
 80021f0:	f7fe fd1a 	bl	8000c28 <__aeabi_d2f>
 80021f4:	4603      	mov	r3, r0
 80021f6:	6123      	str	r3, [r4, #16]
  BMP2_GET_STATUS(dev) = rslt;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002200:	729a      	strb	r2, [r3, #10]

  return rslt;
 8002202:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 8002206:	4618      	mov	r0, r3
 8002208:	372c      	adds	r7, #44	; 0x2c
 800220a:	46bd      	mov	sp, r7
 800220c:	bd90      	pop	{r4, r7, pc}
 800220e:	bf00      	nop
 8002210:	40590000 	.word	0x40590000

08002214 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b08e      	sub	sp, #56	; 0x38
 8002218:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800221a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800221e:	2200      	movs	r2, #0
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	605a      	str	r2, [r3, #4]
 8002224:	609a      	str	r2, [r3, #8]
 8002226:	60da      	str	r2, [r3, #12]
 8002228:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800222a:	4bb5      	ldr	r3, [pc, #724]	; (8002500 <MX_GPIO_Init+0x2ec>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222e:	4ab4      	ldr	r2, [pc, #720]	; (8002500 <MX_GPIO_Init+0x2ec>)
 8002230:	f043 0310 	orr.w	r3, r3, #16
 8002234:	6313      	str	r3, [r2, #48]	; 0x30
 8002236:	4bb2      	ldr	r3, [pc, #712]	; (8002500 <MX_GPIO_Init+0x2ec>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	f003 0310 	and.w	r3, r3, #16
 800223e:	623b      	str	r3, [r7, #32]
 8002240:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002242:	4baf      	ldr	r3, [pc, #700]	; (8002500 <MX_GPIO_Init+0x2ec>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	4aae      	ldr	r2, [pc, #696]	; (8002500 <MX_GPIO_Init+0x2ec>)
 8002248:	f043 0304 	orr.w	r3, r3, #4
 800224c:	6313      	str	r3, [r2, #48]	; 0x30
 800224e:	4bac      	ldr	r3, [pc, #688]	; (8002500 <MX_GPIO_Init+0x2ec>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002252:	f003 0304 	and.w	r3, r3, #4
 8002256:	61fb      	str	r3, [r7, #28]
 8002258:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800225a:	4ba9      	ldr	r3, [pc, #676]	; (8002500 <MX_GPIO_Init+0x2ec>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	4aa8      	ldr	r2, [pc, #672]	; (8002500 <MX_GPIO_Init+0x2ec>)
 8002260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002264:	6313      	str	r3, [r2, #48]	; 0x30
 8002266:	4ba6      	ldr	r3, [pc, #664]	; (8002500 <MX_GPIO_Init+0x2ec>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800226e:	61bb      	str	r3, [r7, #24]
 8002270:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002272:	4ba3      	ldr	r3, [pc, #652]	; (8002500 <MX_GPIO_Init+0x2ec>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	4aa2      	ldr	r2, [pc, #648]	; (8002500 <MX_GPIO_Init+0x2ec>)
 8002278:	f043 0301 	orr.w	r3, r3, #1
 800227c:	6313      	str	r3, [r2, #48]	; 0x30
 800227e:	4ba0      	ldr	r3, [pc, #640]	; (8002500 <MX_GPIO_Init+0x2ec>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	617b      	str	r3, [r7, #20]
 8002288:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800228a:	4b9d      	ldr	r3, [pc, #628]	; (8002500 <MX_GPIO_Init+0x2ec>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	4a9c      	ldr	r2, [pc, #624]	; (8002500 <MX_GPIO_Init+0x2ec>)
 8002290:	f043 0302 	orr.w	r3, r3, #2
 8002294:	6313      	str	r3, [r2, #48]	; 0x30
 8002296:	4b9a      	ldr	r3, [pc, #616]	; (8002500 <MX_GPIO_Init+0x2ec>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	613b      	str	r3, [r7, #16]
 80022a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80022a2:	4b97      	ldr	r3, [pc, #604]	; (8002500 <MX_GPIO_Init+0x2ec>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	4a96      	ldr	r2, [pc, #600]	; (8002500 <MX_GPIO_Init+0x2ec>)
 80022a8:	f043 0320 	orr.w	r3, r3, #32
 80022ac:	6313      	str	r3, [r2, #48]	; 0x30
 80022ae:	4b94      	ldr	r3, [pc, #592]	; (8002500 <MX_GPIO_Init+0x2ec>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	f003 0320 	and.w	r3, r3, #32
 80022b6:	60fb      	str	r3, [r7, #12]
 80022b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022ba:	4b91      	ldr	r3, [pc, #580]	; (8002500 <MX_GPIO_Init+0x2ec>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	4a90      	ldr	r2, [pc, #576]	; (8002500 <MX_GPIO_Init+0x2ec>)
 80022c0:	f043 0308 	orr.w	r3, r3, #8
 80022c4:	6313      	str	r3, [r2, #48]	; 0x30
 80022c6:	4b8e      	ldr	r3, [pc, #568]	; (8002500 <MX_GPIO_Init+0x2ec>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	f003 0308 	and.w	r3, r3, #8
 80022ce:	60bb      	str	r3, [r7, #8]
 80022d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80022d2:	4b8b      	ldr	r3, [pc, #556]	; (8002500 <MX_GPIO_Init+0x2ec>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	4a8a      	ldr	r2, [pc, #552]	; (8002500 <MX_GPIO_Init+0x2ec>)
 80022d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022dc:	6313      	str	r3, [r2, #48]	; 0x30
 80022de:	4b88      	ldr	r3, [pc, #544]	; (8002500 <MX_GPIO_Init+0x2ec>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022e6:	607b      	str	r3, [r7, #4]
 80022e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BMP2_CSB_GPIO_Port, BMP2_CSB_Pin, GPIO_PIN_RESET);
 80022ea:	2200      	movs	r2, #0
 80022ec:	2110      	movs	r1, #16
 80022ee:	4885      	ldr	r0, [pc, #532]	; (8002504 <MX_GPIO_Init+0x2f0>)
 80022f0:	f001 fb68 	bl	80039c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FAN_INB_GPIO_Port, FAN_INB_Pin, GPIO_PIN_RESET);
 80022f4:	2200      	movs	r2, #0
 80022f6:	2110      	movs	r1, #16
 80022f8:	4883      	ldr	r0, [pc, #524]	; (8002508 <MX_GPIO_Init+0x2f4>)
 80022fa:	f001 fb63 	bl	80039c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRANSISTOR_GPIO_Port, TRANSISTOR_Pin, GPIO_PIN_SET);
 80022fe:	2201      	movs	r2, #1
 8002300:	2120      	movs	r1, #32
 8002302:	4881      	ldr	r0, [pc, #516]	; (8002508 <MX_GPIO_Init+0x2f4>)
 8002304:	f001 fb5e 	bl	80039c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002308:	2200      	movs	r2, #0
 800230a:	f244 0181 	movw	r1, #16513	; 0x4081
 800230e:	487f      	ldr	r0, [pc, #508]	; (800250c <MX_GPIO_Init+0x2f8>)
 8002310:	f001 fb58 	bl	80039c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_RESET);
 8002314:	2200      	movs	r2, #0
 8002316:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800231a:	487d      	ldr	r0, [pc, #500]	; (8002510 <MX_GPIO_Init+0x2fc>)
 800231c:	f001 fb52 	bl	80039c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|LD4_Pin|LD5_Pin, GPIO_PIN_RESET);
 8002320:	2200      	movs	r2, #0
 8002322:	f244 2140 	movw	r1, #16960	; 0x4240
 8002326:	487b      	ldr	r0, [pc, #492]	; (8002514 <MX_GPIO_Init+0x300>)
 8002328:	f001 fb4c 	bl	80039c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FAN_INA_GPIO_Port, FAN_INA_Pin, GPIO_PIN_RESET);
 800232c:	2200      	movs	r2, #0
 800232e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002332:	4879      	ldr	r0, [pc, #484]	; (8002518 <MX_GPIO_Init+0x304>)
 8002334:	f001 fb46 	bl	80039c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BMP2_CSB_Pin;
 8002338:	2310      	movs	r3, #16
 800233a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800233c:	2301      	movs	r3, #1
 800233e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002340:	2300      	movs	r3, #0
 8002342:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002344:	2303      	movs	r3, #3
 8002346:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BMP2_CSB_GPIO_Port, &GPIO_InitStruct);
 8002348:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800234c:	4619      	mov	r1, r3
 800234e:	486d      	ldr	r0, [pc, #436]	; (8002504 <MX_GPIO_Init+0x2f0>)
 8002350:	f001 f98c 	bl	800366c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002354:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002358:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800235a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800235e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002360:	2300      	movs	r3, #0
 8002362:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002364:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002368:	4619      	mov	r1, r3
 800236a:	486b      	ldr	r0, [pc, #428]	; (8002518 <MX_GPIO_Init+0x304>)
 800236c:	f001 f97e 	bl	800366c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002370:	2332      	movs	r3, #50	; 0x32
 8002372:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002374:	2302      	movs	r3, #2
 8002376:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002378:	2300      	movs	r3, #0
 800237a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800237c:	2303      	movs	r3, #3
 800237e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002380:	230b      	movs	r3, #11
 8002382:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002384:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002388:	4619      	mov	r1, r3
 800238a:	4863      	ldr	r0, [pc, #396]	; (8002518 <MX_GPIO_Init+0x304>)
 800238c:	f001 f96e 	bl	800366c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002390:	2386      	movs	r3, #134	; 0x86
 8002392:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002394:	2302      	movs	r3, #2
 8002396:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002398:	2300      	movs	r3, #0
 800239a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800239c:	2303      	movs	r3, #3
 800239e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80023a0:	230b      	movs	r3, #11
 80023a2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023a8:	4619      	mov	r1, r3
 80023aa:	4857      	ldr	r0, [pc, #348]	; (8002508 <MX_GPIO_Init+0x2f4>)
 80023ac:	f001 f95e 	bl	800366c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = FAN_INB_Pin|TRANSISTOR_Pin;
 80023b0:	2330      	movs	r3, #48	; 0x30
 80023b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023b4:	2301      	movs	r3, #1
 80023b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b8:	2300      	movs	r3, #0
 80023ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023bc:	2303      	movs	r3, #3
 80023be:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023c4:	4619      	mov	r1, r3
 80023c6:	4850      	ldr	r0, [pc, #320]	; (8002508 <MX_GPIO_Init+0x2f4>)
 80023c8:	f001 f950 	bl	800366c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80023cc:	f244 0381 	movw	r3, #16513	; 0x4081
 80023d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023d2:	2301      	movs	r3, #1
 80023d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d6:	2300      	movs	r3, #0
 80023d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023da:	2300      	movs	r3, #0
 80023dc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023e2:	4619      	mov	r1, r3
 80023e4:	4849      	ldr	r0, [pc, #292]	; (800250c <MX_GPIO_Init+0x2f8>)
 80023e6:	f001 f941 	bl	800366c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ON_Btn_Pin;
 80023ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80023ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80023f0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80023f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023f6:	2301      	movs	r3, #1
 80023f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ON_Btn_GPIO_Port, &GPIO_InitStruct);
 80023fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023fe:	4619      	mov	r1, r3
 8002400:	4843      	ldr	r0, [pc, #268]	; (8002510 <MX_GPIO_Init+0x2fc>)
 8002402:	f001 f933 	bl	800366c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002406:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800240a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800240c:	2301      	movs	r3, #1
 800240e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002410:	2300      	movs	r3, #0
 8002412:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002414:	2300      	movs	r3, #0
 8002416:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002418:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800241c:	4619      	mov	r1, r3
 800241e:	483c      	ldr	r0, [pc, #240]	; (8002510 <MX_GPIO_Init+0x2fc>)
 8002420:	f001 f924 	bl	800366c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OFF_Btn_Pin;
 8002424:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002428:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800242a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800242e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002430:	2302      	movs	r3, #2
 8002432:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OFF_Btn_GPIO_Port, &GPIO_InitStruct);
 8002434:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002438:	4619      	mov	r1, r3
 800243a:	4832      	ldr	r0, [pc, #200]	; (8002504 <MX_GPIO_Init+0x2f0>)
 800243c:	f001 f916 	bl	800366c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002440:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002444:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002446:	2302      	movs	r3, #2
 8002448:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244a:	2300      	movs	r3, #0
 800244c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800244e:	2303      	movs	r3, #3
 8002450:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002452:	230b      	movs	r3, #11
 8002454:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002456:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800245a:	4619      	mov	r1, r3
 800245c:	482b      	ldr	r0, [pc, #172]	; (800250c <MX_GPIO_Init+0x2f8>)
 800245e:	f001 f905 	bl	800366c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|LD4_Pin|LD5_Pin;
 8002462:	f244 2340 	movw	r3, #16960	; 0x4240
 8002466:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002468:	2301      	movs	r3, #1
 800246a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246c:	2300      	movs	r3, #0
 800246e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002470:	2300      	movs	r3, #0
 8002472:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002474:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002478:	4619      	mov	r1, r3
 800247a:	4826      	ldr	r0, [pc, #152]	; (8002514 <MX_GPIO_Init+0x300>)
 800247c:	f001 f8f6 	bl	800366c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002480:	2380      	movs	r3, #128	; 0x80
 8002482:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002484:	2300      	movs	r3, #0
 8002486:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002488:	2300      	movs	r3, #0
 800248a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800248c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002490:	4619      	mov	r1, r3
 8002492:	4820      	ldr	r0, [pc, #128]	; (8002514 <MX_GPIO_Init+0x300>)
 8002494:	f001 f8ea 	bl	800366c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FAN_INA_Pin;
 8002498:	f44f 7380 	mov.w	r3, #256	; 0x100
 800249c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800249e:	2301      	movs	r3, #1
 80024a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a2:	2300      	movs	r3, #0
 80024a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024a6:	2303      	movs	r3, #3
 80024a8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FAN_INA_GPIO_Port, &GPIO_InitStruct);
 80024aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024ae:	4619      	mov	r1, r3
 80024b0:	4819      	ldr	r0, [pc, #100]	; (8002518 <MX_GPIO_Init+0x304>)
 80024b2:	f001 f8db 	bl	800366c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80024b6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80024ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024bc:	2302      	movs	r3, #2
 80024be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c0:	2300      	movs	r3, #0
 80024c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024c4:	2303      	movs	r3, #3
 80024c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80024c8:	230a      	movs	r3, #10
 80024ca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024d0:	4619      	mov	r1, r3
 80024d2:	480d      	ldr	r0, [pc, #52]	; (8002508 <MX_GPIO_Init+0x2f4>)
 80024d4:	f001 f8ca 	bl	800366c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80024d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024de:	2300      	movs	r3, #0
 80024e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e2:	2300      	movs	r3, #0
 80024e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80024e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024ea:	4619      	mov	r1, r3
 80024ec:	4806      	ldr	r0, [pc, #24]	; (8002508 <MX_GPIO_Init+0x2f4>)
 80024ee:	f001 f8bd 	bl	800366c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80024f2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80024f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f8:	2302      	movs	r3, #2
 80024fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80024fc:	e00e      	b.n	800251c <MX_GPIO_Init+0x308>
 80024fe:	bf00      	nop
 8002500:	40023800 	.word	0x40023800
 8002504:	40021000 	.word	0x40021000
 8002508:	40020000 	.word	0x40020000
 800250c:	40020400 	.word	0x40020400
 8002510:	40021400 	.word	0x40021400
 8002514:	40021800 	.word	0x40021800
 8002518:	40020800 	.word	0x40020800
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251c:	2300      	movs	r3, #0
 800251e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002520:	2303      	movs	r3, #3
 8002522:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002524:	230b      	movs	r3, #11
 8002526:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002528:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800252c:	4619      	mov	r1, r3
 800252e:	4803      	ldr	r0, [pc, #12]	; (800253c <MX_GPIO_Init+0x328>)
 8002530:	f001 f89c 	bl	800366c <HAL_GPIO_Init>

}
 8002534:	bf00      	nop
 8002536:	3738      	adds	r7, #56	; 0x38
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40021800 	.word	0x40021800

08002540 <PID_Init>:
    float setpoint; // Desired value
} PID_Controller;

PID_Controller pid; // PID controller instance

void PID_Init(PID_Controller *pid, float Kp, float Ki, float Kd, float setpoint) {
 8002540:	b480      	push	{r7}
 8002542:	b087      	sub	sp, #28
 8002544:	af00      	add	r7, sp, #0
 8002546:	6178      	str	r0, [r7, #20]
 8002548:	ed87 0a04 	vstr	s0, [r7, #16]
 800254c:	edc7 0a03 	vstr	s1, [r7, #12]
 8002550:	ed87 1a02 	vstr	s2, [r7, #8]
 8002554:	edc7 1a01 	vstr	s3, [r7, #4]
    pid->Kp = Kp;
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	601a      	str	r2, [r3, #0]
    pid->Ki = Ki;
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	68fa      	ldr	r2, [r7, #12]
 8002562:	605a      	str	r2, [r3, #4]
    pid->Kd = Kd;
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	68ba      	ldr	r2, [r7, #8]
 8002568:	609a      	str	r2, [r3, #8]
    pid->prevError = 0.0f;
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	f04f 0200 	mov.w	r2, #0
 8002570:	60da      	str	r2, [r3, #12]
    pid->integral = 0.0f;
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	f04f 0200 	mov.w	r2, #0
 8002578:	611a      	str	r2, [r3, #16]
    pid->setpoint = setpoint;
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	615a      	str	r2, [r3, #20]
}
 8002580:	bf00      	nop
 8002582:	371c      	adds	r7, #28
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <PID_Compute>:

float PID_Compute(PID_Controller *pid, float currentTemperature) {
 800258c:	b480      	push	{r7}
 800258e:	b087      	sub	sp, #28
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	ed87 0a00 	vstr	s0, [r7]
    float error = pid->setpoint - currentTemperature;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	ed93 7a05 	vldr	s14, [r3, #20]
 800259e:	edd7 7a00 	vldr	s15, [r7]
 80025a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025a6:	edc7 7a05 	vstr	s15, [r7, #20]
    pid->integral += error;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	ed93 7a04 	vldr	s14, [r3, #16]
 80025b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80025b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	edc3 7a04 	vstr	s15, [r3, #16]
    float derivative = error - pid->prevError;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	edd3 7a03 	vldr	s15, [r3, #12]
 80025c4:	ed97 7a05 	vldr	s14, [r7, #20]
 80025c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025cc:	edc7 7a04 	vstr	s15, [r7, #16]
    float output = (pid->Kp * error) + (pid->Ki * pid->integral) + (pid->Kd * derivative);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	ed93 7a00 	vldr	s14, [r3]
 80025d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80025da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	edd3 6a01 	vldr	s13, [r3, #4]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	edd3 7a04 	vldr	s15, [r3, #16]
 80025ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	edd3 6a02 	vldr	s13, [r3, #8]
 80025f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80025fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002600:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002604:	edc7 7a03 	vstr	s15, [r7, #12]
    pid->prevError = error;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	60da      	str	r2, [r3, #12]
    return output;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	ee07 3a90 	vmov	s15, r3
}
 8002614:	eeb0 0a67 	vmov.f32	s0, s15
 8002618:	371c      	adds	r7, #28
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
	...

08002624 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  if(htim == &htim2)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4a18      	ldr	r2, [pc, #96]	; (8002690 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d129      	bne.n	8002688 <HAL_TIM_PeriodElapsedCallback+0x64>
  {
    static unsigned int cnt = 0;
    cnt++;
 8002634:	4b17      	ldr	r3, [pc, #92]	; (8002694 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	3301      	adds	r3, #1
 800263a:	4a16      	ldr	r2, [pc, #88]	; (8002694 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800263c:	6013      	str	r3, [r2, #0]
    BMP2_ReadData(&bmp2dev, &press, &temp); // Assuming BMP2_ReadData updates both `press` and `temp`
 800263e:	4a16      	ldr	r2, [pc, #88]	; (8002698 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002640:	4916      	ldr	r1, [pc, #88]	; (800269c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002642:	4817      	ldr	r0, [pc, #92]	; (80026a0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002644:	f7ff fd82 	bl	800214c <BMP2_ReadData>

    temp_int = (unsigned int)(temp * 1000); // Convert float temperature to integer (millidegrees)
 8002648:	4b13      	ldr	r3, [pc, #76]	; (8002698 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800264a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800264e:	f04f 0200 	mov.w	r2, #0
 8002652:	4b14      	ldr	r3, [pc, #80]	; (80026a4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002654:	f7fd fff0 	bl	8000638 <__aeabi_dmul>
 8002658:	4602      	mov	r2, r0
 800265a:	460b      	mov	r3, r1
 800265c:	4610      	mov	r0, r2
 800265e:	4619      	mov	r1, r3
 8002660:	f7fe fac2 	bl	8000be8 <__aeabi_d2uiz>
 8002664:	4603      	mov	r3, r0
 8002666:	4a10      	ldr	r2, [pc, #64]	; (80026a8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002668:	6013      	str	r3, [r2, #0]


    // PID computation and control logic
    float controlEffort = PID_Compute(&pid, temp);
 800266a:	4b0b      	ldr	r3, [pc, #44]	; (8002698 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800266c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002670:	4610      	mov	r0, r2
 8002672:	4619      	mov	r1, r3
 8002674:	f7fe fad8 	bl	8000c28 <__aeabi_d2f>
 8002678:	4603      	mov	r3, r0
 800267a:	ee00 3a10 	vmov	s0, r3
 800267e:	480b      	ldr	r0, [pc, #44]	; (80026ac <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002680:	f7ff ff84 	bl	800258c <PID_Compute>
 8002684:	ed87 0a03 	vstr	s0, [r7, #12]
    //ControlHeaterFan(temp, pid.setpoint);

  }
}
 8002688:	bf00      	nop
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	20000308 	.word	0x20000308
 8002694:	20000298 	.word	0x20000298
 8002698:	20000248 	.word	0x20000248
 800269c:	20000258 	.word	0x20000258
 80026a0:	20000018 	.word	0x20000018
 80026a4:	408f4000 	.word	0x408f4000
 80026a8:	20000250 	.word	0x20000250
 80026ac:	20000268 	.word	0x20000268

080026b0 <ControlHeaterFan>:

/* Control Heater and Fan based on PID output and Hysteresis */
void ControlHeaterFan(float currentTemperature, float setpoint) {
 80026b0:	b5b0      	push	{r4, r5, r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	ed87 0a01 	vstr	s0, [r7, #4]
 80026ba:	edc7 0a00 	vstr	s1, [r7]
    static uint8_t heaterOn = 0;
    static uint8_t fanOn = 0;

    // Define hysteresis threshold
    const float hysteresis = 0.04f; // Degree Celsius
 80026be:	4b40      	ldr	r3, [pc, #256]	; (80027c0 <ControlHeaterFan+0x110>)
 80026c0:	60fb      	str	r3, [r7, #12]

    // Decide on heater or fan based on control effort and hysteresis
    if (currentTemperature < setpoint - hysteresis + 0.03 ) {
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f7fd ff60 	bl	8000588 <__aeabi_f2d>
 80026c8:	4604      	mov	r4, r0
 80026ca:	460d      	mov	r5, r1
 80026cc:	ed97 7a00 	vldr	s14, [r7]
 80026d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80026d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026d8:	ee17 0a90 	vmov	r0, s15
 80026dc:	f7fd ff54 	bl	8000588 <__aeabi_f2d>
 80026e0:	a335      	add	r3, pc, #212	; (adr r3, 80027b8 <ControlHeaterFan+0x108>)
 80026e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e6:	f7fd fdf1 	bl	80002cc <__adddf3>
 80026ea:	4602      	mov	r2, r0
 80026ec:	460b      	mov	r3, r1
 80026ee:	4620      	mov	r0, r4
 80026f0:	4629      	mov	r1, r5
 80026f2:	f7fe fa13 	bl	8000b1c <__aeabi_dcmplt>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d006      	beq.n	800270a <ControlHeaterFan+0x5a>
        heaterOn = 1; // Turn heater on
 80026fc:	4b31      	ldr	r3, [pc, #196]	; (80027c4 <ControlHeaterFan+0x114>)
 80026fe:	2201      	movs	r2, #1
 8002700:	701a      	strb	r2, [r3, #0]
        fanOn = 0;    // Ensure fan is off
 8002702:	4b31      	ldr	r3, [pc, #196]	; (80027c8 <ControlHeaterFan+0x118>)
 8002704:	2200      	movs	r2, #0
 8002706:	701a      	strb	r2, [r3, #0]
 8002708:	e02b      	b.n	8002762 <ControlHeaterFan+0xb2>
    } else if (currentTemperature > setpoint + hysteresis) {
 800270a:	ed97 7a00 	vldr	s14, [r7]
 800270e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002712:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002716:	ed97 7a01 	vldr	s14, [r7, #4]
 800271a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800271e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002722:	dd06      	ble.n	8002732 <ControlHeaterFan+0x82>
        heaterOn = 0; // Ensure heater is off
 8002724:	4b27      	ldr	r3, [pc, #156]	; (80027c4 <ControlHeaterFan+0x114>)
 8002726:	2200      	movs	r2, #0
 8002728:	701a      	strb	r2, [r3, #0]
        fanOn = 1;    // Turn fan on
 800272a:	4b27      	ldr	r3, [pc, #156]	; (80027c8 <ControlHeaterFan+0x118>)
 800272c:	2201      	movs	r2, #1
 800272e:	701a      	strb	r2, [r3, #0]
 8002730:	e017      	b.n	8002762 <ControlHeaterFan+0xb2>
    } else if(currentTemperature < setpoint - hysteresis) {
 8002732:	ed97 7a00 	vldr	s14, [r7]
 8002736:	edd7 7a03 	vldr	s15, [r7, #12]
 800273a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800273e:	ed97 7a01 	vldr	s14, [r7, #4]
 8002742:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800274a:	d50a      	bpl.n	8002762 <ControlHeaterFan+0xb2>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // Fan control (INA)
 800274c:	2200      	movs	r2, #0
 800274e:	2110      	movs	r1, #16
 8002750:	481e      	ldr	r0, [pc, #120]	; (80027cc <ControlHeaterFan+0x11c>)
 8002752:	f001 f937 	bl	80039c4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8002756:	2201      	movs	r2, #1
 8002758:	f44f 7180 	mov.w	r1, #256	; 0x100
 800275c:	481c      	ldr	r0, [pc, #112]	; (80027d0 <ControlHeaterFan+0x120>)
 800275e:	f001 f931 	bl	80039c4 <HAL_GPIO_WritePin>

    }

    // Actuate the heater or fan based on the above logic
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, heaterOn ? GPIO_PIN_SET : GPIO_PIN_RESET); // Heater control
 8002762:	4b18      	ldr	r3, [pc, #96]	; (80027c4 <ControlHeaterFan+0x114>)
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	2b00      	cmp	r3, #0
 8002768:	bf14      	ite	ne
 800276a:	2301      	movne	r3, #1
 800276c:	2300      	moveq	r3, #0
 800276e:	b2db      	uxtb	r3, r3
 8002770:	461a      	mov	r2, r3
 8002772:	2120      	movs	r1, #32
 8002774:	4815      	ldr	r0, [pc, #84]	; (80027cc <ControlHeaterFan+0x11c>)
 8002776:	f001 f925 	bl	80039c4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, fanOn ? GPIO_PIN_SET : GPIO_PIN_RESET); // Fan control (INA)
 800277a:	4b13      	ldr	r3, [pc, #76]	; (80027c8 <ControlHeaterFan+0x118>)
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	2b00      	cmp	r3, #0
 8002780:	bf14      	ite	ne
 8002782:	2301      	movne	r3, #1
 8002784:	2300      	moveq	r3, #0
 8002786:	b2db      	uxtb	r3, r3
 8002788:	461a      	mov	r2, r3
 800278a:	2110      	movs	r1, #16
 800278c:	480f      	ldr	r0, [pc, #60]	; (80027cc <ControlHeaterFan+0x11c>)
 800278e:	f001 f919 	bl	80039c4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, fanOn ? GPIO_PIN_RESET : GPIO_PIN_SET); // Fan control (INB), assuming needed logic
 8002792:	4b0d      	ldr	r3, [pc, #52]	; (80027c8 <ControlHeaterFan+0x118>)
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	2b00      	cmp	r3, #0
 8002798:	bf0c      	ite	eq
 800279a:	2301      	moveq	r3, #1
 800279c:	2300      	movne	r3, #0
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	461a      	mov	r2, r3
 80027a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027a6:	480a      	ldr	r0, [pc, #40]	; (80027d0 <ControlHeaterFan+0x120>)
 80027a8:	f001 f90c 	bl	80039c4 <HAL_GPIO_WritePin>
}
 80027ac:	bf00      	nop
 80027ae:	3710      	adds	r7, #16
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bdb0      	pop	{r4, r5, r7, pc}
 80027b4:	f3af 8000 	nop.w
 80027b8:	eb851eb8 	.word	0xeb851eb8
 80027bc:	3f9eb851 	.word	0x3f9eb851
 80027c0:	3d23d70a 	.word	0x3d23d70a
 80027c4:	2000029c 	.word	0x2000029c
 80027c8:	2000029d 	.word	0x2000029d
 80027cc:	40020000 	.word	0x40020000
 80027d0:	40020800 	.word	0x40020800

080027d4 <HAL_UART_RxCpltCallback>:


char inputBuffer[10]; // Adjust based on expected input size
int inputIndex = 0; // Tracks the position in the input buffer

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80027d4:	b590      	push	{r4, r7, lr}
 80027d6:	b087      	sub	sp, #28
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
    if (huart == &huart3) {
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a2d      	ldr	r2, [pc, #180]	; (8002894 <HAL_UART_RxCpltCallback+0xc0>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d152      	bne.n	800288a <HAL_UART_RxCpltCallback+0xb6>
        // Check if received character is newline (end of message)
        if (inputBuffer[inputIndex] == '\n') {
 80027e4:	4b2c      	ldr	r3, [pc, #176]	; (8002898 <HAL_UART_RxCpltCallback+0xc4>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a2c      	ldr	r2, [pc, #176]	; (800289c <HAL_UART_RxCpltCallback+0xc8>)
 80027ea:	5cd3      	ldrb	r3, [r2, r3]
 80027ec:	2b0a      	cmp	r3, #10
 80027ee:	d13a      	bne.n	8002866 <HAL_UART_RxCpltCallback+0x92>
            // Null-terminate the string
            inputBuffer[inputIndex] = '\0';
 80027f0:	4b29      	ldr	r3, [pc, #164]	; (8002898 <HAL_UART_RxCpltCallback+0xc4>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a29      	ldr	r2, [pc, #164]	; (800289c <HAL_UART_RxCpltCallback+0xc8>)
 80027f6:	2100      	movs	r1, #0
 80027f8:	54d1      	strb	r1, [r2, r3]

            // Attempt to convert to float
            char* endPtr;
            double newTarget = strtod(inputBuffer, &endPtr);
 80027fa:	f107 0308 	add.w	r3, r7, #8
 80027fe:	4619      	mov	r1, r3
 8002800:	4826      	ldr	r0, [pc, #152]	; (800289c <HAL_UART_RxCpltCallback+0xc8>)
 8002802:	f007 fa37 	bl	8009c74 <strtod>
 8002806:	ed87 0b04 	vstr	d0, [r7, #16]

            // Check if conversion succeeded and the value is in the correct format
            if (endPtr != inputBuffer && *endPtr == '\0' && strchr(inputBuffer, '.') && (endPtr - strchr(inputBuffer, '.')) == 2) {
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	4a23      	ldr	r2, [pc, #140]	; (800289c <HAL_UART_RxCpltCallback+0xc8>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d019      	beq.n	8002846 <HAL_UART_RxCpltCallback+0x72>
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d115      	bne.n	8002846 <HAL_UART_RxCpltCallback+0x72>
 800281a:	212e      	movs	r1, #46	; 0x2e
 800281c:	481f      	ldr	r0, [pc, #124]	; (800289c <HAL_UART_RxCpltCallback+0xc8>)
 800281e:	f007 fad7 	bl	8009dd0 <strchr>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d00e      	beq.n	8002846 <HAL_UART_RxCpltCallback+0x72>
 8002828:	68bc      	ldr	r4, [r7, #8]
 800282a:	212e      	movs	r1, #46	; 0x2e
 800282c:	481b      	ldr	r0, [pc, #108]	; (800289c <HAL_UART_RxCpltCallback+0xc8>)
 800282e:	f007 facf 	bl	8009dd0 <strchr>
 8002832:	4603      	mov	r3, r0
 8002834:	1ae3      	subs	r3, r4, r3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d105      	bne.n	8002846 <HAL_UART_RxCpltCallback+0x72>
                // Valid float with one decimal received, update target temperature
                targetTemperature = newTarget;
 800283a:	4919      	ldr	r1, [pc, #100]	; (80028a0 <HAL_UART_RxCpltCallback+0xcc>)
 800283c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002840:	e9c1 2300 	strd	r2, r3, [r1]
 8002844:	e00b      	b.n	800285e <HAL_UART_RxCpltCallback+0x8a>
            } else {
                // Invalid input, prompt for re-entry
                char* errMsg = "Invalid input. Please enter a float value with one decimal:\r\n";
 8002846:	4b17      	ldr	r3, [pc, #92]	; (80028a4 <HAL_UART_RxCpltCallback+0xd0>)
 8002848:	60fb      	str	r3, [r7, #12]
                HAL_UART_Transmit(&huart3, (uint8_t*)errMsg, strlen(errMsg), 100);
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f7fd fd30 	bl	80002b0 <strlen>
 8002850:	4603      	mov	r3, r0
 8002852:	b29a      	uxth	r2, r3
 8002854:	2364      	movs	r3, #100	; 0x64
 8002856:	68f9      	ldr	r1, [r7, #12]
 8002858:	480e      	ldr	r0, [pc, #56]	; (8002894 <HAL_UART_RxCpltCallback+0xc0>)
 800285a:	f004 fa2f 	bl	8006cbc <HAL_UART_Transmit>
            }

            // Reset input buffer for next message
            inputIndex = 0;
 800285e:	4b0e      	ldr	r3, [pc, #56]	; (8002898 <HAL_UART_RxCpltCallback+0xc4>)
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	e008      	b.n	8002878 <HAL_UART_RxCpltCallback+0xa4>
        } else {
            // Add received character to buffer if not full, and increment index
            if (inputIndex < sizeof(inputBuffer) - 1) {
 8002866:	4b0c      	ldr	r3, [pc, #48]	; (8002898 <HAL_UART_RxCpltCallback+0xc4>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2b08      	cmp	r3, #8
 800286c:	d804      	bhi.n	8002878 <HAL_UART_RxCpltCallback+0xa4>
                inputIndex++;
 800286e:	4b0a      	ldr	r3, [pc, #40]	; (8002898 <HAL_UART_RxCpltCallback+0xc4>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	3301      	adds	r3, #1
 8002874:	4a08      	ldr	r2, [pc, #32]	; (8002898 <HAL_UART_RxCpltCallback+0xc4>)
 8002876:	6013      	str	r3, [r2, #0]
            }
        }
        // Prepare to receive the next character
        HAL_UART_Receive_IT(&huart3, (uint8_t*)&inputBuffer[inputIndex], 1);
 8002878:	4b07      	ldr	r3, [pc, #28]	; (8002898 <HAL_UART_RxCpltCallback+0xc4>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a07      	ldr	r2, [pc, #28]	; (800289c <HAL_UART_RxCpltCallback+0xc8>)
 800287e:	4413      	add	r3, r2
 8002880:	2201      	movs	r2, #1
 8002882:	4619      	mov	r1, r3
 8002884:	4803      	ldr	r0, [pc, #12]	; (8002894 <HAL_UART_RxCpltCallback+0xc0>)
 8002886:	f004 fa9c 	bl	8006dc2 <HAL_UART_Receive_IT>
    }
}
 800288a:	bf00      	nop
 800288c:	371c      	adds	r7, #28
 800288e:	46bd      	mov	sp, r7
 8002890:	bd90      	pop	{r4, r7, pc}
 8002892:	bf00      	nop
 8002894:	200003ec 	.word	0x200003ec
 8002898:	20000294 	.word	0x20000294
 800289c:	20000288 	.word	0x20000288
 80028a0:	20000280 	.word	0x20000280
 80028a4:	0800ca24 	.word	0x0800ca24

080028a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028ac:	f000 fcb9 	bl	8003222 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028b0:	f000 f844 	bl	800293c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028b4:	f7ff fcae 	bl	8002214 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80028b8:	f000 fbf2 	bl	80030a0 <MX_USART3_UART_Init>
  MX_SPI4_Init();
 80028bc:	f000 f8b2 	bl	8002a24 <MX_SPI4_Init>
  MX_TIM2_Init();
 80028c0:	f000 fa6c 	bl	8002d9c <MX_TIM2_Init>
  MX_TIM4_Init();
 80028c4:	f000 fab8 	bl	8002e38 <MX_TIM4_Init>
  MX_TIM9_Init();
 80028c8:	f000 fb04 	bl	8002ed4 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  BMP2_Init(&bmp2dev);
 80028cc:	4814      	ldr	r0, [pc, #80]	; (8002920 <main+0x78>)
 80028ce:	f7ff fb71 	bl	8001fb4 <BMP2_Init>
  PID_Init(&pid, 0.5f, 0.01f, 0.5f, 25); //targetTemperature Example: Kp=2.0, Ki=0.01, Kd=0.5, Setpoint=25°C
 80028d2:	eef3 1a09 	vmov.f32	s3, #57	; 0x41c80000  25.0
 80028d6:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 80028da:	eddf 0a12 	vldr	s1, [pc, #72]	; 8002924 <main+0x7c>
 80028de:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80028e2:	4811      	ldr	r0, [pc, #68]	; (8002928 <main+0x80>)
 80028e4:	f7ff fe2c 	bl	8002540 <PID_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 80028e8:	4810      	ldr	r0, [pc, #64]	; (800292c <main+0x84>)
 80028ea:	f003 f957 	bl	8005b9c <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart3, tx_buffer, tx_msg_len);
 80028ee:	2303      	movs	r3, #3
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	461a      	mov	r2, r3
 80028f4:	490e      	ldr	r1, [pc, #56]	; (8002930 <main+0x88>)
 80028f6:	480f      	ldr	r0, [pc, #60]	; (8002934 <main+0x8c>)
 80028f8:	f004 fa63 	bl	8006dc2 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ControlHeaterFan(temp, pid.setpoint);
 80028fc:	4b0e      	ldr	r3, [pc, #56]	; (8002938 <main+0x90>)
 80028fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002902:	4610      	mov	r0, r2
 8002904:	4619      	mov	r1, r3
 8002906:	f7fe f98f 	bl	8000c28 <__aeabi_d2f>
 800290a:	4602      	mov	r2, r0
 800290c:	4b06      	ldr	r3, [pc, #24]	; (8002928 <main+0x80>)
 800290e:	edd3 7a05 	vldr	s15, [r3, #20]
 8002912:	eef0 0a67 	vmov.f32	s1, s15
 8002916:	ee00 2a10 	vmov	s0, r2
 800291a:	f7ff fec9 	bl	80026b0 <ControlHeaterFan>
 800291e:	e7ed      	b.n	80028fc <main+0x54>
 8002920:	20000018 	.word	0x20000018
 8002924:	3c23d70a 	.word	0x3c23d70a
 8002928:	20000268 	.word	0x20000268
 800292c:	20000308 	.word	0x20000308
 8002930:	20000260 	.word	0x20000260
 8002934:	200003ec 	.word	0x200003ec
 8002938:	20000248 	.word	0x20000248

0800293c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b094      	sub	sp, #80	; 0x50
 8002940:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002942:	f107 0320 	add.w	r3, r7, #32
 8002946:	2230      	movs	r2, #48	; 0x30
 8002948:	2100      	movs	r1, #0
 800294a:	4618      	mov	r0, r3
 800294c:	f007 fa5f 	bl	8009e0e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002950:	f107 030c 	add.w	r3, r7, #12
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	605a      	str	r2, [r3, #4]
 800295a:	609a      	str	r2, [r3, #8]
 800295c:	60da      	str	r2, [r3, #12]
 800295e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002960:	f001 f84a 	bl	80039f8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002964:	4b2a      	ldr	r3, [pc, #168]	; (8002a10 <SystemClock_Config+0xd4>)
 8002966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002968:	4a29      	ldr	r2, [pc, #164]	; (8002a10 <SystemClock_Config+0xd4>)
 800296a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800296e:	6413      	str	r3, [r2, #64]	; 0x40
 8002970:	4b27      	ldr	r3, [pc, #156]	; (8002a10 <SystemClock_Config+0xd4>)
 8002972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002978:	60bb      	str	r3, [r7, #8]
 800297a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800297c:	4b25      	ldr	r3, [pc, #148]	; (8002a14 <SystemClock_Config+0xd8>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a24      	ldr	r2, [pc, #144]	; (8002a14 <SystemClock_Config+0xd8>)
 8002982:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002986:	6013      	str	r3, [r2, #0]
 8002988:	4b22      	ldr	r3, [pc, #136]	; (8002a14 <SystemClock_Config+0xd8>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002990:	607b      	str	r3, [r7, #4]
 8002992:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002994:	2301      	movs	r3, #1
 8002996:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002998:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800299c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800299e:	2302      	movs	r3, #2
 80029a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80029a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80029a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80029a8:	2304      	movs	r3, #4
 80029aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80029ac:	23d8      	movs	r3, #216	; 0xd8
 80029ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80029b0:	2302      	movs	r3, #2
 80029b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80029b4:	2303      	movs	r3, #3
 80029b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029b8:	f107 0320 	add.w	r3, r7, #32
 80029bc:	4618      	mov	r0, r3
 80029be:	f001 f87b 	bl	8003ab8 <HAL_RCC_OscConfig>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80029c8:	f000 f826 	bl	8002a18 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80029cc:	f001 f824 	bl	8003a18 <HAL_PWREx_EnableOverDrive>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80029d6:	f000 f81f 	bl	8002a18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029da:	230f      	movs	r3, #15
 80029dc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029de:	2302      	movs	r3, #2
 80029e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029e2:	2300      	movs	r3, #0
 80029e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80029e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80029ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80029ec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80029f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80029f2:	f107 030c 	add.w	r3, r7, #12
 80029f6:	2107      	movs	r1, #7
 80029f8:	4618      	mov	r0, r3
 80029fa:	f001 fb01 	bl	8004000 <HAL_RCC_ClockConfig>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8002a04:	f000 f808 	bl	8002a18 <Error_Handler>
  }
}
 8002a08:	bf00      	nop
 8002a0a:	3750      	adds	r7, #80	; 0x50
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	40023800 	.word	0x40023800
 8002a14:	40007000 	.word	0x40007000

08002a18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a1c:	b672      	cpsid	i
}
 8002a1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a20:	e7fe      	b.n	8002a20 <Error_Handler+0x8>
	...

08002a24 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8002a28:	4b1b      	ldr	r3, [pc, #108]	; (8002a98 <MX_SPI4_Init+0x74>)
 8002a2a:	4a1c      	ldr	r2, [pc, #112]	; (8002a9c <MX_SPI4_Init+0x78>)
 8002a2c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002a2e:	4b1a      	ldr	r3, [pc, #104]	; (8002a98 <MX_SPI4_Init+0x74>)
 8002a30:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a34:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002a36:	4b18      	ldr	r3, [pc, #96]	; (8002a98 <MX_SPI4_Init+0x74>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a3c:	4b16      	ldr	r3, [pc, #88]	; (8002a98 <MX_SPI4_Init+0x74>)
 8002a3e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002a42:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002a44:	4b14      	ldr	r3, [pc, #80]	; (8002a98 <MX_SPI4_Init+0x74>)
 8002a46:	2202      	movs	r2, #2
 8002a48:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002a4a:	4b13      	ldr	r3, [pc, #76]	; (8002a98 <MX_SPI4_Init+0x74>)
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8002a50:	4b11      	ldr	r3, [pc, #68]	; (8002a98 <MX_SPI4_Init+0x74>)
 8002a52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a56:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002a58:	4b0f      	ldr	r3, [pc, #60]	; (8002a98 <MX_SPI4_Init+0x74>)
 8002a5a:	2218      	movs	r2, #24
 8002a5c:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a5e:	4b0e      	ldr	r3, [pc, #56]	; (8002a98 <MX_SPI4_Init+0x74>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a64:	4b0c      	ldr	r3, [pc, #48]	; (8002a98 <MX_SPI4_Init+0x74>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a6a:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <MX_SPI4_Init+0x74>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8002a70:	4b09      	ldr	r3, [pc, #36]	; (8002a98 <MX_SPI4_Init+0x74>)
 8002a72:	2207      	movs	r2, #7
 8002a74:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002a76:	4b08      	ldr	r3, [pc, #32]	; (8002a98 <MX_SPI4_Init+0x74>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002a7c:	4b06      	ldr	r3, [pc, #24]	; (8002a98 <MX_SPI4_Init+0x74>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002a82:	4805      	ldr	r0, [pc, #20]	; (8002a98 <MX_SPI4_Init+0x74>)
 8002a84:	f002 f8d2 	bl	8004c2c <HAL_SPI_Init>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8002a8e:	f7ff ffc3 	bl	8002a18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002a92:	bf00      	nop
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	200002a0 	.word	0x200002a0
 8002a9c:	40013400 	.word	0x40013400

08002aa0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b08a      	sub	sp, #40	; 0x28
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa8:	f107 0314 	add.w	r3, r7, #20
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	605a      	str	r2, [r3, #4]
 8002ab2:	609a      	str	r2, [r3, #8]
 8002ab4:	60da      	str	r2, [r3, #12]
 8002ab6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a17      	ldr	r2, [pc, #92]	; (8002b1c <HAL_SPI_MspInit+0x7c>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d127      	bne.n	8002b12 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002ac2:	4b17      	ldr	r3, [pc, #92]	; (8002b20 <HAL_SPI_MspInit+0x80>)
 8002ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac6:	4a16      	ldr	r2, [pc, #88]	; (8002b20 <HAL_SPI_MspInit+0x80>)
 8002ac8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002acc:	6453      	str	r3, [r2, #68]	; 0x44
 8002ace:	4b14      	ldr	r3, [pc, #80]	; (8002b20 <HAL_SPI_MspInit+0x80>)
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ad6:	613b      	str	r3, [r7, #16]
 8002ad8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ada:	4b11      	ldr	r3, [pc, #68]	; (8002b20 <HAL_SPI_MspInit+0x80>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ade:	4a10      	ldr	r2, [pc, #64]	; (8002b20 <HAL_SPI_MspInit+0x80>)
 8002ae0:	f043 0310 	orr.w	r3, r3, #16
 8002ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ae6:	4b0e      	ldr	r3, [pc, #56]	; (8002b20 <HAL_SPI_MspInit+0x80>)
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aea:	f003 0310 	and.w	r3, r3, #16
 8002aee:	60fb      	str	r3, [r7, #12]
 8002af0:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = BMP2_SCK_Pin|BMP2_SDO_Pin|BMP2_SDA_Pin;
 8002af2:	2364      	movs	r3, #100	; 0x64
 8002af4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af6:	2302      	movs	r3, #2
 8002af8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afa:	2300      	movs	r3, #0
 8002afc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002afe:	2303      	movs	r3, #3
 8002b00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002b02:	2305      	movs	r3, #5
 8002b04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b06:	f107 0314 	add.w	r3, r7, #20
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	4805      	ldr	r0, [pc, #20]	; (8002b24 <HAL_SPI_MspInit+0x84>)
 8002b0e:	f000 fdad 	bl	800366c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8002b12:	bf00      	nop
 8002b14:	3728      	adds	r7, #40	; 0x28
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	40013400 	.word	0x40013400
 8002b20:	40023800 	.word	0x40023800
 8002b24:	40021000 	.word	0x40021000

08002b28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002b2e:	4b0f      	ldr	r3, [pc, #60]	; (8002b6c <HAL_MspInit+0x44>)
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	4a0e      	ldr	r2, [pc, #56]	; (8002b6c <HAL_MspInit+0x44>)
 8002b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b38:	6413      	str	r3, [r2, #64]	; 0x40
 8002b3a:	4b0c      	ldr	r3, [pc, #48]	; (8002b6c <HAL_MspInit+0x44>)
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b42:	607b      	str	r3, [r7, #4]
 8002b44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b46:	4b09      	ldr	r3, [pc, #36]	; (8002b6c <HAL_MspInit+0x44>)
 8002b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4a:	4a08      	ldr	r2, [pc, #32]	; (8002b6c <HAL_MspInit+0x44>)
 8002b4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b50:	6453      	str	r3, [r2, #68]	; 0x44
 8002b52:	4b06      	ldr	r3, [pc, #24]	; (8002b6c <HAL_MspInit+0x44>)
 8002b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b5a:	603b      	str	r3, [r7, #0]
 8002b5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b5e:	bf00      	nop
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	40023800 	.word	0x40023800

08002b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b74:	e7fe      	b.n	8002b74 <NMI_Handler+0x4>

08002b76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b76:	b480      	push	{r7}
 8002b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b7a:	e7fe      	b.n	8002b7a <HardFault_Handler+0x4>

08002b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b80:	e7fe      	b.n	8002b80 <MemManage_Handler+0x4>

08002b82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b82:	b480      	push	{r7}
 8002b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b86:	e7fe      	b.n	8002b86 <BusFault_Handler+0x4>

08002b88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b8c:	e7fe      	b.n	8002b8c <UsageFault_Handler+0x4>

08002b8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b92:	bf00      	nop
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ba0:	bf00      	nop
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002baa:	b480      	push	{r7}
 8002bac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bae:	bf00      	nop
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bbc:	f000 fb6e 	bl	800329c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bc0:	bf00      	nop
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002bc8:	4802      	ldr	r0, [pc, #8]	; (8002bd4 <TIM2_IRQHandler+0x10>)
 8002bca:	f003 f8c0 	bl	8005d4e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002bce:	bf00      	nop
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	20000308 	.word	0x20000308

08002bd8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002bdc:	4802      	ldr	r0, [pc, #8]	; (8002be8 <USART3_IRQHandler+0x10>)
 8002bde:	f004 f935 	bl	8006e4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002be2:	bf00      	nop
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	200003ec 	.word	0x200003ec

08002bec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  return 1;
 8002bf0:	2301      	movs	r3, #1
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <_kill>:

int _kill(int pid, int sig)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002c06:	f007 f90f 	bl	8009e28 <__errno>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2216      	movs	r2, #22
 8002c0e:	601a      	str	r2, [r3, #0]
  return -1;
 8002c10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3708      	adds	r7, #8
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <_exit>:

void _exit (int status)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002c24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f7ff ffe7 	bl	8002bfc <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c2e:	e7fe      	b.n	8002c2e <_exit+0x12>

08002c30 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b086      	sub	sp, #24
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	617b      	str	r3, [r7, #20]
 8002c40:	e00a      	b.n	8002c58 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c42:	f3af 8000 	nop.w
 8002c46:	4601      	mov	r1, r0
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	1c5a      	adds	r2, r3, #1
 8002c4c:	60ba      	str	r2, [r7, #8]
 8002c4e:	b2ca      	uxtb	r2, r1
 8002c50:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	3301      	adds	r3, #1
 8002c56:	617b      	str	r3, [r7, #20]
 8002c58:	697a      	ldr	r2, [r7, #20]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	dbf0      	blt.n	8002c42 <_read+0x12>
  }

  return len;
 8002c60:	687b      	ldr	r3, [r7, #4]
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3718      	adds	r7, #24
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b086      	sub	sp, #24
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	60f8      	str	r0, [r7, #12]
 8002c72:	60b9      	str	r1, [r7, #8]
 8002c74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c76:	2300      	movs	r3, #0
 8002c78:	617b      	str	r3, [r7, #20]
 8002c7a:	e009      	b.n	8002c90 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	1c5a      	adds	r2, r3, #1
 8002c80:	60ba      	str	r2, [r7, #8]
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	617b      	str	r3, [r7, #20]
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	dbf1      	blt.n	8002c7c <_write+0x12>
  }
  return len;
 8002c98:	687b      	ldr	r3, [r7, #4]
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3718      	adds	r7, #24
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <_close>:

int _close(int file)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b083      	sub	sp, #12
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002caa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b083      	sub	sp, #12
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
 8002cc2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cca:	605a      	str	r2, [r3, #4]
  return 0;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr

08002cda <_isatty>:

int _isatty(int file)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	b083      	sub	sp, #12
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ce2:	2301      	movs	r3, #1
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3714      	adds	r7, #20
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
	...

08002d0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d14:	4a14      	ldr	r2, [pc, #80]	; (8002d68 <_sbrk+0x5c>)
 8002d16:	4b15      	ldr	r3, [pc, #84]	; (8002d6c <_sbrk+0x60>)
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d20:	4b13      	ldr	r3, [pc, #76]	; (8002d70 <_sbrk+0x64>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d102      	bne.n	8002d2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d28:	4b11      	ldr	r3, [pc, #68]	; (8002d70 <_sbrk+0x64>)
 8002d2a:	4a12      	ldr	r2, [pc, #72]	; (8002d74 <_sbrk+0x68>)
 8002d2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d2e:	4b10      	ldr	r3, [pc, #64]	; (8002d70 <_sbrk+0x64>)
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4413      	add	r3, r2
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d207      	bcs.n	8002d4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d3c:	f007 f874 	bl	8009e28 <__errno>
 8002d40:	4603      	mov	r3, r0
 8002d42:	220c      	movs	r2, #12
 8002d44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d4a:	e009      	b.n	8002d60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d4c:	4b08      	ldr	r3, [pc, #32]	; (8002d70 <_sbrk+0x64>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d52:	4b07      	ldr	r3, [pc, #28]	; (8002d70 <_sbrk+0x64>)
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4413      	add	r3, r2
 8002d5a:	4a05      	ldr	r2, [pc, #20]	; (8002d70 <_sbrk+0x64>)
 8002d5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3718      	adds	r7, #24
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	20050000 	.word	0x20050000
 8002d6c:	00000400 	.word	0x00000400
 8002d70:	20000304 	.word	0x20000304
 8002d74:	200005c8 	.word	0x200005c8

08002d78 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d7c:	4b06      	ldr	r3, [pc, #24]	; (8002d98 <SystemInit+0x20>)
 8002d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d82:	4a05      	ldr	r2, [pc, #20]	; (8002d98 <SystemInit+0x20>)
 8002d84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d8c:	bf00      	nop
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	e000ed00 	.word	0xe000ed00

08002d9c <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim9;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b088      	sub	sp, #32
 8002da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002da2:	f107 0310 	add.w	r3, r7, #16
 8002da6:	2200      	movs	r2, #0
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	605a      	str	r2, [r3, #4]
 8002dac:	609a      	str	r2, [r3, #8]
 8002dae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002db0:	1d3b      	adds	r3, r7, #4
 8002db2:	2200      	movs	r2, #0
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	605a      	str	r2, [r3, #4]
 8002db8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002dba:	4b1e      	ldr	r3, [pc, #120]	; (8002e34 <MX_TIM2_Init+0x98>)
 8002dbc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002dc0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1079;
 8002dc2:	4b1c      	ldr	r3, [pc, #112]	; (8002e34 <MX_TIM2_Init+0x98>)
 8002dc4:	f240 4237 	movw	r2, #1079	; 0x437
 8002dc8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dca:	4b1a      	ldr	r3, [pc, #104]	; (8002e34 <MX_TIM2_Init+0x98>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 24999;
 8002dd0:	4b18      	ldr	r3, [pc, #96]	; (8002e34 <MX_TIM2_Init+0x98>)
 8002dd2:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8002dd6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dd8:	4b16      	ldr	r3, [pc, #88]	; (8002e34 <MX_TIM2_Init+0x98>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dde:	4b15      	ldr	r3, [pc, #84]	; (8002e34 <MX_TIM2_Init+0x98>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002de4:	4813      	ldr	r0, [pc, #76]	; (8002e34 <MX_TIM2_Init+0x98>)
 8002de6:	f002 fe81 	bl	8005aec <HAL_TIM_Base_Init>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8002df0:	f7ff fe12 	bl	8002a18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002df4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002df8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002dfa:	f107 0310 	add.w	r3, r7, #16
 8002dfe:	4619      	mov	r1, r3
 8002e00:	480c      	ldr	r0, [pc, #48]	; (8002e34 <MX_TIM2_Init+0x98>)
 8002e02:	f003 f9d7 	bl	80061b4 <HAL_TIM_ConfigClockSource>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d001      	beq.n	8002e10 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8002e0c:	f7ff fe04 	bl	8002a18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e10:	2300      	movs	r3, #0
 8002e12:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e14:	2300      	movs	r3, #0
 8002e16:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e18:	1d3b      	adds	r3, r7, #4
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	4805      	ldr	r0, [pc, #20]	; (8002e34 <MX_TIM2_Init+0x98>)
 8002e1e:	f003 fe53 	bl	8006ac8 <HAL_TIMEx_MasterConfigSynchronization>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002e28:	f7ff fdf6 	bl	8002a18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002e2c:	bf00      	nop
 8002e2e:	3720      	adds	r7, #32
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	20000308 	.word	0x20000308

08002e38 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b088      	sub	sp, #32
 8002e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e3e:	f107 0310 	add.w	r3, r7, #16
 8002e42:	2200      	movs	r2, #0
 8002e44:	601a      	str	r2, [r3, #0]
 8002e46:	605a      	str	r2, [r3, #4]
 8002e48:	609a      	str	r2, [r3, #8]
 8002e4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e4c:	1d3b      	adds	r3, r7, #4
 8002e4e:	2200      	movs	r2, #0
 8002e50:	601a      	str	r2, [r3, #0]
 8002e52:	605a      	str	r2, [r3, #4]
 8002e54:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002e56:	4b1d      	ldr	r3, [pc, #116]	; (8002ecc <MX_TIM4_Init+0x94>)
 8002e58:	4a1d      	ldr	r2, [pc, #116]	; (8002ed0 <MX_TIM4_Init+0x98>)
 8002e5a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 107;
 8002e5c:	4b1b      	ldr	r3, [pc, #108]	; (8002ecc <MX_TIM4_Init+0x94>)
 8002e5e:	226b      	movs	r2, #107	; 0x6b
 8002e60:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e62:	4b1a      	ldr	r3, [pc, #104]	; (8002ecc <MX_TIM4_Init+0x94>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8002e68:	4b18      	ldr	r3, [pc, #96]	; (8002ecc <MX_TIM4_Init+0x94>)
 8002e6a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002e6e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e70:	4b16      	ldr	r3, [pc, #88]	; (8002ecc <MX_TIM4_Init+0x94>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e76:	4b15      	ldr	r3, [pc, #84]	; (8002ecc <MX_TIM4_Init+0x94>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002e7c:	4813      	ldr	r0, [pc, #76]	; (8002ecc <MX_TIM4_Init+0x94>)
 8002e7e:	f002 fe35 	bl	8005aec <HAL_TIM_Base_Init>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d001      	beq.n	8002e8c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002e88:	f7ff fdc6 	bl	8002a18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e90:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002e92:	f107 0310 	add.w	r3, r7, #16
 8002e96:	4619      	mov	r1, r3
 8002e98:	480c      	ldr	r0, [pc, #48]	; (8002ecc <MX_TIM4_Init+0x94>)
 8002e9a:	f003 f98b 	bl	80061b4 <HAL_TIM_ConfigClockSource>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d001      	beq.n	8002ea8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002ea4:	f7ff fdb8 	bl	8002a18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002eac:	2300      	movs	r3, #0
 8002eae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002eb0:	1d3b      	adds	r3, r7, #4
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	4805      	ldr	r0, [pc, #20]	; (8002ecc <MX_TIM4_Init+0x94>)
 8002eb6:	f003 fe07 	bl	8006ac8 <HAL_TIMEx_MasterConfigSynchronization>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002ec0:	f7ff fdaa 	bl	8002a18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002ec4:	bf00      	nop
 8002ec6:	3720      	adds	r7, #32
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	20000354 	.word	0x20000354
 8002ed0:	40000800 	.word	0x40000800

08002ed4 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b08c      	sub	sp, #48	; 0x30
 8002ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002eda:	f107 0320 	add.w	r3, r7, #32
 8002ede:	2200      	movs	r2, #0
 8002ee0:	601a      	str	r2, [r3, #0]
 8002ee2:	605a      	str	r2, [r3, #4]
 8002ee4:	609a      	str	r2, [r3, #8]
 8002ee6:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ee8:	1d3b      	adds	r3, r7, #4
 8002eea:	2200      	movs	r2, #0
 8002eec:	601a      	str	r2, [r3, #0]
 8002eee:	605a      	str	r2, [r3, #4]
 8002ef0:	609a      	str	r2, [r3, #8]
 8002ef2:	60da      	str	r2, [r3, #12]
 8002ef4:	611a      	str	r2, [r3, #16]
 8002ef6:	615a      	str	r2, [r3, #20]
 8002ef8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002efa:	4b25      	ldr	r3, [pc, #148]	; (8002f90 <MX_TIM9_Init+0xbc>)
 8002efc:	4a25      	ldr	r2, [pc, #148]	; (8002f94 <MX_TIM9_Init+0xc0>)
 8002efe:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 107;
 8002f00:	4b23      	ldr	r3, [pc, #140]	; (8002f90 <MX_TIM9_Init+0xbc>)
 8002f02:	226b      	movs	r2, #107	; 0x6b
 8002f04:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f06:	4b22      	ldr	r3, [pc, #136]	; (8002f90 <MX_TIM9_Init+0xbc>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 99;
 8002f0c:	4b20      	ldr	r3, [pc, #128]	; (8002f90 <MX_TIM9_Init+0xbc>)
 8002f0e:	2263      	movs	r2, #99	; 0x63
 8002f10:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f12:	4b1f      	ldr	r3, [pc, #124]	; (8002f90 <MX_TIM9_Init+0xbc>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f18:	4b1d      	ldr	r3, [pc, #116]	; (8002f90 <MX_TIM9_Init+0xbc>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002f1e:	481c      	ldr	r0, [pc, #112]	; (8002f90 <MX_TIM9_Init+0xbc>)
 8002f20:	f002 fde4 	bl	8005aec <HAL_TIM_Base_Init>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <MX_TIM9_Init+0x5a>
  {
    Error_Handler();
 8002f2a:	f7ff fd75 	bl	8002a18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f32:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002f34:	f107 0320 	add.w	r3, r7, #32
 8002f38:	4619      	mov	r1, r3
 8002f3a:	4815      	ldr	r0, [pc, #84]	; (8002f90 <MX_TIM9_Init+0xbc>)
 8002f3c:	f003 f93a 	bl	80061b4 <HAL_TIM_ConfigClockSource>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <MX_TIM9_Init+0x76>
  {
    Error_Handler();
 8002f46:	f7ff fd67 	bl	8002a18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8002f4a:	4811      	ldr	r0, [pc, #68]	; (8002f90 <MX_TIM9_Init+0xbc>)
 8002f4c:	f002 fe9e 	bl	8005c8c <HAL_TIM_PWM_Init>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <MX_TIM9_Init+0x86>
  {
    Error_Handler();
 8002f56:	f7ff fd5f 	bl	8002a18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f5a:	2360      	movs	r3, #96	; 0x60
 8002f5c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f62:	2300      	movs	r3, #0
 8002f64:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f66:	2300      	movs	r3, #0
 8002f68:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002f6a:	1d3b      	adds	r3, r7, #4
 8002f6c:	2204      	movs	r2, #4
 8002f6e:	4619      	mov	r1, r3
 8002f70:	4807      	ldr	r0, [pc, #28]	; (8002f90 <MX_TIM9_Init+0xbc>)
 8002f72:	f003 f80b 	bl	8005f8c <HAL_TIM_PWM_ConfigChannel>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d001      	beq.n	8002f80 <MX_TIM9_Init+0xac>
  {
    Error_Handler();
 8002f7c:	f7ff fd4c 	bl	8002a18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8002f80:	4803      	ldr	r0, [pc, #12]	; (8002f90 <MX_TIM9_Init+0xbc>)
 8002f82:	f000 f855 	bl	8003030 <HAL_TIM_MspPostInit>

}
 8002f86:	bf00      	nop
 8002f88:	3730      	adds	r7, #48	; 0x30
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	200003a0 	.word	0x200003a0
 8002f94:	40014000 	.word	0x40014000

08002f98 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fa8:	d114      	bne.n	8002fd4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002faa:	4b1e      	ldr	r3, [pc, #120]	; (8003024 <HAL_TIM_Base_MspInit+0x8c>)
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	4a1d      	ldr	r2, [pc, #116]	; (8003024 <HAL_TIM_Base_MspInit+0x8c>)
 8002fb0:	f043 0301 	orr.w	r3, r3, #1
 8002fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8002fb6:	4b1b      	ldr	r3, [pc, #108]	; (8003024 <HAL_TIM_Base_MspInit+0x8c>)
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	617b      	str	r3, [r7, #20]
 8002fc0:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	2100      	movs	r1, #0
 8002fc6:	201c      	movs	r0, #28
 8002fc8:	f000 fa87 	bl	80034da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002fcc:	201c      	movs	r0, #28
 8002fce:	f000 faa0 	bl	8003512 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8002fd2:	e022      	b.n	800301a <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM4)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a13      	ldr	r2, [pc, #76]	; (8003028 <HAL_TIM_Base_MspInit+0x90>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d10c      	bne.n	8002ff8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002fde:	4b11      	ldr	r3, [pc, #68]	; (8003024 <HAL_TIM_Base_MspInit+0x8c>)
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	4a10      	ldr	r2, [pc, #64]	; (8003024 <HAL_TIM_Base_MspInit+0x8c>)
 8002fe4:	f043 0304 	orr.w	r3, r3, #4
 8002fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8002fea:	4b0e      	ldr	r3, [pc, #56]	; (8003024 <HAL_TIM_Base_MspInit+0x8c>)
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	f003 0304 	and.w	r3, r3, #4
 8002ff2:	613b      	str	r3, [r7, #16]
 8002ff4:	693b      	ldr	r3, [r7, #16]
}
 8002ff6:	e010      	b.n	800301a <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM9)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a0b      	ldr	r2, [pc, #44]	; (800302c <HAL_TIM_Base_MspInit+0x94>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d10b      	bne.n	800301a <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003002:	4b08      	ldr	r3, [pc, #32]	; (8003024 <HAL_TIM_Base_MspInit+0x8c>)
 8003004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003006:	4a07      	ldr	r2, [pc, #28]	; (8003024 <HAL_TIM_Base_MspInit+0x8c>)
 8003008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800300c:	6453      	str	r3, [r2, #68]	; 0x44
 800300e:	4b05      	ldr	r3, [pc, #20]	; (8003024 <HAL_TIM_Base_MspInit+0x8c>)
 8003010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003012:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	68fb      	ldr	r3, [r7, #12]
}
 800301a:	bf00      	nop
 800301c:	3718      	adds	r7, #24
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	40023800 	.word	0x40023800
 8003028:	40000800 	.word	0x40000800
 800302c:	40014000 	.word	0x40014000

08003030 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b088      	sub	sp, #32
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003038:	f107 030c 	add.w	r3, r7, #12
 800303c:	2200      	movs	r2, #0
 800303e:	601a      	str	r2, [r3, #0]
 8003040:	605a      	str	r2, [r3, #4]
 8003042:	609a      	str	r2, [r3, #8]
 8003044:	60da      	str	r2, [r3, #12]
 8003046:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM9)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a11      	ldr	r2, [pc, #68]	; (8003094 <HAL_TIM_MspPostInit+0x64>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d11b      	bne.n	800308a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003052:	4b11      	ldr	r3, [pc, #68]	; (8003098 <HAL_TIM_MspPostInit+0x68>)
 8003054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003056:	4a10      	ldr	r2, [pc, #64]	; (8003098 <HAL_TIM_MspPostInit+0x68>)
 8003058:	f043 0301 	orr.w	r3, r3, #1
 800305c:	6313      	str	r3, [r2, #48]	; 0x30
 800305e:	4b0e      	ldr	r3, [pc, #56]	; (8003098 <HAL_TIM_MspPostInit+0x68>)
 8003060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	60bb      	str	r3, [r7, #8]
 8003068:	68bb      	ldr	r3, [r7, #8]
    /**TIM9 GPIO Configuration
    PA3     ------> TIM9_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800306a:	2308      	movs	r3, #8
 800306c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800306e:	2302      	movs	r3, #2
 8003070:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003072:	2300      	movs	r3, #0
 8003074:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003076:	2300      	movs	r3, #0
 8003078:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800307a:	2303      	movs	r3, #3
 800307c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800307e:	f107 030c 	add.w	r3, r7, #12
 8003082:	4619      	mov	r1, r3
 8003084:	4805      	ldr	r0, [pc, #20]	; (800309c <HAL_TIM_MspPostInit+0x6c>)
 8003086:	f000 faf1 	bl	800366c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 800308a:	bf00      	nop
 800308c:	3720      	adds	r7, #32
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	40014000 	.word	0x40014000
 8003098:	40023800 	.word	0x40023800
 800309c:	40020000 	.word	0x40020000

080030a0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80030a4:	4b14      	ldr	r3, [pc, #80]	; (80030f8 <MX_USART3_UART_Init+0x58>)
 80030a6:	4a15      	ldr	r2, [pc, #84]	; (80030fc <MX_USART3_UART_Init+0x5c>)
 80030a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80030aa:	4b13      	ldr	r3, [pc, #76]	; (80030f8 <MX_USART3_UART_Init+0x58>)
 80030ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80030b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80030b2:	4b11      	ldr	r3, [pc, #68]	; (80030f8 <MX_USART3_UART_Init+0x58>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80030b8:	4b0f      	ldr	r3, [pc, #60]	; (80030f8 <MX_USART3_UART_Init+0x58>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80030be:	4b0e      	ldr	r3, [pc, #56]	; (80030f8 <MX_USART3_UART_Init+0x58>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80030c4:	4b0c      	ldr	r3, [pc, #48]	; (80030f8 <MX_USART3_UART_Init+0x58>)
 80030c6:	220c      	movs	r2, #12
 80030c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030ca:	4b0b      	ldr	r3, [pc, #44]	; (80030f8 <MX_USART3_UART_Init+0x58>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80030d0:	4b09      	ldr	r3, [pc, #36]	; (80030f8 <MX_USART3_UART_Init+0x58>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80030d6:	4b08      	ldr	r3, [pc, #32]	; (80030f8 <MX_USART3_UART_Init+0x58>)
 80030d8:	2200      	movs	r2, #0
 80030da:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80030dc:	4b06      	ldr	r3, [pc, #24]	; (80030f8 <MX_USART3_UART_Init+0x58>)
 80030de:	2200      	movs	r2, #0
 80030e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80030e2:	4805      	ldr	r0, [pc, #20]	; (80030f8 <MX_USART3_UART_Init+0x58>)
 80030e4:	f003 fd9c 	bl	8006c20 <HAL_UART_Init>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80030ee:	f7ff fc93 	bl	8002a18 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80030f2:	bf00      	nop
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	200003ec 	.word	0x200003ec
 80030fc:	40004800 	.word	0x40004800

08003100 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b0aa      	sub	sp, #168	; 0xa8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003108:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800310c:	2200      	movs	r2, #0
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	605a      	str	r2, [r3, #4]
 8003112:	609a      	str	r2, [r3, #8]
 8003114:	60da      	str	r2, [r3, #12]
 8003116:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003118:	f107 0310 	add.w	r3, r7, #16
 800311c:	2284      	movs	r2, #132	; 0x84
 800311e:	2100      	movs	r1, #0
 8003120:	4618      	mov	r0, r3
 8003122:	f006 fe74 	bl	8009e0e <memset>
  if(uartHandle->Instance==USART3)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a26      	ldr	r2, [pc, #152]	; (80031c4 <HAL_UART_MspInit+0xc4>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d144      	bne.n	80031ba <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003130:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003134:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003136:	2300      	movs	r3, #0
 8003138:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800313a:	f107 0310 	add.w	r3, r7, #16
 800313e:	4618      	mov	r0, r3
 8003140:	f001 f984 	bl	800444c <HAL_RCCEx_PeriphCLKConfig>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800314a:	f7ff fc65 	bl	8002a18 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800314e:	4b1e      	ldr	r3, [pc, #120]	; (80031c8 <HAL_UART_MspInit+0xc8>)
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	4a1d      	ldr	r2, [pc, #116]	; (80031c8 <HAL_UART_MspInit+0xc8>)
 8003154:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003158:	6413      	str	r3, [r2, #64]	; 0x40
 800315a:	4b1b      	ldr	r3, [pc, #108]	; (80031c8 <HAL_UART_MspInit+0xc8>)
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003162:	60fb      	str	r3, [r7, #12]
 8003164:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003166:	4b18      	ldr	r3, [pc, #96]	; (80031c8 <HAL_UART_MspInit+0xc8>)
 8003168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316a:	4a17      	ldr	r2, [pc, #92]	; (80031c8 <HAL_UART_MspInit+0xc8>)
 800316c:	f043 0308 	orr.w	r3, r3, #8
 8003170:	6313      	str	r3, [r2, #48]	; 0x30
 8003172:	4b15      	ldr	r3, [pc, #84]	; (80031c8 <HAL_UART_MspInit+0xc8>)
 8003174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003176:	f003 0308 	and.w	r3, r3, #8
 800317a:	60bb      	str	r3, [r7, #8]
 800317c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800317e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003182:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003186:	2302      	movs	r3, #2
 8003188:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800318c:	2301      	movs	r3, #1
 800318e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003192:	2303      	movs	r3, #3
 8003194:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003198:	2307      	movs	r3, #7
 800319a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800319e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80031a2:	4619      	mov	r1, r3
 80031a4:	4809      	ldr	r0, [pc, #36]	; (80031cc <HAL_UART_MspInit+0xcc>)
 80031a6:	f000 fa61 	bl	800366c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80031aa:	2200      	movs	r2, #0
 80031ac:	2100      	movs	r1, #0
 80031ae:	2027      	movs	r0, #39	; 0x27
 80031b0:	f000 f993 	bl	80034da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80031b4:	2027      	movs	r0, #39	; 0x27
 80031b6:	f000 f9ac 	bl	8003512 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80031ba:	bf00      	nop
 80031bc:	37a8      	adds	r7, #168	; 0xa8
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	40004800 	.word	0x40004800
 80031c8:	40023800 	.word	0x40023800
 80031cc:	40020c00 	.word	0x40020c00

080031d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80031d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003208 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80031d4:	480d      	ldr	r0, [pc, #52]	; (800320c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80031d6:	490e      	ldr	r1, [pc, #56]	; (8003210 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80031d8:	4a0e      	ldr	r2, [pc, #56]	; (8003214 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80031da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031dc:	e002      	b.n	80031e4 <LoopCopyDataInit>

080031de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031e2:	3304      	adds	r3, #4

080031e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031e8:	d3f9      	bcc.n	80031de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031ea:	4a0b      	ldr	r2, [pc, #44]	; (8003218 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80031ec:	4c0b      	ldr	r4, [pc, #44]	; (800321c <LoopFillZerobss+0x26>)
  movs r3, #0
 80031ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031f0:	e001      	b.n	80031f6 <LoopFillZerobss>

080031f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031f4:	3204      	adds	r2, #4

080031f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031f8:	d3fb      	bcc.n	80031f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80031fa:	f7ff fdbd 	bl	8002d78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031fe:	f006 fe19 	bl	8009e34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003202:	f7ff fb51 	bl	80028a8 <main>
  bx  lr    
 8003206:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003208:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800320c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003210:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 8003214:	0800ceb0 	.word	0x0800ceb0
  ldr r2, =_sbss
 8003218:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 800321c:	200005c4 	.word	0x200005c4

08003220 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003220:	e7fe      	b.n	8003220 <ADC_IRQHandler>

08003222 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003226:	2003      	movs	r0, #3
 8003228:	f000 f94c 	bl	80034c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800322c:	2000      	movs	r0, #0
 800322e:	f000 f805 	bl	800323c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003232:	f7ff fc79 	bl	8002b28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	bd80      	pop	{r7, pc}

0800323c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003244:	4b12      	ldr	r3, [pc, #72]	; (8003290 <HAL_InitTick+0x54>)
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	4b12      	ldr	r3, [pc, #72]	; (8003294 <HAL_InitTick+0x58>)
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	4619      	mov	r1, r3
 800324e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003252:	fbb3 f3f1 	udiv	r3, r3, r1
 8003256:	fbb2 f3f3 	udiv	r3, r2, r3
 800325a:	4618      	mov	r0, r3
 800325c:	f000 f967 	bl	800352e <HAL_SYSTICK_Config>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e00e      	b.n	8003288 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b0f      	cmp	r3, #15
 800326e:	d80a      	bhi.n	8003286 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003270:	2200      	movs	r2, #0
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003278:	f000 f92f 	bl	80034da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800327c:	4a06      	ldr	r2, [pc, #24]	; (8003298 <HAL_InitTick+0x5c>)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003282:	2300      	movs	r3, #0
 8003284:	e000      	b.n	8003288 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
}
 8003288:	4618      	mov	r0, r3
 800328a:	3708      	adds	r7, #8
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	20000054 	.word	0x20000054
 8003294:	2000005c 	.word	0x2000005c
 8003298:	20000058 	.word	0x20000058

0800329c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032a0:	4b06      	ldr	r3, [pc, #24]	; (80032bc <HAL_IncTick+0x20>)
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	461a      	mov	r2, r3
 80032a6:	4b06      	ldr	r3, [pc, #24]	; (80032c0 <HAL_IncTick+0x24>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4413      	add	r3, r2
 80032ac:	4a04      	ldr	r2, [pc, #16]	; (80032c0 <HAL_IncTick+0x24>)
 80032ae:	6013      	str	r3, [r2, #0]
}
 80032b0:	bf00      	nop
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	2000005c 	.word	0x2000005c
 80032c0:	20000474 	.word	0x20000474

080032c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  return uwTick;
 80032c8:	4b03      	ldr	r3, [pc, #12]	; (80032d8 <HAL_GetTick+0x14>)
 80032ca:	681b      	ldr	r3, [r3, #0]
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	20000474 	.word	0x20000474

080032dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032e4:	f7ff ffee 	bl	80032c4 <HAL_GetTick>
 80032e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032f4:	d005      	beq.n	8003302 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032f6:	4b0a      	ldr	r3, [pc, #40]	; (8003320 <HAL_Delay+0x44>)
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	461a      	mov	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	4413      	add	r3, r2
 8003300:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003302:	bf00      	nop
 8003304:	f7ff ffde 	bl	80032c4 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	429a      	cmp	r2, r3
 8003312:	d8f7      	bhi.n	8003304 <HAL_Delay+0x28>
  {
  }
}
 8003314:	bf00      	nop
 8003316:	bf00      	nop
 8003318:	3710      	adds	r7, #16
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	2000005c 	.word	0x2000005c

08003324 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003324:	b480      	push	{r7}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f003 0307 	and.w	r3, r3, #7
 8003332:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003334:	4b0b      	ldr	r3, [pc, #44]	; (8003364 <__NVIC_SetPriorityGrouping+0x40>)
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800333a:	68ba      	ldr	r2, [r7, #8]
 800333c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003340:	4013      	ands	r3, r2
 8003342:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800334c:	4b06      	ldr	r3, [pc, #24]	; (8003368 <__NVIC_SetPriorityGrouping+0x44>)
 800334e:	4313      	orrs	r3, r2
 8003350:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003352:	4a04      	ldr	r2, [pc, #16]	; (8003364 <__NVIC_SetPriorityGrouping+0x40>)
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	60d3      	str	r3, [r2, #12]
}
 8003358:	bf00      	nop
 800335a:	3714      	adds	r7, #20
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr
 8003364:	e000ed00 	.word	0xe000ed00
 8003368:	05fa0000 	.word	0x05fa0000

0800336c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003370:	4b04      	ldr	r3, [pc, #16]	; (8003384 <__NVIC_GetPriorityGrouping+0x18>)
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	0a1b      	lsrs	r3, r3, #8
 8003376:	f003 0307 	and.w	r3, r3, #7
}
 800337a:	4618      	mov	r0, r3
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr
 8003384:	e000ed00 	.word	0xe000ed00

08003388 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	4603      	mov	r3, r0
 8003390:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003396:	2b00      	cmp	r3, #0
 8003398:	db0b      	blt.n	80033b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800339a:	79fb      	ldrb	r3, [r7, #7]
 800339c:	f003 021f 	and.w	r2, r3, #31
 80033a0:	4907      	ldr	r1, [pc, #28]	; (80033c0 <__NVIC_EnableIRQ+0x38>)
 80033a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a6:	095b      	lsrs	r3, r3, #5
 80033a8:	2001      	movs	r0, #1
 80033aa:	fa00 f202 	lsl.w	r2, r0, r2
 80033ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033b2:	bf00      	nop
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	e000e100 	.word	0xe000e100

080033c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	4603      	mov	r3, r0
 80033cc:	6039      	str	r1, [r7, #0]
 80033ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	db0a      	blt.n	80033ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	490c      	ldr	r1, [pc, #48]	; (8003410 <__NVIC_SetPriority+0x4c>)
 80033de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e2:	0112      	lsls	r2, r2, #4
 80033e4:	b2d2      	uxtb	r2, r2
 80033e6:	440b      	add	r3, r1
 80033e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033ec:	e00a      	b.n	8003404 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	b2da      	uxtb	r2, r3
 80033f2:	4908      	ldr	r1, [pc, #32]	; (8003414 <__NVIC_SetPriority+0x50>)
 80033f4:	79fb      	ldrb	r3, [r7, #7]
 80033f6:	f003 030f 	and.w	r3, r3, #15
 80033fa:	3b04      	subs	r3, #4
 80033fc:	0112      	lsls	r2, r2, #4
 80033fe:	b2d2      	uxtb	r2, r2
 8003400:	440b      	add	r3, r1
 8003402:	761a      	strb	r2, [r3, #24]
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	e000e100 	.word	0xe000e100
 8003414:	e000ed00 	.word	0xe000ed00

08003418 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003418:	b480      	push	{r7}
 800341a:	b089      	sub	sp, #36	; 0x24
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f003 0307 	and.w	r3, r3, #7
 800342a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	f1c3 0307 	rsb	r3, r3, #7
 8003432:	2b04      	cmp	r3, #4
 8003434:	bf28      	it	cs
 8003436:	2304      	movcs	r3, #4
 8003438:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	3304      	adds	r3, #4
 800343e:	2b06      	cmp	r3, #6
 8003440:	d902      	bls.n	8003448 <NVIC_EncodePriority+0x30>
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	3b03      	subs	r3, #3
 8003446:	e000      	b.n	800344a <NVIC_EncodePriority+0x32>
 8003448:	2300      	movs	r3, #0
 800344a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800344c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	43da      	mvns	r2, r3
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	401a      	ands	r2, r3
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003460:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	fa01 f303 	lsl.w	r3, r1, r3
 800346a:	43d9      	mvns	r1, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003470:	4313      	orrs	r3, r2
         );
}
 8003472:	4618      	mov	r0, r3
 8003474:	3724      	adds	r7, #36	; 0x24
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
	...

08003480 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	3b01      	subs	r3, #1
 800348c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003490:	d301      	bcc.n	8003496 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003492:	2301      	movs	r3, #1
 8003494:	e00f      	b.n	80034b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003496:	4a0a      	ldr	r2, [pc, #40]	; (80034c0 <SysTick_Config+0x40>)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	3b01      	subs	r3, #1
 800349c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800349e:	210f      	movs	r1, #15
 80034a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034a4:	f7ff ff8e 	bl	80033c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034a8:	4b05      	ldr	r3, [pc, #20]	; (80034c0 <SysTick_Config+0x40>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034ae:	4b04      	ldr	r3, [pc, #16]	; (80034c0 <SysTick_Config+0x40>)
 80034b0:	2207      	movs	r2, #7
 80034b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	e000e010 	.word	0xe000e010

080034c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f7ff ff29 	bl	8003324 <__NVIC_SetPriorityGrouping>
}
 80034d2:	bf00      	nop
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034da:	b580      	push	{r7, lr}
 80034dc:	b086      	sub	sp, #24
 80034de:	af00      	add	r7, sp, #0
 80034e0:	4603      	mov	r3, r0
 80034e2:	60b9      	str	r1, [r7, #8]
 80034e4:	607a      	str	r2, [r7, #4]
 80034e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80034e8:	2300      	movs	r3, #0
 80034ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034ec:	f7ff ff3e 	bl	800336c <__NVIC_GetPriorityGrouping>
 80034f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	68b9      	ldr	r1, [r7, #8]
 80034f6:	6978      	ldr	r0, [r7, #20]
 80034f8:	f7ff ff8e 	bl	8003418 <NVIC_EncodePriority>
 80034fc:	4602      	mov	r2, r0
 80034fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003502:	4611      	mov	r1, r2
 8003504:	4618      	mov	r0, r3
 8003506:	f7ff ff5d 	bl	80033c4 <__NVIC_SetPriority>
}
 800350a:	bf00      	nop
 800350c:	3718      	adds	r7, #24
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b082      	sub	sp, #8
 8003516:	af00      	add	r7, sp, #0
 8003518:	4603      	mov	r3, r0
 800351a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800351c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003520:	4618      	mov	r0, r3
 8003522:	f7ff ff31 	bl	8003388 <__NVIC_EnableIRQ>
}
 8003526:	bf00      	nop
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b082      	sub	sp, #8
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f7ff ffa2 	bl	8003480 <SysTick_Config>
 800353c:	4603      	mov	r3, r0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b084      	sub	sp, #16
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003552:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003554:	f7ff feb6 	bl	80032c4 <HAL_GetTick>
 8003558:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d008      	beq.n	8003578 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2280      	movs	r2, #128	; 0x80
 800356a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e052      	b.n	800361e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 0216 	bic.w	r2, r2, #22
 8003586:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	695a      	ldr	r2, [r3, #20]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003596:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359c:	2b00      	cmp	r3, #0
 800359e:	d103      	bne.n	80035a8 <HAL_DMA_Abort+0x62>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d007      	beq.n	80035b8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 0208 	bic.w	r2, r2, #8
 80035b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 0201 	bic.w	r2, r2, #1
 80035c6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035c8:	e013      	b.n	80035f2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035ca:	f7ff fe7b 	bl	80032c4 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	2b05      	cmp	r3, #5
 80035d6:	d90c      	bls.n	80035f2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2220      	movs	r2, #32
 80035dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2203      	movs	r2, #3
 80035e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e015      	b.n	800361e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1e4      	bne.n	80035ca <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003604:	223f      	movs	r2, #63	; 0x3f
 8003606:	409a      	lsls	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003626:	b480      	push	{r7}
 8003628:	b083      	sub	sp, #12
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b02      	cmp	r3, #2
 8003638:	d004      	beq.n	8003644 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2280      	movs	r2, #128	; 0x80
 800363e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e00c      	b.n	800365e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2205      	movs	r2, #5
 8003648:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f022 0201 	bic.w	r2, r2, #1
 800365a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
	...

0800366c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800366c:	b480      	push	{r7}
 800366e:	b089      	sub	sp, #36	; 0x24
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003676:	2300      	movs	r3, #0
 8003678:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800367a:	2300      	movs	r3, #0
 800367c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800367e:	2300      	movs	r3, #0
 8003680:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003682:	2300      	movs	r3, #0
 8003684:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003686:	2300      	movs	r3, #0
 8003688:	61fb      	str	r3, [r7, #28]
 800368a:	e175      	b.n	8003978 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800368c:	2201      	movs	r2, #1
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	fa02 f303 	lsl.w	r3, r2, r3
 8003694:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	4013      	ands	r3, r2
 800369e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	f040 8164 	bne.w	8003972 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f003 0303 	and.w	r3, r3, #3
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d005      	beq.n	80036c2 <HAL_GPIO_Init+0x56>
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f003 0303 	and.w	r3, r3, #3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d130      	bne.n	8003724 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	005b      	lsls	r3, r3, #1
 80036cc:	2203      	movs	r2, #3
 80036ce:	fa02 f303 	lsl.w	r3, r2, r3
 80036d2:	43db      	mvns	r3, r3
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	4013      	ands	r3, r2
 80036d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	68da      	ldr	r2, [r3, #12]
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	fa02 f303 	lsl.w	r3, r2, r3
 80036e6:	69ba      	ldr	r2, [r7, #24]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	69ba      	ldr	r2, [r7, #24]
 80036f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036f8:	2201      	movs	r2, #1
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003700:	43db      	mvns	r3, r3
 8003702:	69ba      	ldr	r2, [r7, #24]
 8003704:	4013      	ands	r3, r2
 8003706:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	091b      	lsrs	r3, r3, #4
 800370e:	f003 0201 	and.w	r2, r3, #1
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	4313      	orrs	r3, r2
 800371c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f003 0303 	and.w	r3, r3, #3
 800372c:	2b03      	cmp	r3, #3
 800372e:	d017      	beq.n	8003760 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	2203      	movs	r2, #3
 800373c:	fa02 f303 	lsl.w	r3, r2, r3
 8003740:	43db      	mvns	r3, r3
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	4013      	ands	r3, r2
 8003746:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	005b      	lsls	r3, r3, #1
 8003750:	fa02 f303 	lsl.w	r3, r2, r3
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	4313      	orrs	r3, r2
 8003758:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f003 0303 	and.w	r3, r3, #3
 8003768:	2b02      	cmp	r3, #2
 800376a:	d123      	bne.n	80037b4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	08da      	lsrs	r2, r3, #3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	3208      	adds	r2, #8
 8003774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003778:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	f003 0307 	and.w	r3, r3, #7
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	220f      	movs	r2, #15
 8003784:	fa02 f303 	lsl.w	r3, r2, r3
 8003788:	43db      	mvns	r3, r3
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	4013      	ands	r3, r2
 800378e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	691a      	ldr	r2, [r3, #16]
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	f003 0307 	and.w	r3, r3, #7
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	08da      	lsrs	r2, r3, #3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	3208      	adds	r2, #8
 80037ae:	69b9      	ldr	r1, [r7, #24]
 80037b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	2203      	movs	r2, #3
 80037c0:	fa02 f303 	lsl.w	r3, r2, r3
 80037c4:	43db      	mvns	r3, r3
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	4013      	ands	r3, r2
 80037ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f003 0203 	and.w	r2, r3, #3
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	fa02 f303 	lsl.w	r3, r2, r3
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	4313      	orrs	r3, r2
 80037e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f000 80be 	beq.w	8003972 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037f6:	4b66      	ldr	r3, [pc, #408]	; (8003990 <HAL_GPIO_Init+0x324>)
 80037f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fa:	4a65      	ldr	r2, [pc, #404]	; (8003990 <HAL_GPIO_Init+0x324>)
 80037fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003800:	6453      	str	r3, [r2, #68]	; 0x44
 8003802:	4b63      	ldr	r3, [pc, #396]	; (8003990 <HAL_GPIO_Init+0x324>)
 8003804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800380a:	60fb      	str	r3, [r7, #12]
 800380c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800380e:	4a61      	ldr	r2, [pc, #388]	; (8003994 <HAL_GPIO_Init+0x328>)
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	089b      	lsrs	r3, r3, #2
 8003814:	3302      	adds	r3, #2
 8003816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800381a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	f003 0303 	and.w	r3, r3, #3
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	220f      	movs	r2, #15
 8003826:	fa02 f303 	lsl.w	r3, r2, r3
 800382a:	43db      	mvns	r3, r3
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	4013      	ands	r3, r2
 8003830:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a58      	ldr	r2, [pc, #352]	; (8003998 <HAL_GPIO_Init+0x32c>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d037      	beq.n	80038aa <HAL_GPIO_Init+0x23e>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a57      	ldr	r2, [pc, #348]	; (800399c <HAL_GPIO_Init+0x330>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d031      	beq.n	80038a6 <HAL_GPIO_Init+0x23a>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a56      	ldr	r2, [pc, #344]	; (80039a0 <HAL_GPIO_Init+0x334>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d02b      	beq.n	80038a2 <HAL_GPIO_Init+0x236>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a55      	ldr	r2, [pc, #340]	; (80039a4 <HAL_GPIO_Init+0x338>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d025      	beq.n	800389e <HAL_GPIO_Init+0x232>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a54      	ldr	r2, [pc, #336]	; (80039a8 <HAL_GPIO_Init+0x33c>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d01f      	beq.n	800389a <HAL_GPIO_Init+0x22e>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a53      	ldr	r2, [pc, #332]	; (80039ac <HAL_GPIO_Init+0x340>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d019      	beq.n	8003896 <HAL_GPIO_Init+0x22a>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a52      	ldr	r2, [pc, #328]	; (80039b0 <HAL_GPIO_Init+0x344>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d013      	beq.n	8003892 <HAL_GPIO_Init+0x226>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a51      	ldr	r2, [pc, #324]	; (80039b4 <HAL_GPIO_Init+0x348>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d00d      	beq.n	800388e <HAL_GPIO_Init+0x222>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a50      	ldr	r2, [pc, #320]	; (80039b8 <HAL_GPIO_Init+0x34c>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d007      	beq.n	800388a <HAL_GPIO_Init+0x21e>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a4f      	ldr	r2, [pc, #316]	; (80039bc <HAL_GPIO_Init+0x350>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d101      	bne.n	8003886 <HAL_GPIO_Init+0x21a>
 8003882:	2309      	movs	r3, #9
 8003884:	e012      	b.n	80038ac <HAL_GPIO_Init+0x240>
 8003886:	230a      	movs	r3, #10
 8003888:	e010      	b.n	80038ac <HAL_GPIO_Init+0x240>
 800388a:	2308      	movs	r3, #8
 800388c:	e00e      	b.n	80038ac <HAL_GPIO_Init+0x240>
 800388e:	2307      	movs	r3, #7
 8003890:	e00c      	b.n	80038ac <HAL_GPIO_Init+0x240>
 8003892:	2306      	movs	r3, #6
 8003894:	e00a      	b.n	80038ac <HAL_GPIO_Init+0x240>
 8003896:	2305      	movs	r3, #5
 8003898:	e008      	b.n	80038ac <HAL_GPIO_Init+0x240>
 800389a:	2304      	movs	r3, #4
 800389c:	e006      	b.n	80038ac <HAL_GPIO_Init+0x240>
 800389e:	2303      	movs	r3, #3
 80038a0:	e004      	b.n	80038ac <HAL_GPIO_Init+0x240>
 80038a2:	2302      	movs	r3, #2
 80038a4:	e002      	b.n	80038ac <HAL_GPIO_Init+0x240>
 80038a6:	2301      	movs	r3, #1
 80038a8:	e000      	b.n	80038ac <HAL_GPIO_Init+0x240>
 80038aa:	2300      	movs	r3, #0
 80038ac:	69fa      	ldr	r2, [r7, #28]
 80038ae:	f002 0203 	and.w	r2, r2, #3
 80038b2:	0092      	lsls	r2, r2, #2
 80038b4:	4093      	lsls	r3, r2
 80038b6:	69ba      	ldr	r2, [r7, #24]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80038bc:	4935      	ldr	r1, [pc, #212]	; (8003994 <HAL_GPIO_Init+0x328>)
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	089b      	lsrs	r3, r3, #2
 80038c2:	3302      	adds	r3, #2
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038ca:	4b3d      	ldr	r3, [pc, #244]	; (80039c0 <HAL_GPIO_Init+0x354>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	43db      	mvns	r3, r3
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	4013      	ands	r3, r2
 80038d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d003      	beq.n	80038ee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038ee:	4a34      	ldr	r2, [pc, #208]	; (80039c0 <HAL_GPIO_Init+0x354>)
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038f4:	4b32      	ldr	r3, [pc, #200]	; (80039c0 <HAL_GPIO_Init+0x354>)
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	43db      	mvns	r3, r3
 80038fe:	69ba      	ldr	r2, [r7, #24]
 8003900:	4013      	ands	r3, r2
 8003902:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d003      	beq.n	8003918 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	4313      	orrs	r3, r2
 8003916:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003918:	4a29      	ldr	r2, [pc, #164]	; (80039c0 <HAL_GPIO_Init+0x354>)
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800391e:	4b28      	ldr	r3, [pc, #160]	; (80039c0 <HAL_GPIO_Init+0x354>)
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	43db      	mvns	r3, r3
 8003928:	69ba      	ldr	r2, [r7, #24]
 800392a:	4013      	ands	r3, r2
 800392c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d003      	beq.n	8003942 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800393a:	69ba      	ldr	r2, [r7, #24]
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	4313      	orrs	r3, r2
 8003940:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003942:	4a1f      	ldr	r2, [pc, #124]	; (80039c0 <HAL_GPIO_Init+0x354>)
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003948:	4b1d      	ldr	r3, [pc, #116]	; (80039c0 <HAL_GPIO_Init+0x354>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	43db      	mvns	r3, r3
 8003952:	69ba      	ldr	r2, [r7, #24]
 8003954:	4013      	ands	r3, r2
 8003956:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d003      	beq.n	800396c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	4313      	orrs	r3, r2
 800396a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800396c:	4a14      	ldr	r2, [pc, #80]	; (80039c0 <HAL_GPIO_Init+0x354>)
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	3301      	adds	r3, #1
 8003976:	61fb      	str	r3, [r7, #28]
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	2b0f      	cmp	r3, #15
 800397c:	f67f ae86 	bls.w	800368c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003980:	bf00      	nop
 8003982:	bf00      	nop
 8003984:	3724      	adds	r7, #36	; 0x24
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	40023800 	.word	0x40023800
 8003994:	40013800 	.word	0x40013800
 8003998:	40020000 	.word	0x40020000
 800399c:	40020400 	.word	0x40020400
 80039a0:	40020800 	.word	0x40020800
 80039a4:	40020c00 	.word	0x40020c00
 80039a8:	40021000 	.word	0x40021000
 80039ac:	40021400 	.word	0x40021400
 80039b0:	40021800 	.word	0x40021800
 80039b4:	40021c00 	.word	0x40021c00
 80039b8:	40022000 	.word	0x40022000
 80039bc:	40022400 	.word	0x40022400
 80039c0:	40013c00 	.word	0x40013c00

080039c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	460b      	mov	r3, r1
 80039ce:	807b      	strh	r3, [r7, #2]
 80039d0:	4613      	mov	r3, r2
 80039d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039d4:	787b      	ldrb	r3, [r7, #1]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d003      	beq.n	80039e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039da:	887a      	ldrh	r2, [r7, #2]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80039e0:	e003      	b.n	80039ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80039e2:	887b      	ldrh	r3, [r7, #2]
 80039e4:	041a      	lsls	r2, r3, #16
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	619a      	str	r2, [r3, #24]
}
 80039ea:	bf00      	nop
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
	...

080039f8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80039f8:	b480      	push	{r7}
 80039fa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039fc:	4b05      	ldr	r3, [pc, #20]	; (8003a14 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a04      	ldr	r2, [pc, #16]	; (8003a14 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a06:	6013      	str	r3, [r2, #0]
}
 8003a08:	bf00      	nop
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	40007000 	.word	0x40007000

08003a18 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003a22:	4b23      	ldr	r3, [pc, #140]	; (8003ab0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	4a22      	ldr	r2, [pc, #136]	; (8003ab0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a2e:	4b20      	ldr	r3, [pc, #128]	; (8003ab0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a36:	603b      	str	r3, [r7, #0]
 8003a38:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003a3a:	4b1e      	ldr	r3, [pc, #120]	; (8003ab4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a1d      	ldr	r2, [pc, #116]	; (8003ab4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a44:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a46:	f7ff fc3d 	bl	80032c4 <HAL_GetTick>
 8003a4a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a4c:	e009      	b.n	8003a62 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a4e:	f7ff fc39 	bl	80032c4 <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a5c:	d901      	bls.n	8003a62 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e022      	b.n	8003aa8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a62:	4b14      	ldr	r3, [pc, #80]	; (8003ab4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a6e:	d1ee      	bne.n	8003a4e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003a70:	4b10      	ldr	r3, [pc, #64]	; (8003ab4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a0f      	ldr	r2, [pc, #60]	; (8003ab4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a7a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a7c:	f7ff fc22 	bl	80032c4 <HAL_GetTick>
 8003a80:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a82:	e009      	b.n	8003a98 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a84:	f7ff fc1e 	bl	80032c4 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a92:	d901      	bls.n	8003a98 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e007      	b.n	8003aa8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a98:	4b06      	ldr	r3, [pc, #24]	; (8003ab4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003aa4:	d1ee      	bne.n	8003a84 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3708      	adds	r7, #8
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	40023800 	.word	0x40023800
 8003ab4:	40007000 	.word	0x40007000

08003ab8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b086      	sub	sp, #24
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e291      	b.n	8003ff2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f000 8087 	beq.w	8003bea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003adc:	4b96      	ldr	r3, [pc, #600]	; (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f003 030c 	and.w	r3, r3, #12
 8003ae4:	2b04      	cmp	r3, #4
 8003ae6:	d00c      	beq.n	8003b02 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ae8:	4b93      	ldr	r3, [pc, #588]	; (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f003 030c 	and.w	r3, r3, #12
 8003af0:	2b08      	cmp	r3, #8
 8003af2:	d112      	bne.n	8003b1a <HAL_RCC_OscConfig+0x62>
 8003af4:	4b90      	ldr	r3, [pc, #576]	; (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003afc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b00:	d10b      	bne.n	8003b1a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b02:	4b8d      	ldr	r3, [pc, #564]	; (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d06c      	beq.n	8003be8 <HAL_RCC_OscConfig+0x130>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d168      	bne.n	8003be8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e26b      	b.n	8003ff2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b22:	d106      	bne.n	8003b32 <HAL_RCC_OscConfig+0x7a>
 8003b24:	4b84      	ldr	r3, [pc, #528]	; (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a83      	ldr	r2, [pc, #524]	; (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003b2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b2e:	6013      	str	r3, [r2, #0]
 8003b30:	e02e      	b.n	8003b90 <HAL_RCC_OscConfig+0xd8>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10c      	bne.n	8003b54 <HAL_RCC_OscConfig+0x9c>
 8003b3a:	4b7f      	ldr	r3, [pc, #508]	; (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a7e      	ldr	r2, [pc, #504]	; (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003b40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b44:	6013      	str	r3, [r2, #0]
 8003b46:	4b7c      	ldr	r3, [pc, #496]	; (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a7b      	ldr	r2, [pc, #492]	; (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003b4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b50:	6013      	str	r3, [r2, #0]
 8003b52:	e01d      	b.n	8003b90 <HAL_RCC_OscConfig+0xd8>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b5c:	d10c      	bne.n	8003b78 <HAL_RCC_OscConfig+0xc0>
 8003b5e:	4b76      	ldr	r3, [pc, #472]	; (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a75      	ldr	r2, [pc, #468]	; (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003b64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b68:	6013      	str	r3, [r2, #0]
 8003b6a:	4b73      	ldr	r3, [pc, #460]	; (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a72      	ldr	r2, [pc, #456]	; (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b74:	6013      	str	r3, [r2, #0]
 8003b76:	e00b      	b.n	8003b90 <HAL_RCC_OscConfig+0xd8>
 8003b78:	4b6f      	ldr	r3, [pc, #444]	; (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a6e      	ldr	r2, [pc, #440]	; (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003b7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b82:	6013      	str	r3, [r2, #0]
 8003b84:	4b6c      	ldr	r3, [pc, #432]	; (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a6b      	ldr	r2, [pc, #428]	; (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003b8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d013      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b98:	f7ff fb94 	bl	80032c4 <HAL_GetTick>
 8003b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ba0:	f7ff fb90 	bl	80032c4 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b64      	cmp	r3, #100	; 0x64
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e21f      	b.n	8003ff2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bb2:	4b61      	ldr	r3, [pc, #388]	; (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d0f0      	beq.n	8003ba0 <HAL_RCC_OscConfig+0xe8>
 8003bbe:	e014      	b.n	8003bea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc0:	f7ff fb80 	bl	80032c4 <HAL_GetTick>
 8003bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bc6:	e008      	b.n	8003bda <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bc8:	f7ff fb7c 	bl	80032c4 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	2b64      	cmp	r3, #100	; 0x64
 8003bd4:	d901      	bls.n	8003bda <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e20b      	b.n	8003ff2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bda:	4b57      	ldr	r3, [pc, #348]	; (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1f0      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x110>
 8003be6:	e000      	b.n	8003bea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003be8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d069      	beq.n	8003cca <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bf6:	4b50      	ldr	r3, [pc, #320]	; (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f003 030c 	and.w	r3, r3, #12
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00b      	beq.n	8003c1a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c02:	4b4d      	ldr	r3, [pc, #308]	; (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f003 030c 	and.w	r3, r3, #12
 8003c0a:	2b08      	cmp	r3, #8
 8003c0c:	d11c      	bne.n	8003c48 <HAL_RCC_OscConfig+0x190>
 8003c0e:	4b4a      	ldr	r3, [pc, #296]	; (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d116      	bne.n	8003c48 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c1a:	4b47      	ldr	r3, [pc, #284]	; (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d005      	beq.n	8003c32 <HAL_RCC_OscConfig+0x17a>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d001      	beq.n	8003c32 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e1df      	b.n	8003ff2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c32:	4b41      	ldr	r3, [pc, #260]	; (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	493d      	ldr	r1, [pc, #244]	; (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c46:	e040      	b.n	8003cca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d023      	beq.n	8003c98 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c50:	4b39      	ldr	r3, [pc, #228]	; (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a38      	ldr	r2, [pc, #224]	; (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003c56:	f043 0301 	orr.w	r3, r3, #1
 8003c5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5c:	f7ff fb32 	bl	80032c4 <HAL_GetTick>
 8003c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c62:	e008      	b.n	8003c76 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c64:	f7ff fb2e 	bl	80032c4 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e1bd      	b.n	8003ff2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c76:	4b30      	ldr	r3, [pc, #192]	; (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d0f0      	beq.n	8003c64 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c82:	4b2d      	ldr	r3, [pc, #180]	; (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	4929      	ldr	r1, [pc, #164]	; (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	600b      	str	r3, [r1, #0]
 8003c96:	e018      	b.n	8003cca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c98:	4b27      	ldr	r3, [pc, #156]	; (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a26      	ldr	r2, [pc, #152]	; (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003c9e:	f023 0301 	bic.w	r3, r3, #1
 8003ca2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca4:	f7ff fb0e 	bl	80032c4 <HAL_GetTick>
 8003ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003caa:	e008      	b.n	8003cbe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cac:	f7ff fb0a 	bl	80032c4 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e199      	b.n	8003ff2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cbe:	4b1e      	ldr	r3, [pc, #120]	; (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1f0      	bne.n	8003cac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0308 	and.w	r3, r3, #8
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d038      	beq.n	8003d48 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d019      	beq.n	8003d12 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cde:	4b16      	ldr	r3, [pc, #88]	; (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003ce0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ce2:	4a15      	ldr	r2, [pc, #84]	; (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003ce4:	f043 0301 	orr.w	r3, r3, #1
 8003ce8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cea:	f7ff faeb 	bl	80032c4 <HAL_GetTick>
 8003cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cf0:	e008      	b.n	8003d04 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cf2:	f7ff fae7 	bl	80032c4 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d901      	bls.n	8003d04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e176      	b.n	8003ff2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d04:	4b0c      	ldr	r3, [pc, #48]	; (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003d06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d0f0      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x23a>
 8003d10:	e01a      	b.n	8003d48 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d12:	4b09      	ldr	r3, [pc, #36]	; (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003d14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d16:	4a08      	ldr	r2, [pc, #32]	; (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003d18:	f023 0301 	bic.w	r3, r3, #1
 8003d1c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d1e:	f7ff fad1 	bl	80032c4 <HAL_GetTick>
 8003d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d24:	e00a      	b.n	8003d3c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d26:	f7ff facd 	bl	80032c4 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d903      	bls.n	8003d3c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e15c      	b.n	8003ff2 <HAL_RCC_OscConfig+0x53a>
 8003d38:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d3c:	4b91      	ldr	r3, [pc, #580]	; (8003f84 <HAL_RCC_OscConfig+0x4cc>)
 8003d3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d1ee      	bne.n	8003d26 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0304 	and.w	r3, r3, #4
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f000 80a4 	beq.w	8003e9e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d56:	4b8b      	ldr	r3, [pc, #556]	; (8003f84 <HAL_RCC_OscConfig+0x4cc>)
 8003d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d10d      	bne.n	8003d7e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d62:	4b88      	ldr	r3, [pc, #544]	; (8003f84 <HAL_RCC_OscConfig+0x4cc>)
 8003d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d66:	4a87      	ldr	r2, [pc, #540]	; (8003f84 <HAL_RCC_OscConfig+0x4cc>)
 8003d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d6e:	4b85      	ldr	r3, [pc, #532]	; (8003f84 <HAL_RCC_OscConfig+0x4cc>)
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d76:	60bb      	str	r3, [r7, #8]
 8003d78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d7e:	4b82      	ldr	r3, [pc, #520]	; (8003f88 <HAL_RCC_OscConfig+0x4d0>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d118      	bne.n	8003dbc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003d8a:	4b7f      	ldr	r3, [pc, #508]	; (8003f88 <HAL_RCC_OscConfig+0x4d0>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a7e      	ldr	r2, [pc, #504]	; (8003f88 <HAL_RCC_OscConfig+0x4d0>)
 8003d90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d96:	f7ff fa95 	bl	80032c4 <HAL_GetTick>
 8003d9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d9c:	e008      	b.n	8003db0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d9e:	f7ff fa91 	bl	80032c4 <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	2b64      	cmp	r3, #100	; 0x64
 8003daa:	d901      	bls.n	8003db0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e120      	b.n	8003ff2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003db0:	4b75      	ldr	r3, [pc, #468]	; (8003f88 <HAL_RCC_OscConfig+0x4d0>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d0f0      	beq.n	8003d9e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d106      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x31a>
 8003dc4:	4b6f      	ldr	r3, [pc, #444]	; (8003f84 <HAL_RCC_OscConfig+0x4cc>)
 8003dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc8:	4a6e      	ldr	r2, [pc, #440]	; (8003f84 <HAL_RCC_OscConfig+0x4cc>)
 8003dca:	f043 0301 	orr.w	r3, r3, #1
 8003dce:	6713      	str	r3, [r2, #112]	; 0x70
 8003dd0:	e02d      	b.n	8003e2e <HAL_RCC_OscConfig+0x376>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d10c      	bne.n	8003df4 <HAL_RCC_OscConfig+0x33c>
 8003dda:	4b6a      	ldr	r3, [pc, #424]	; (8003f84 <HAL_RCC_OscConfig+0x4cc>)
 8003ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dde:	4a69      	ldr	r2, [pc, #420]	; (8003f84 <HAL_RCC_OscConfig+0x4cc>)
 8003de0:	f023 0301 	bic.w	r3, r3, #1
 8003de4:	6713      	str	r3, [r2, #112]	; 0x70
 8003de6:	4b67      	ldr	r3, [pc, #412]	; (8003f84 <HAL_RCC_OscConfig+0x4cc>)
 8003de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dea:	4a66      	ldr	r2, [pc, #408]	; (8003f84 <HAL_RCC_OscConfig+0x4cc>)
 8003dec:	f023 0304 	bic.w	r3, r3, #4
 8003df0:	6713      	str	r3, [r2, #112]	; 0x70
 8003df2:	e01c      	b.n	8003e2e <HAL_RCC_OscConfig+0x376>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	2b05      	cmp	r3, #5
 8003dfa:	d10c      	bne.n	8003e16 <HAL_RCC_OscConfig+0x35e>
 8003dfc:	4b61      	ldr	r3, [pc, #388]	; (8003f84 <HAL_RCC_OscConfig+0x4cc>)
 8003dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e00:	4a60      	ldr	r2, [pc, #384]	; (8003f84 <HAL_RCC_OscConfig+0x4cc>)
 8003e02:	f043 0304 	orr.w	r3, r3, #4
 8003e06:	6713      	str	r3, [r2, #112]	; 0x70
 8003e08:	4b5e      	ldr	r3, [pc, #376]	; (8003f84 <HAL_RCC_OscConfig+0x4cc>)
 8003e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e0c:	4a5d      	ldr	r2, [pc, #372]	; (8003f84 <HAL_RCC_OscConfig+0x4cc>)
 8003e0e:	f043 0301 	orr.w	r3, r3, #1
 8003e12:	6713      	str	r3, [r2, #112]	; 0x70
 8003e14:	e00b      	b.n	8003e2e <HAL_RCC_OscConfig+0x376>
 8003e16:	4b5b      	ldr	r3, [pc, #364]	; (8003f84 <HAL_RCC_OscConfig+0x4cc>)
 8003e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1a:	4a5a      	ldr	r2, [pc, #360]	; (8003f84 <HAL_RCC_OscConfig+0x4cc>)
 8003e1c:	f023 0301 	bic.w	r3, r3, #1
 8003e20:	6713      	str	r3, [r2, #112]	; 0x70
 8003e22:	4b58      	ldr	r3, [pc, #352]	; (8003f84 <HAL_RCC_OscConfig+0x4cc>)
 8003e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e26:	4a57      	ldr	r2, [pc, #348]	; (8003f84 <HAL_RCC_OscConfig+0x4cc>)
 8003e28:	f023 0304 	bic.w	r3, r3, #4
 8003e2c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d015      	beq.n	8003e62 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e36:	f7ff fa45 	bl	80032c4 <HAL_GetTick>
 8003e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e3c:	e00a      	b.n	8003e54 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e3e:	f7ff fa41 	bl	80032c4 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e0ce      	b.n	8003ff2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e54:	4b4b      	ldr	r3, [pc, #300]	; (8003f84 <HAL_RCC_OscConfig+0x4cc>)
 8003e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d0ee      	beq.n	8003e3e <HAL_RCC_OscConfig+0x386>
 8003e60:	e014      	b.n	8003e8c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e62:	f7ff fa2f 	bl	80032c4 <HAL_GetTick>
 8003e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e68:	e00a      	b.n	8003e80 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e6a:	f7ff fa2b 	bl	80032c4 <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d901      	bls.n	8003e80 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e0b8      	b.n	8003ff2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e80:	4b40      	ldr	r3, [pc, #256]	; (8003f84 <HAL_RCC_OscConfig+0x4cc>)
 8003e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1ee      	bne.n	8003e6a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e8c:	7dfb      	ldrb	r3, [r7, #23]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d105      	bne.n	8003e9e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e92:	4b3c      	ldr	r3, [pc, #240]	; (8003f84 <HAL_RCC_OscConfig+0x4cc>)
 8003e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e96:	4a3b      	ldr	r2, [pc, #236]	; (8003f84 <HAL_RCC_OscConfig+0x4cc>)
 8003e98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e9c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	f000 80a4 	beq.w	8003ff0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ea8:	4b36      	ldr	r3, [pc, #216]	; (8003f84 <HAL_RCC_OscConfig+0x4cc>)
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f003 030c 	and.w	r3, r3, #12
 8003eb0:	2b08      	cmp	r3, #8
 8003eb2:	d06b      	beq.n	8003f8c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d149      	bne.n	8003f50 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ebc:	4b31      	ldr	r3, [pc, #196]	; (8003f84 <HAL_RCC_OscConfig+0x4cc>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a30      	ldr	r2, [pc, #192]	; (8003f84 <HAL_RCC_OscConfig+0x4cc>)
 8003ec2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ec6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec8:	f7ff f9fc 	bl	80032c4 <HAL_GetTick>
 8003ecc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ece:	e008      	b.n	8003ee2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ed0:	f7ff f9f8 	bl	80032c4 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e087      	b.n	8003ff2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ee2:	4b28      	ldr	r3, [pc, #160]	; (8003f84 <HAL_RCC_OscConfig+0x4cc>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1f0      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	69da      	ldr	r2, [r3, #28]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efc:	019b      	lsls	r3, r3, #6
 8003efe:	431a      	orrs	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f04:	085b      	lsrs	r3, r3, #1
 8003f06:	3b01      	subs	r3, #1
 8003f08:	041b      	lsls	r3, r3, #16
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f10:	061b      	lsls	r3, r3, #24
 8003f12:	4313      	orrs	r3, r2
 8003f14:	4a1b      	ldr	r2, [pc, #108]	; (8003f84 <HAL_RCC_OscConfig+0x4cc>)
 8003f16:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f1a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f1c:	4b19      	ldr	r3, [pc, #100]	; (8003f84 <HAL_RCC_OscConfig+0x4cc>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a18      	ldr	r2, [pc, #96]	; (8003f84 <HAL_RCC_OscConfig+0x4cc>)
 8003f22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f28:	f7ff f9cc 	bl	80032c4 <HAL_GetTick>
 8003f2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f2e:	e008      	b.n	8003f42 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f30:	f7ff f9c8 	bl	80032c4 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e057      	b.n	8003ff2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f42:	4b10      	ldr	r3, [pc, #64]	; (8003f84 <HAL_RCC_OscConfig+0x4cc>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d0f0      	beq.n	8003f30 <HAL_RCC_OscConfig+0x478>
 8003f4e:	e04f      	b.n	8003ff0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f50:	4b0c      	ldr	r3, [pc, #48]	; (8003f84 <HAL_RCC_OscConfig+0x4cc>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a0b      	ldr	r2, [pc, #44]	; (8003f84 <HAL_RCC_OscConfig+0x4cc>)
 8003f56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f5c:	f7ff f9b2 	bl	80032c4 <HAL_GetTick>
 8003f60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f62:	e008      	b.n	8003f76 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f64:	f7ff f9ae 	bl	80032c4 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e03d      	b.n	8003ff2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f76:	4b03      	ldr	r3, [pc, #12]	; (8003f84 <HAL_RCC_OscConfig+0x4cc>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1f0      	bne.n	8003f64 <HAL_RCC_OscConfig+0x4ac>
 8003f82:	e035      	b.n	8003ff0 <HAL_RCC_OscConfig+0x538>
 8003f84:	40023800 	.word	0x40023800
 8003f88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003f8c:	4b1b      	ldr	r3, [pc, #108]	; (8003ffc <HAL_RCC_OscConfig+0x544>)
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d028      	beq.n	8003fec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d121      	bne.n	8003fec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d11a      	bne.n	8003fec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003fc2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d111      	bne.n	8003fec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd2:	085b      	lsrs	r3, r3, #1
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d107      	bne.n	8003fec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d001      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e000      	b.n	8003ff2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3718      	adds	r7, #24
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	40023800 	.word	0x40023800

08004000 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800400a:	2300      	movs	r3, #0
 800400c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d101      	bne.n	8004018 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e0d0      	b.n	80041ba <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004018:	4b6a      	ldr	r3, [pc, #424]	; (80041c4 <HAL_RCC_ClockConfig+0x1c4>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 030f 	and.w	r3, r3, #15
 8004020:	683a      	ldr	r2, [r7, #0]
 8004022:	429a      	cmp	r2, r3
 8004024:	d910      	bls.n	8004048 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004026:	4b67      	ldr	r3, [pc, #412]	; (80041c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f023 020f 	bic.w	r2, r3, #15
 800402e:	4965      	ldr	r1, [pc, #404]	; (80041c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	4313      	orrs	r3, r2
 8004034:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004036:	4b63      	ldr	r3, [pc, #396]	; (80041c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 030f 	and.w	r3, r3, #15
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	429a      	cmp	r2, r3
 8004042:	d001      	beq.n	8004048 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e0b8      	b.n	80041ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0302 	and.w	r3, r3, #2
 8004050:	2b00      	cmp	r3, #0
 8004052:	d020      	beq.n	8004096 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0304 	and.w	r3, r3, #4
 800405c:	2b00      	cmp	r3, #0
 800405e:	d005      	beq.n	800406c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004060:	4b59      	ldr	r3, [pc, #356]	; (80041c8 <HAL_RCC_ClockConfig+0x1c8>)
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	4a58      	ldr	r2, [pc, #352]	; (80041c8 <HAL_RCC_ClockConfig+0x1c8>)
 8004066:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800406a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0308 	and.w	r3, r3, #8
 8004074:	2b00      	cmp	r3, #0
 8004076:	d005      	beq.n	8004084 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004078:	4b53      	ldr	r3, [pc, #332]	; (80041c8 <HAL_RCC_ClockConfig+0x1c8>)
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	4a52      	ldr	r2, [pc, #328]	; (80041c8 <HAL_RCC_ClockConfig+0x1c8>)
 800407e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004082:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004084:	4b50      	ldr	r3, [pc, #320]	; (80041c8 <HAL_RCC_ClockConfig+0x1c8>)
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	494d      	ldr	r1, [pc, #308]	; (80041c8 <HAL_RCC_ClockConfig+0x1c8>)
 8004092:	4313      	orrs	r3, r2
 8004094:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d040      	beq.n	8004124 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d107      	bne.n	80040ba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040aa:	4b47      	ldr	r3, [pc, #284]	; (80041c8 <HAL_RCC_ClockConfig+0x1c8>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d115      	bne.n	80040e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e07f      	b.n	80041ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d107      	bne.n	80040d2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040c2:	4b41      	ldr	r3, [pc, #260]	; (80041c8 <HAL_RCC_ClockConfig+0x1c8>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d109      	bne.n	80040e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e073      	b.n	80041ba <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040d2:	4b3d      	ldr	r3, [pc, #244]	; (80041c8 <HAL_RCC_ClockConfig+0x1c8>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0302 	and.w	r3, r3, #2
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e06b      	b.n	80041ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040e2:	4b39      	ldr	r3, [pc, #228]	; (80041c8 <HAL_RCC_ClockConfig+0x1c8>)
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f023 0203 	bic.w	r2, r3, #3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	4936      	ldr	r1, [pc, #216]	; (80041c8 <HAL_RCC_ClockConfig+0x1c8>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040f4:	f7ff f8e6 	bl	80032c4 <HAL_GetTick>
 80040f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040fa:	e00a      	b.n	8004112 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040fc:	f7ff f8e2 	bl	80032c4 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	f241 3288 	movw	r2, #5000	; 0x1388
 800410a:	4293      	cmp	r3, r2
 800410c:	d901      	bls.n	8004112 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e053      	b.n	80041ba <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004112:	4b2d      	ldr	r3, [pc, #180]	; (80041c8 <HAL_RCC_ClockConfig+0x1c8>)
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f003 020c 	and.w	r2, r3, #12
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	429a      	cmp	r2, r3
 8004122:	d1eb      	bne.n	80040fc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004124:	4b27      	ldr	r3, [pc, #156]	; (80041c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 030f 	and.w	r3, r3, #15
 800412c:	683a      	ldr	r2, [r7, #0]
 800412e:	429a      	cmp	r2, r3
 8004130:	d210      	bcs.n	8004154 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004132:	4b24      	ldr	r3, [pc, #144]	; (80041c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f023 020f 	bic.w	r2, r3, #15
 800413a:	4922      	ldr	r1, [pc, #136]	; (80041c4 <HAL_RCC_ClockConfig+0x1c4>)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	4313      	orrs	r3, r2
 8004140:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004142:	4b20      	ldr	r3, [pc, #128]	; (80041c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 030f 	and.w	r3, r3, #15
 800414a:	683a      	ldr	r2, [r7, #0]
 800414c:	429a      	cmp	r2, r3
 800414e:	d001      	beq.n	8004154 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e032      	b.n	80041ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0304 	and.w	r3, r3, #4
 800415c:	2b00      	cmp	r3, #0
 800415e:	d008      	beq.n	8004172 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004160:	4b19      	ldr	r3, [pc, #100]	; (80041c8 <HAL_RCC_ClockConfig+0x1c8>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	4916      	ldr	r1, [pc, #88]	; (80041c8 <HAL_RCC_ClockConfig+0x1c8>)
 800416e:	4313      	orrs	r3, r2
 8004170:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0308 	and.w	r3, r3, #8
 800417a:	2b00      	cmp	r3, #0
 800417c:	d009      	beq.n	8004192 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800417e:	4b12      	ldr	r3, [pc, #72]	; (80041c8 <HAL_RCC_ClockConfig+0x1c8>)
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	00db      	lsls	r3, r3, #3
 800418c:	490e      	ldr	r1, [pc, #56]	; (80041c8 <HAL_RCC_ClockConfig+0x1c8>)
 800418e:	4313      	orrs	r3, r2
 8004190:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004192:	f000 f821 	bl	80041d8 <HAL_RCC_GetSysClockFreq>
 8004196:	4602      	mov	r2, r0
 8004198:	4b0b      	ldr	r3, [pc, #44]	; (80041c8 <HAL_RCC_ClockConfig+0x1c8>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	091b      	lsrs	r3, r3, #4
 800419e:	f003 030f 	and.w	r3, r3, #15
 80041a2:	490a      	ldr	r1, [pc, #40]	; (80041cc <HAL_RCC_ClockConfig+0x1cc>)
 80041a4:	5ccb      	ldrb	r3, [r1, r3]
 80041a6:	fa22 f303 	lsr.w	r3, r2, r3
 80041aa:	4a09      	ldr	r2, [pc, #36]	; (80041d0 <HAL_RCC_ClockConfig+0x1d0>)
 80041ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80041ae:	4b09      	ldr	r3, [pc, #36]	; (80041d4 <HAL_RCC_ClockConfig+0x1d4>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7ff f842 	bl	800323c <HAL_InitTick>

  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	40023c00 	.word	0x40023c00
 80041c8:	40023800 	.word	0x40023800
 80041cc:	0800ca64 	.word	0x0800ca64
 80041d0:	20000054 	.word	0x20000054
 80041d4:	20000058 	.word	0x20000058

080041d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041dc:	b094      	sub	sp, #80	; 0x50
 80041de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80041e0:	2300      	movs	r3, #0
 80041e2:	647b      	str	r3, [r7, #68]	; 0x44
 80041e4:	2300      	movs	r3, #0
 80041e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041e8:	2300      	movs	r3, #0
 80041ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80041ec:	2300      	movs	r3, #0
 80041ee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041f0:	4b79      	ldr	r3, [pc, #484]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f003 030c 	and.w	r3, r3, #12
 80041f8:	2b08      	cmp	r3, #8
 80041fa:	d00d      	beq.n	8004218 <HAL_RCC_GetSysClockFreq+0x40>
 80041fc:	2b08      	cmp	r3, #8
 80041fe:	f200 80e1 	bhi.w	80043c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004202:	2b00      	cmp	r3, #0
 8004204:	d002      	beq.n	800420c <HAL_RCC_GetSysClockFreq+0x34>
 8004206:	2b04      	cmp	r3, #4
 8004208:	d003      	beq.n	8004212 <HAL_RCC_GetSysClockFreq+0x3a>
 800420a:	e0db      	b.n	80043c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800420c:	4b73      	ldr	r3, [pc, #460]	; (80043dc <HAL_RCC_GetSysClockFreq+0x204>)
 800420e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004210:	e0db      	b.n	80043ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004212:	4b73      	ldr	r3, [pc, #460]	; (80043e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004214:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004216:	e0d8      	b.n	80043ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004218:	4b6f      	ldr	r3, [pc, #444]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004220:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004222:	4b6d      	ldr	r3, [pc, #436]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d063      	beq.n	80042f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800422e:	4b6a      	ldr	r3, [pc, #424]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	099b      	lsrs	r3, r3, #6
 8004234:	2200      	movs	r2, #0
 8004236:	63bb      	str	r3, [r7, #56]	; 0x38
 8004238:	63fa      	str	r2, [r7, #60]	; 0x3c
 800423a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800423c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004240:	633b      	str	r3, [r7, #48]	; 0x30
 8004242:	2300      	movs	r3, #0
 8004244:	637b      	str	r3, [r7, #52]	; 0x34
 8004246:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800424a:	4622      	mov	r2, r4
 800424c:	462b      	mov	r3, r5
 800424e:	f04f 0000 	mov.w	r0, #0
 8004252:	f04f 0100 	mov.w	r1, #0
 8004256:	0159      	lsls	r1, r3, #5
 8004258:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800425c:	0150      	lsls	r0, r2, #5
 800425e:	4602      	mov	r2, r0
 8004260:	460b      	mov	r3, r1
 8004262:	4621      	mov	r1, r4
 8004264:	1a51      	subs	r1, r2, r1
 8004266:	6139      	str	r1, [r7, #16]
 8004268:	4629      	mov	r1, r5
 800426a:	eb63 0301 	sbc.w	r3, r3, r1
 800426e:	617b      	str	r3, [r7, #20]
 8004270:	f04f 0200 	mov.w	r2, #0
 8004274:	f04f 0300 	mov.w	r3, #0
 8004278:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800427c:	4659      	mov	r1, fp
 800427e:	018b      	lsls	r3, r1, #6
 8004280:	4651      	mov	r1, sl
 8004282:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004286:	4651      	mov	r1, sl
 8004288:	018a      	lsls	r2, r1, #6
 800428a:	4651      	mov	r1, sl
 800428c:	ebb2 0801 	subs.w	r8, r2, r1
 8004290:	4659      	mov	r1, fp
 8004292:	eb63 0901 	sbc.w	r9, r3, r1
 8004296:	f04f 0200 	mov.w	r2, #0
 800429a:	f04f 0300 	mov.w	r3, #0
 800429e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042aa:	4690      	mov	r8, r2
 80042ac:	4699      	mov	r9, r3
 80042ae:	4623      	mov	r3, r4
 80042b0:	eb18 0303 	adds.w	r3, r8, r3
 80042b4:	60bb      	str	r3, [r7, #8]
 80042b6:	462b      	mov	r3, r5
 80042b8:	eb49 0303 	adc.w	r3, r9, r3
 80042bc:	60fb      	str	r3, [r7, #12]
 80042be:	f04f 0200 	mov.w	r2, #0
 80042c2:	f04f 0300 	mov.w	r3, #0
 80042c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80042ca:	4629      	mov	r1, r5
 80042cc:	024b      	lsls	r3, r1, #9
 80042ce:	4621      	mov	r1, r4
 80042d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80042d4:	4621      	mov	r1, r4
 80042d6:	024a      	lsls	r2, r1, #9
 80042d8:	4610      	mov	r0, r2
 80042da:	4619      	mov	r1, r3
 80042dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042de:	2200      	movs	r2, #0
 80042e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80042e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80042e8:	f7fc fcee 	bl	8000cc8 <__aeabi_uldivmod>
 80042ec:	4602      	mov	r2, r0
 80042ee:	460b      	mov	r3, r1
 80042f0:	4613      	mov	r3, r2
 80042f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042f4:	e058      	b.n	80043a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042f6:	4b38      	ldr	r3, [pc, #224]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	099b      	lsrs	r3, r3, #6
 80042fc:	2200      	movs	r2, #0
 80042fe:	4618      	mov	r0, r3
 8004300:	4611      	mov	r1, r2
 8004302:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004306:	623b      	str	r3, [r7, #32]
 8004308:	2300      	movs	r3, #0
 800430a:	627b      	str	r3, [r7, #36]	; 0x24
 800430c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004310:	4642      	mov	r2, r8
 8004312:	464b      	mov	r3, r9
 8004314:	f04f 0000 	mov.w	r0, #0
 8004318:	f04f 0100 	mov.w	r1, #0
 800431c:	0159      	lsls	r1, r3, #5
 800431e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004322:	0150      	lsls	r0, r2, #5
 8004324:	4602      	mov	r2, r0
 8004326:	460b      	mov	r3, r1
 8004328:	4641      	mov	r1, r8
 800432a:	ebb2 0a01 	subs.w	sl, r2, r1
 800432e:	4649      	mov	r1, r9
 8004330:	eb63 0b01 	sbc.w	fp, r3, r1
 8004334:	f04f 0200 	mov.w	r2, #0
 8004338:	f04f 0300 	mov.w	r3, #0
 800433c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004340:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004344:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004348:	ebb2 040a 	subs.w	r4, r2, sl
 800434c:	eb63 050b 	sbc.w	r5, r3, fp
 8004350:	f04f 0200 	mov.w	r2, #0
 8004354:	f04f 0300 	mov.w	r3, #0
 8004358:	00eb      	lsls	r3, r5, #3
 800435a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800435e:	00e2      	lsls	r2, r4, #3
 8004360:	4614      	mov	r4, r2
 8004362:	461d      	mov	r5, r3
 8004364:	4643      	mov	r3, r8
 8004366:	18e3      	adds	r3, r4, r3
 8004368:	603b      	str	r3, [r7, #0]
 800436a:	464b      	mov	r3, r9
 800436c:	eb45 0303 	adc.w	r3, r5, r3
 8004370:	607b      	str	r3, [r7, #4]
 8004372:	f04f 0200 	mov.w	r2, #0
 8004376:	f04f 0300 	mov.w	r3, #0
 800437a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800437e:	4629      	mov	r1, r5
 8004380:	028b      	lsls	r3, r1, #10
 8004382:	4621      	mov	r1, r4
 8004384:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004388:	4621      	mov	r1, r4
 800438a:	028a      	lsls	r2, r1, #10
 800438c:	4610      	mov	r0, r2
 800438e:	4619      	mov	r1, r3
 8004390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004392:	2200      	movs	r2, #0
 8004394:	61bb      	str	r3, [r7, #24]
 8004396:	61fa      	str	r2, [r7, #28]
 8004398:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800439c:	f7fc fc94 	bl	8000cc8 <__aeabi_uldivmod>
 80043a0:	4602      	mov	r2, r0
 80043a2:	460b      	mov	r3, r1
 80043a4:	4613      	mov	r3, r2
 80043a6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80043a8:	4b0b      	ldr	r3, [pc, #44]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	0c1b      	lsrs	r3, r3, #16
 80043ae:	f003 0303 	and.w	r3, r3, #3
 80043b2:	3301      	adds	r3, #1
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80043b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043c2:	e002      	b.n	80043ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043c4:	4b05      	ldr	r3, [pc, #20]	; (80043dc <HAL_RCC_GetSysClockFreq+0x204>)
 80043c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3750      	adds	r7, #80	; 0x50
 80043d0:	46bd      	mov	sp, r7
 80043d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043d6:	bf00      	nop
 80043d8:	40023800 	.word	0x40023800
 80043dc:	00f42400 	.word	0x00f42400
 80043e0:	007a1200 	.word	0x007a1200

080043e4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043e4:	b480      	push	{r7}
 80043e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043e8:	4b03      	ldr	r3, [pc, #12]	; (80043f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80043ea:	681b      	ldr	r3, [r3, #0]
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	20000054 	.word	0x20000054

080043fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004400:	f7ff fff0 	bl	80043e4 <HAL_RCC_GetHCLKFreq>
 8004404:	4602      	mov	r2, r0
 8004406:	4b05      	ldr	r3, [pc, #20]	; (800441c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	0a9b      	lsrs	r3, r3, #10
 800440c:	f003 0307 	and.w	r3, r3, #7
 8004410:	4903      	ldr	r1, [pc, #12]	; (8004420 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004412:	5ccb      	ldrb	r3, [r1, r3]
 8004414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004418:	4618      	mov	r0, r3
 800441a:	bd80      	pop	{r7, pc}
 800441c:	40023800 	.word	0x40023800
 8004420:	0800ca74 	.word	0x0800ca74

08004424 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004428:	f7ff ffdc 	bl	80043e4 <HAL_RCC_GetHCLKFreq>
 800442c:	4602      	mov	r2, r0
 800442e:	4b05      	ldr	r3, [pc, #20]	; (8004444 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	0b5b      	lsrs	r3, r3, #13
 8004434:	f003 0307 	and.w	r3, r3, #7
 8004438:	4903      	ldr	r1, [pc, #12]	; (8004448 <HAL_RCC_GetPCLK2Freq+0x24>)
 800443a:	5ccb      	ldrb	r3, [r1, r3]
 800443c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004440:	4618      	mov	r0, r3
 8004442:	bd80      	pop	{r7, pc}
 8004444:	40023800 	.word	0x40023800
 8004448:	0800ca74 	.word	0x0800ca74

0800444c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b088      	sub	sp, #32
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004454:	2300      	movs	r3, #0
 8004456:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004458:	2300      	movs	r3, #0
 800445a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800445c:	2300      	movs	r3, #0
 800445e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004460:	2300      	movs	r3, #0
 8004462:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004464:	2300      	movs	r3, #0
 8004466:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	2b00      	cmp	r3, #0
 8004472:	d012      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004474:	4b69      	ldr	r3, [pc, #420]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	4a68      	ldr	r2, [pc, #416]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800447a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800447e:	6093      	str	r3, [r2, #8]
 8004480:	4b66      	ldr	r3, [pc, #408]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004482:	689a      	ldr	r2, [r3, #8]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004488:	4964      	ldr	r1, [pc, #400]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800448a:	4313      	orrs	r3, r2
 800448c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004496:	2301      	movs	r3, #1
 8004498:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d017      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044a6:	4b5d      	ldr	r3, [pc, #372]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b4:	4959      	ldr	r1, [pc, #356]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044c4:	d101      	bne.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80044c6:	2301      	movs	r3, #1
 80044c8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d101      	bne.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80044d2:	2301      	movs	r3, #1
 80044d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d017      	beq.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80044e2:	4b4e      	ldr	r3, [pc, #312]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f0:	494a      	ldr	r1, [pc, #296]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004500:	d101      	bne.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004502:	2301      	movs	r3, #1
 8004504:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450a:	2b00      	cmp	r3, #0
 800450c:	d101      	bne.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800450e:	2301      	movs	r3, #1
 8004510:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800451e:	2301      	movs	r3, #1
 8004520:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0320 	and.w	r3, r3, #32
 800452a:	2b00      	cmp	r3, #0
 800452c:	f000 808b 	beq.w	8004646 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004530:	4b3a      	ldr	r3, [pc, #232]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004534:	4a39      	ldr	r2, [pc, #228]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800453a:	6413      	str	r3, [r2, #64]	; 0x40
 800453c:	4b37      	ldr	r3, [pc, #220]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800453e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004544:	60bb      	str	r3, [r7, #8]
 8004546:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004548:	4b35      	ldr	r3, [pc, #212]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a34      	ldr	r2, [pc, #208]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800454e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004552:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004554:	f7fe feb6 	bl	80032c4 <HAL_GetTick>
 8004558:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800455a:	e008      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800455c:	f7fe feb2 	bl	80032c4 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b64      	cmp	r3, #100	; 0x64
 8004568:	d901      	bls.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e357      	b.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800456e:	4b2c      	ldr	r3, [pc, #176]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004576:	2b00      	cmp	r3, #0
 8004578:	d0f0      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800457a:	4b28      	ldr	r3, [pc, #160]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800457c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800457e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004582:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d035      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004592:	693a      	ldr	r2, [r7, #16]
 8004594:	429a      	cmp	r2, r3
 8004596:	d02e      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004598:	4b20      	ldr	r3, [pc, #128]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800459a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800459c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045a0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045a2:	4b1e      	ldr	r3, [pc, #120]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a6:	4a1d      	ldr	r2, [pc, #116]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045ac:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045ae:	4b1b      	ldr	r3, [pc, #108]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b2:	4a1a      	ldr	r2, [pc, #104]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045b8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80045ba:	4a18      	ldr	r2, [pc, #96]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80045c0:	4b16      	ldr	r3, [pc, #88]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d114      	bne.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045cc:	f7fe fe7a 	bl	80032c4 <HAL_GetTick>
 80045d0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d2:	e00a      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045d4:	f7fe fe76 	bl	80032c4 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d901      	bls.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e319      	b.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ea:	4b0c      	ldr	r3, [pc, #48]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d0ee      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004602:	d111      	bne.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004604:	4b05      	ldr	r3, [pc, #20]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004610:	4b04      	ldr	r3, [pc, #16]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004612:	400b      	ands	r3, r1
 8004614:	4901      	ldr	r1, [pc, #4]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004616:	4313      	orrs	r3, r2
 8004618:	608b      	str	r3, [r1, #8]
 800461a:	e00b      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800461c:	40023800 	.word	0x40023800
 8004620:	40007000 	.word	0x40007000
 8004624:	0ffffcff 	.word	0x0ffffcff
 8004628:	4baa      	ldr	r3, [pc, #680]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	4aa9      	ldr	r2, [pc, #676]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800462e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004632:	6093      	str	r3, [r2, #8]
 8004634:	4ba7      	ldr	r3, [pc, #668]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004636:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004640:	49a4      	ldr	r1, [pc, #656]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004642:	4313      	orrs	r3, r2
 8004644:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0310 	and.w	r3, r3, #16
 800464e:	2b00      	cmp	r3, #0
 8004650:	d010      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004652:	4ba0      	ldr	r3, [pc, #640]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004654:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004658:	4a9e      	ldr	r2, [pc, #632]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800465a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800465e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004662:	4b9c      	ldr	r3, [pc, #624]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004664:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466c:	4999      	ldr	r1, [pc, #612]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800466e:	4313      	orrs	r3, r2
 8004670:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00a      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004680:	4b94      	ldr	r3, [pc, #592]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004686:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800468e:	4991      	ldr	r1, [pc, #580]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004690:	4313      	orrs	r3, r2
 8004692:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00a      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046a2:	4b8c      	ldr	r3, [pc, #560]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046b0:	4988      	ldr	r1, [pc, #544]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00a      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046c4:	4b83      	ldr	r3, [pc, #524]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046d2:	4980      	ldr	r1, [pc, #512]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00a      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80046e6:	4b7b      	ldr	r3, [pc, #492]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f4:	4977      	ldr	r1, [pc, #476]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00a      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004708:	4b72      	ldr	r3, [pc, #456]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800470a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800470e:	f023 0203 	bic.w	r2, r3, #3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004716:	496f      	ldr	r1, [pc, #444]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004718:	4313      	orrs	r3, r2
 800471a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00a      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800472a:	4b6a      	ldr	r3, [pc, #424]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800472c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004730:	f023 020c 	bic.w	r2, r3, #12
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004738:	4966      	ldr	r1, [pc, #408]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800473a:	4313      	orrs	r3, r2
 800473c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00a      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800474c:	4b61      	ldr	r3, [pc, #388]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800474e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004752:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800475a:	495e      	ldr	r1, [pc, #376]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800475c:	4313      	orrs	r3, r2
 800475e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00a      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800476e:	4b59      	ldr	r3, [pc, #356]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004774:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800477c:	4955      	ldr	r1, [pc, #340]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800477e:	4313      	orrs	r3, r2
 8004780:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00a      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004790:	4b50      	ldr	r3, [pc, #320]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004796:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800479e:	494d      	ldr	r1, [pc, #308]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00a      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80047b2:	4b48      	ldr	r3, [pc, #288]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c0:	4944      	ldr	r1, [pc, #272]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00a      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80047d4:	4b3f      	ldr	r3, [pc, #252]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047da:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047e2:	493c      	ldr	r1, [pc, #240]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00a      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80047f6:	4b37      	ldr	r3, [pc, #220]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004804:	4933      	ldr	r1, [pc, #204]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004806:	4313      	orrs	r3, r2
 8004808:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00a      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004818:	4b2e      	ldr	r3, [pc, #184]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800481a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800481e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004826:	492b      	ldr	r1, [pc, #172]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004828:	4313      	orrs	r3, r2
 800482a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d011      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800483a:	4b26      	ldr	r3, [pc, #152]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800483c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004840:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004848:	4922      	ldr	r1, [pc, #136]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800484a:	4313      	orrs	r3, r2
 800484c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004854:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004858:	d101      	bne.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800485a:	2301      	movs	r3, #1
 800485c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0308 	and.w	r3, r3, #8
 8004866:	2b00      	cmp	r3, #0
 8004868:	d001      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800486a:	2301      	movs	r3, #1
 800486c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00a      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800487a:	4b16      	ldr	r3, [pc, #88]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800487c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004880:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004888:	4912      	ldr	r1, [pc, #72]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800488a:	4313      	orrs	r3, r2
 800488c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00b      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800489c:	4b0d      	ldr	r3, [pc, #52]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800489e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048ac:	4909      	ldr	r1, [pc, #36]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d006      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	f000 80d9 	beq.w	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80048c8:	4b02      	ldr	r3, [pc, #8]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a01      	ldr	r2, [pc, #4]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80048d2:	e001      	b.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80048d4:	40023800 	.word	0x40023800
 80048d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048da:	f7fe fcf3 	bl	80032c4 <HAL_GetTick>
 80048de:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048e0:	e008      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80048e2:	f7fe fcef 	bl	80032c4 <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	2b64      	cmp	r3, #100	; 0x64
 80048ee:	d901      	bls.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e194      	b.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048f4:	4b6c      	ldr	r3, [pc, #432]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1f0      	bne.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0301 	and.w	r3, r3, #1
 8004908:	2b00      	cmp	r3, #0
 800490a:	d021      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004910:	2b00      	cmp	r3, #0
 8004912:	d11d      	bne.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004914:	4b64      	ldr	r3, [pc, #400]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004916:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800491a:	0c1b      	lsrs	r3, r3, #16
 800491c:	f003 0303 	and.w	r3, r3, #3
 8004920:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004922:	4b61      	ldr	r3, [pc, #388]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004924:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004928:	0e1b      	lsrs	r3, r3, #24
 800492a:	f003 030f 	and.w	r3, r3, #15
 800492e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	019a      	lsls	r2, r3, #6
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	041b      	lsls	r3, r3, #16
 800493a:	431a      	orrs	r2, r3
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	061b      	lsls	r3, r3, #24
 8004940:	431a      	orrs	r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	071b      	lsls	r3, r3, #28
 8004948:	4957      	ldr	r1, [pc, #348]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800494a:	4313      	orrs	r3, r2
 800494c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d004      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004960:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004964:	d00a      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800496e:	2b00      	cmp	r3, #0
 8004970:	d02e      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004976:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800497a:	d129      	bne.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800497c:	4b4a      	ldr	r3, [pc, #296]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800497e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004982:	0c1b      	lsrs	r3, r3, #16
 8004984:	f003 0303 	and.w	r3, r3, #3
 8004988:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800498a:	4b47      	ldr	r3, [pc, #284]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800498c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004990:	0f1b      	lsrs	r3, r3, #28
 8004992:	f003 0307 	and.w	r3, r3, #7
 8004996:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	019a      	lsls	r2, r3, #6
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	041b      	lsls	r3, r3, #16
 80049a2:	431a      	orrs	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	061b      	lsls	r3, r3, #24
 80049aa:	431a      	orrs	r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	071b      	lsls	r3, r3, #28
 80049b0:	493d      	ldr	r1, [pc, #244]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80049b8:	4b3b      	ldr	r3, [pc, #236]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049be:	f023 021f 	bic.w	r2, r3, #31
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c6:	3b01      	subs	r3, #1
 80049c8:	4937      	ldr	r1, [pc, #220]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d01d      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80049dc:	4b32      	ldr	r3, [pc, #200]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049e2:	0e1b      	lsrs	r3, r3, #24
 80049e4:	f003 030f 	and.w	r3, r3, #15
 80049e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80049ea:	4b2f      	ldr	r3, [pc, #188]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049f0:	0f1b      	lsrs	r3, r3, #28
 80049f2:	f003 0307 	and.w	r3, r3, #7
 80049f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	019a      	lsls	r2, r3, #6
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	041b      	lsls	r3, r3, #16
 8004a04:	431a      	orrs	r2, r3
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	061b      	lsls	r3, r3, #24
 8004a0a:	431a      	orrs	r2, r3
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	071b      	lsls	r3, r3, #28
 8004a10:	4925      	ldr	r1, [pc, #148]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d011      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	019a      	lsls	r2, r3, #6
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	041b      	lsls	r3, r3, #16
 8004a30:	431a      	orrs	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	061b      	lsls	r3, r3, #24
 8004a38:	431a      	orrs	r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	071b      	lsls	r3, r3, #28
 8004a40:	4919      	ldr	r1, [pc, #100]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a48:	4b17      	ldr	r3, [pc, #92]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a16      	ldr	r2, [pc, #88]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a4e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a54:	f7fe fc36 	bl	80032c4 <HAL_GetTick>
 8004a58:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a5a:	e008      	b.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a5c:	f7fe fc32 	bl	80032c4 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b64      	cmp	r3, #100	; 0x64
 8004a68:	d901      	bls.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e0d7      	b.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a6e:	4b0e      	ldr	r3, [pc, #56]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d0f0      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	f040 80cd 	bne.w	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004a82:	4b09      	ldr	r3, [pc, #36]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a08      	ldr	r2, [pc, #32]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a8e:	f7fe fc19 	bl	80032c4 <HAL_GetTick>
 8004a92:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a94:	e00a      	b.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004a96:	f7fe fc15 	bl	80032c4 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	2b64      	cmp	r3, #100	; 0x64
 8004aa2:	d903      	bls.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e0ba      	b.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004aa8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004aac:	4b5e      	ldr	r3, [pc, #376]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ab4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ab8:	d0ed      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d003      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d009      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d02e      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d12a      	bne.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004ae2:	4b51      	ldr	r3, [pc, #324]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae8:	0c1b      	lsrs	r3, r3, #16
 8004aea:	f003 0303 	and.w	r3, r3, #3
 8004aee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004af0:	4b4d      	ldr	r3, [pc, #308]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af6:	0f1b      	lsrs	r3, r3, #28
 8004af8:	f003 0307 	and.w	r3, r3, #7
 8004afc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	695b      	ldr	r3, [r3, #20]
 8004b02:	019a      	lsls	r2, r3, #6
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	041b      	lsls	r3, r3, #16
 8004b08:	431a      	orrs	r2, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	061b      	lsls	r3, r3, #24
 8004b10:	431a      	orrs	r2, r3
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	071b      	lsls	r3, r3, #28
 8004b16:	4944      	ldr	r1, [pc, #272]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004b1e:	4b42      	ldr	r3, [pc, #264]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b24:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	021b      	lsls	r3, r3, #8
 8004b30:	493d      	ldr	r1, [pc, #244]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d022      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b4c:	d11d      	bne.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b4e:	4b36      	ldr	r3, [pc, #216]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b54:	0e1b      	lsrs	r3, r3, #24
 8004b56:	f003 030f 	and.w	r3, r3, #15
 8004b5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b5c:	4b32      	ldr	r3, [pc, #200]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b62:	0f1b      	lsrs	r3, r3, #28
 8004b64:	f003 0307 	and.w	r3, r3, #7
 8004b68:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	695b      	ldr	r3, [r3, #20]
 8004b6e:	019a      	lsls	r2, r3, #6
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a1b      	ldr	r3, [r3, #32]
 8004b74:	041b      	lsls	r3, r3, #16
 8004b76:	431a      	orrs	r2, r3
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	061b      	lsls	r3, r3, #24
 8004b7c:	431a      	orrs	r2, r3
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	071b      	lsls	r3, r3, #28
 8004b82:	4929      	ldr	r1, [pc, #164]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0308 	and.w	r3, r3, #8
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d028      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b96:	4b24      	ldr	r3, [pc, #144]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b9c:	0e1b      	lsrs	r3, r3, #24
 8004b9e:	f003 030f 	and.w	r3, r3, #15
 8004ba2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004ba4:	4b20      	ldr	r3, [pc, #128]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004baa:	0c1b      	lsrs	r3, r3, #16
 8004bac:	f003 0303 	and.w	r3, r3, #3
 8004bb0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	019a      	lsls	r2, r3, #6
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	041b      	lsls	r3, r3, #16
 8004bbc:	431a      	orrs	r2, r3
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	061b      	lsls	r3, r3, #24
 8004bc2:	431a      	orrs	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	69db      	ldr	r3, [r3, #28]
 8004bc8:	071b      	lsls	r3, r3, #28
 8004bca:	4917      	ldr	r1, [pc, #92]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004bd2:	4b15      	ldr	r3, [pc, #84]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bd8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be0:	4911      	ldr	r1, [pc, #68]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004be8:	4b0f      	ldr	r3, [pc, #60]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a0e      	ldr	r2, [pc, #56]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bf2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bf4:	f7fe fb66 	bl	80032c4 <HAL_GetTick>
 8004bf8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004bfa:	e008      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004bfc:	f7fe fb62 	bl	80032c4 <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	2b64      	cmp	r3, #100	; 0x64
 8004c08:	d901      	bls.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e007      	b.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c0e:	4b06      	ldr	r3, [pc, #24]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c1a:	d1ef      	bne.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3720      	adds	r7, #32
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	40023800 	.word	0x40023800

08004c2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d101      	bne.n	8004c3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e09d      	b.n	8004d7a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d108      	bne.n	8004c58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c4e:	d009      	beq.n	8004c64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	61da      	str	r2, [r3, #28]
 8004c56:	e005      	b.n	8004c64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d106      	bne.n	8004c84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f7fd ff0e 	bl	8002aa0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2202      	movs	r2, #2
 8004c88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c9a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ca4:	d902      	bls.n	8004cac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	60fb      	str	r3, [r7, #12]
 8004caa:	e002      	b.n	8004cb2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004cac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004cb0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004cba:	d007      	beq.n	8004ccc <HAL_SPI_Init+0xa0>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004cc4:	d002      	beq.n	8004ccc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004cdc:	431a      	orrs	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	f003 0302 	and.w	r3, r3, #2
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	695b      	ldr	r3, [r3, #20]
 8004cec:	f003 0301 	and.w	r3, r3, #1
 8004cf0:	431a      	orrs	r2, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	699b      	ldr	r3, [r3, #24]
 8004cf6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cfa:	431a      	orrs	r2, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	69db      	ldr	r3, [r3, #28]
 8004d00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d04:	431a      	orrs	r2, r3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d0e:	ea42 0103 	orr.w	r1, r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d16:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	0c1b      	lsrs	r3, r3, #16
 8004d28:	f003 0204 	and.w	r2, r3, #4
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d30:	f003 0310 	and.w	r3, r3, #16
 8004d34:	431a      	orrs	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d3a:	f003 0308 	and.w	r3, r3, #8
 8004d3e:	431a      	orrs	r2, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004d48:	ea42 0103 	orr.w	r1, r2, r3
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	430a      	orrs	r2, r1
 8004d58:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	69da      	ldr	r2, [r3, #28]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3710      	adds	r7, #16
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b088      	sub	sp, #32
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	60f8      	str	r0, [r7, #12]
 8004d8a:	60b9      	str	r1, [r7, #8]
 8004d8c:	603b      	str	r3, [r7, #0]
 8004d8e:	4613      	mov	r3, r2
 8004d90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d92:	2300      	movs	r3, #0
 8004d94:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d101      	bne.n	8004da4 <HAL_SPI_Transmit+0x22>
 8004da0:	2302      	movs	r3, #2
 8004da2:	e158      	b.n	8005056 <HAL_SPI_Transmit+0x2d4>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004dac:	f7fe fa8a 	bl	80032c4 <HAL_GetTick>
 8004db0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004db2:	88fb      	ldrh	r3, [r7, #6]
 8004db4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d002      	beq.n	8004dc8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004dc2:	2302      	movs	r3, #2
 8004dc4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004dc6:	e13d      	b.n	8005044 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d002      	beq.n	8004dd4 <HAL_SPI_Transmit+0x52>
 8004dce:	88fb      	ldrh	r3, [r7, #6]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d102      	bne.n	8004dda <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004dd8:	e134      	b.n	8005044 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2203      	movs	r2, #3
 8004dde:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	68ba      	ldr	r2, [r7, #8]
 8004dec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	88fa      	ldrh	r2, [r7, #6]
 8004df2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	88fa      	ldrh	r2, [r7, #6]
 8004df8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2200      	movs	r2, #0
 8004e14:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e24:	d10f      	bne.n	8004e46 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e34:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e44:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e50:	2b40      	cmp	r3, #64	; 0x40
 8004e52:	d007      	beq.n	8004e64 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e62:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e6c:	d94b      	bls.n	8004f06 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d002      	beq.n	8004e7c <HAL_SPI_Transmit+0xfa>
 8004e76:	8afb      	ldrh	r3, [r7, #22]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d13e      	bne.n	8004efa <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e80:	881a      	ldrh	r2, [r3, #0]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e8c:	1c9a      	adds	r2, r3, #2
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	b29a      	uxth	r2, r3
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004ea0:	e02b      	b.n	8004efa <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	f003 0302 	and.w	r3, r3, #2
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d112      	bne.n	8004ed6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb4:	881a      	ldrh	r2, [r3, #0]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec0:	1c9a      	adds	r2, r3, #2
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	b29a      	uxth	r2, r3
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ed4:	e011      	b.n	8004efa <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ed6:	f7fe f9f5 	bl	80032c4 <HAL_GetTick>
 8004eda:	4602      	mov	r2, r0
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	683a      	ldr	r2, [r7, #0]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d803      	bhi.n	8004eee <HAL_SPI_Transmit+0x16c>
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004eec:	d102      	bne.n	8004ef4 <HAL_SPI_Transmit+0x172>
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d102      	bne.n	8004efa <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004ef8:	e0a4      	b.n	8005044 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1ce      	bne.n	8004ea2 <HAL_SPI_Transmit+0x120>
 8004f04:	e07c      	b.n	8005000 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d002      	beq.n	8004f14 <HAL_SPI_Transmit+0x192>
 8004f0e:	8afb      	ldrh	r3, [r7, #22]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d170      	bne.n	8004ff6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d912      	bls.n	8004f44 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f22:	881a      	ldrh	r2, [r3, #0]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f2e:	1c9a      	adds	r2, r3, #2
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	3b02      	subs	r3, #2
 8004f3c:	b29a      	uxth	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f42:	e058      	b.n	8004ff6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	330c      	adds	r3, #12
 8004f4e:	7812      	ldrb	r2, [r2, #0]
 8004f50:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f56:	1c5a      	adds	r2, r3, #1
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	3b01      	subs	r3, #1
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004f6a:	e044      	b.n	8004ff6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d12b      	bne.n	8004fd2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d912      	bls.n	8004faa <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f88:	881a      	ldrh	r2, [r3, #0]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f94:	1c9a      	adds	r2, r3, #2
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	3b02      	subs	r3, #2
 8004fa2:	b29a      	uxth	r2, r3
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004fa8:	e025      	b.n	8004ff6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	330c      	adds	r3, #12
 8004fb4:	7812      	ldrb	r2, [r2, #0]
 8004fb6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fbc:	1c5a      	adds	r2, r3, #1
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	3b01      	subs	r3, #1
 8004fca:	b29a      	uxth	r2, r3
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004fd0:	e011      	b.n	8004ff6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fd2:	f7fe f977 	bl	80032c4 <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	683a      	ldr	r2, [r7, #0]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d803      	bhi.n	8004fea <HAL_SPI_Transmit+0x268>
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fe8:	d102      	bne.n	8004ff0 <HAL_SPI_Transmit+0x26e>
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d102      	bne.n	8004ff6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004ff4:	e026      	b.n	8005044 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d1b5      	bne.n	8004f6c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005000:	69ba      	ldr	r2, [r7, #24]
 8005002:	6839      	ldr	r1, [r7, #0]
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	f000 fd07 	bl	8005a18 <SPI_EndRxTxTransaction>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d002      	beq.n	8005016 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2220      	movs	r2, #32
 8005014:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d10a      	bne.n	8005034 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800501e:	2300      	movs	r3, #0
 8005020:	613b      	str	r3, [r7, #16]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	613b      	str	r3, [r7, #16]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	613b      	str	r3, [r7, #16]
 8005032:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005038:	2b00      	cmp	r3, #0
 800503a:	d002      	beq.n	8005042 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	77fb      	strb	r3, [r7, #31]
 8005040:	e000      	b.n	8005044 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005042:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005054:	7ffb      	ldrb	r3, [r7, #31]
}
 8005056:	4618      	mov	r0, r3
 8005058:	3720      	adds	r7, #32
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}

0800505e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800505e:	b580      	push	{r7, lr}
 8005060:	b088      	sub	sp, #32
 8005062:	af02      	add	r7, sp, #8
 8005064:	60f8      	str	r0, [r7, #12]
 8005066:	60b9      	str	r1, [r7, #8]
 8005068:	603b      	str	r3, [r7, #0]
 800506a:	4613      	mov	r3, r2
 800506c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800506e:	2300      	movs	r3, #0
 8005070:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800507a:	d112      	bne.n	80050a2 <HAL_SPI_Receive+0x44>
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d10e      	bne.n	80050a2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2204      	movs	r2, #4
 8005088:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800508c:	88fa      	ldrh	r2, [r7, #6]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	9300      	str	r3, [sp, #0]
 8005092:	4613      	mov	r3, r2
 8005094:	68ba      	ldr	r2, [r7, #8]
 8005096:	68b9      	ldr	r1, [r7, #8]
 8005098:	68f8      	ldr	r0, [r7, #12]
 800509a:	f000 f910 	bl	80052be <HAL_SPI_TransmitReceive>
 800509e:	4603      	mov	r3, r0
 80050a0:	e109      	b.n	80052b6 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d101      	bne.n	80050b0 <HAL_SPI_Receive+0x52>
 80050ac:	2302      	movs	r3, #2
 80050ae:	e102      	b.n	80052b6 <HAL_SPI_Receive+0x258>
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050b8:	f7fe f904 	bl	80032c4 <HAL_GetTick>
 80050bc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d002      	beq.n	80050d0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80050ca:	2302      	movs	r3, #2
 80050cc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80050ce:	e0e9      	b.n	80052a4 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d002      	beq.n	80050dc <HAL_SPI_Receive+0x7e>
 80050d6:	88fb      	ldrh	r3, [r7, #6]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d102      	bne.n	80050e2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	75fb      	strb	r3, [r7, #23]
    goto error;
 80050e0:	e0e0      	b.n	80052a4 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2204      	movs	r2, #4
 80050e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2200      	movs	r2, #0
 80050ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	68ba      	ldr	r2, [r7, #8]
 80050f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	88fa      	ldrh	r2, [r7, #6]
 80050fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	88fa      	ldrh	r2, [r7, #6]
 8005102:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2200      	movs	r2, #0
 800510a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2200      	movs	r2, #0
 8005110:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2200      	movs	r2, #0
 8005116:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2200      	movs	r2, #0
 800511c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2200      	movs	r2, #0
 8005122:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800512c:	d908      	bls.n	8005140 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	685a      	ldr	r2, [r3, #4]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800513c:	605a      	str	r2, [r3, #4]
 800513e:	e007      	b.n	8005150 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	685a      	ldr	r2, [r3, #4]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800514e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005158:	d10f      	bne.n	800517a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005168:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005178:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005184:	2b40      	cmp	r3, #64	; 0x40
 8005186:	d007      	beq.n	8005198 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005196:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80051a0:	d867      	bhi.n	8005272 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80051a2:	e030      	b.n	8005206 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	f003 0301 	and.w	r3, r3, #1
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d117      	bne.n	80051e2 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f103 020c 	add.w	r2, r3, #12
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051be:	7812      	ldrb	r2, [r2, #0]
 80051c0:	b2d2      	uxtb	r2, r2
 80051c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c8:	1c5a      	adds	r2, r3, #1
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	3b01      	subs	r3, #1
 80051d8:	b29a      	uxth	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80051e0:	e011      	b.n	8005206 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051e2:	f7fe f86f 	bl	80032c4 <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	683a      	ldr	r2, [r7, #0]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d803      	bhi.n	80051fa <HAL_SPI_Receive+0x19c>
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051f8:	d102      	bne.n	8005200 <HAL_SPI_Receive+0x1a2>
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d102      	bne.n	8005206 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005204:	e04e      	b.n	80052a4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800520c:	b29b      	uxth	r3, r3
 800520e:	2b00      	cmp	r3, #0
 8005210:	d1c8      	bne.n	80051a4 <HAL_SPI_Receive+0x146>
 8005212:	e034      	b.n	800527e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b01      	cmp	r3, #1
 8005220:	d115      	bne.n	800524e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68da      	ldr	r2, [r3, #12]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522c:	b292      	uxth	r2, r2
 800522e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005234:	1c9a      	adds	r2, r3, #2
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005240:	b29b      	uxth	r3, r3
 8005242:	3b01      	subs	r3, #1
 8005244:	b29a      	uxth	r2, r3
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800524c:	e011      	b.n	8005272 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800524e:	f7fe f839 	bl	80032c4 <HAL_GetTick>
 8005252:	4602      	mov	r2, r0
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	683a      	ldr	r2, [r7, #0]
 800525a:	429a      	cmp	r2, r3
 800525c:	d803      	bhi.n	8005266 <HAL_SPI_Receive+0x208>
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005264:	d102      	bne.n	800526c <HAL_SPI_Receive+0x20e>
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d102      	bne.n	8005272 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800526c:	2303      	movs	r3, #3
 800526e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005270:	e018      	b.n	80052a4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005278:	b29b      	uxth	r3, r3
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1ca      	bne.n	8005214 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800527e:	693a      	ldr	r2, [r7, #16]
 8005280:	6839      	ldr	r1, [r7, #0]
 8005282:	68f8      	ldr	r0, [r7, #12]
 8005284:	f000 fb4c 	bl	8005920 <SPI_EndRxTransaction>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d002      	beq.n	8005294 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2220      	movs	r2, #32
 8005292:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005298:	2b00      	cmp	r3, #0
 800529a:	d002      	beq.n	80052a2 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	75fb      	strb	r3, [r7, #23]
 80052a0:	e000      	b.n	80052a4 <HAL_SPI_Receive+0x246>
  }

error :
 80052a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80052b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3718      	adds	r7, #24
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}

080052be <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80052be:	b580      	push	{r7, lr}
 80052c0:	b08a      	sub	sp, #40	; 0x28
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	60f8      	str	r0, [r7, #12]
 80052c6:	60b9      	str	r1, [r7, #8]
 80052c8:	607a      	str	r2, [r7, #4]
 80052ca:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80052cc:	2301      	movs	r3, #1
 80052ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80052d0:	2300      	movs	r3, #0
 80052d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d101      	bne.n	80052e4 <HAL_SPI_TransmitReceive+0x26>
 80052e0:	2302      	movs	r3, #2
 80052e2:	e1fb      	b.n	80056dc <HAL_SPI_TransmitReceive+0x41e>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80052ec:	f7fd ffea 	bl	80032c4 <HAL_GetTick>
 80052f0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80052f8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005300:	887b      	ldrh	r3, [r7, #2]
 8005302:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005304:	887b      	ldrh	r3, [r7, #2]
 8005306:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005308:	7efb      	ldrb	r3, [r7, #27]
 800530a:	2b01      	cmp	r3, #1
 800530c:	d00e      	beq.n	800532c <HAL_SPI_TransmitReceive+0x6e>
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005314:	d106      	bne.n	8005324 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d102      	bne.n	8005324 <HAL_SPI_TransmitReceive+0x66>
 800531e:	7efb      	ldrb	r3, [r7, #27]
 8005320:	2b04      	cmp	r3, #4
 8005322:	d003      	beq.n	800532c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005324:	2302      	movs	r3, #2
 8005326:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800532a:	e1cd      	b.n	80056c8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d005      	beq.n	800533e <HAL_SPI_TransmitReceive+0x80>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d002      	beq.n	800533e <HAL_SPI_TransmitReceive+0x80>
 8005338:	887b      	ldrh	r3, [r7, #2]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d103      	bne.n	8005346 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005344:	e1c0      	b.n	80056c8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800534c:	b2db      	uxtb	r3, r3
 800534e:	2b04      	cmp	r3, #4
 8005350:	d003      	beq.n	800535a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2205      	movs	r2, #5
 8005356:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	887a      	ldrh	r2, [r7, #2]
 800536a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	887a      	ldrh	r2, [r7, #2]
 8005372:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	68ba      	ldr	r2, [r7, #8]
 800537a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	887a      	ldrh	r2, [r7, #2]
 8005380:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	887a      	ldrh	r2, [r7, #2]
 8005386:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2200      	movs	r2, #0
 800538c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2200      	movs	r2, #0
 8005392:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800539c:	d802      	bhi.n	80053a4 <HAL_SPI_TransmitReceive+0xe6>
 800539e:	8a3b      	ldrh	r3, [r7, #16]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d908      	bls.n	80053b6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	685a      	ldr	r2, [r3, #4]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80053b2:	605a      	str	r2, [r3, #4]
 80053b4:	e007      	b.n	80053c6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	685a      	ldr	r2, [r3, #4]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80053c4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053d0:	2b40      	cmp	r3, #64	; 0x40
 80053d2:	d007      	beq.n	80053e4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053ec:	d97c      	bls.n	80054e8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d002      	beq.n	80053fc <HAL_SPI_TransmitReceive+0x13e>
 80053f6:	8a7b      	ldrh	r3, [r7, #18]
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d169      	bne.n	80054d0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005400:	881a      	ldrh	r2, [r3, #0]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540c:	1c9a      	adds	r2, r3, #2
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005416:	b29b      	uxth	r3, r3
 8005418:	3b01      	subs	r3, #1
 800541a:	b29a      	uxth	r2, r3
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005420:	e056      	b.n	80054d0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	f003 0302 	and.w	r3, r3, #2
 800542c:	2b02      	cmp	r3, #2
 800542e:	d11b      	bne.n	8005468 <HAL_SPI_TransmitReceive+0x1aa>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005434:	b29b      	uxth	r3, r3
 8005436:	2b00      	cmp	r3, #0
 8005438:	d016      	beq.n	8005468 <HAL_SPI_TransmitReceive+0x1aa>
 800543a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543c:	2b01      	cmp	r3, #1
 800543e:	d113      	bne.n	8005468 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005444:	881a      	ldrh	r2, [r3, #0]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005450:	1c9a      	adds	r2, r3, #2
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800545a:	b29b      	uxth	r3, r3
 800545c:	3b01      	subs	r3, #1
 800545e:	b29a      	uxth	r2, r3
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005464:	2300      	movs	r3, #0
 8005466:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f003 0301 	and.w	r3, r3, #1
 8005472:	2b01      	cmp	r3, #1
 8005474:	d11c      	bne.n	80054b0 <HAL_SPI_TransmitReceive+0x1f2>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800547c:	b29b      	uxth	r3, r3
 800547e:	2b00      	cmp	r3, #0
 8005480:	d016      	beq.n	80054b0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68da      	ldr	r2, [r3, #12]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548c:	b292      	uxth	r2, r2
 800548e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005494:	1c9a      	adds	r2, r3, #2
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	3b01      	subs	r3, #1
 80054a4:	b29a      	uxth	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80054ac:	2301      	movs	r3, #1
 80054ae:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80054b0:	f7fd ff08 	bl	80032c4 <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054bc:	429a      	cmp	r2, r3
 80054be:	d807      	bhi.n	80054d0 <HAL_SPI_TransmitReceive+0x212>
 80054c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054c6:	d003      	beq.n	80054d0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80054c8:	2303      	movs	r3, #3
 80054ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80054ce:	e0fb      	b.n	80056c8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d1a3      	bne.n	8005422 <HAL_SPI_TransmitReceive+0x164>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d19d      	bne.n	8005422 <HAL_SPI_TransmitReceive+0x164>
 80054e6:	e0df      	b.n	80056a8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d003      	beq.n	80054f8 <HAL_SPI_TransmitReceive+0x23a>
 80054f0:	8a7b      	ldrh	r3, [r7, #18]
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	f040 80cb 	bne.w	800568e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d912      	bls.n	8005528 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005506:	881a      	ldrh	r2, [r3, #0]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005512:	1c9a      	adds	r2, r3, #2
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800551c:	b29b      	uxth	r3, r3
 800551e:	3b02      	subs	r3, #2
 8005520:	b29a      	uxth	r2, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005526:	e0b2      	b.n	800568e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	330c      	adds	r3, #12
 8005532:	7812      	ldrb	r2, [r2, #0]
 8005534:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800553a:	1c5a      	adds	r2, r3, #1
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005544:	b29b      	uxth	r3, r3
 8005546:	3b01      	subs	r3, #1
 8005548:	b29a      	uxth	r2, r3
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800554e:	e09e      	b.n	800568e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	f003 0302 	and.w	r3, r3, #2
 800555a:	2b02      	cmp	r3, #2
 800555c:	d134      	bne.n	80055c8 <HAL_SPI_TransmitReceive+0x30a>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005562:	b29b      	uxth	r3, r3
 8005564:	2b00      	cmp	r3, #0
 8005566:	d02f      	beq.n	80055c8 <HAL_SPI_TransmitReceive+0x30a>
 8005568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556a:	2b01      	cmp	r3, #1
 800556c:	d12c      	bne.n	80055c8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005572:	b29b      	uxth	r3, r3
 8005574:	2b01      	cmp	r3, #1
 8005576:	d912      	bls.n	800559e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557c:	881a      	ldrh	r2, [r3, #0]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005588:	1c9a      	adds	r2, r3, #2
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005592:	b29b      	uxth	r3, r3
 8005594:	3b02      	subs	r3, #2
 8005596:	b29a      	uxth	r2, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800559c:	e012      	b.n	80055c4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	330c      	adds	r3, #12
 80055a8:	7812      	ldrb	r2, [r2, #0]
 80055aa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b0:	1c5a      	adds	r2, r3, #1
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	3b01      	subs	r3, #1
 80055be:	b29a      	uxth	r2, r3
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80055c4:	2300      	movs	r3, #0
 80055c6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f003 0301 	and.w	r3, r3, #1
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d148      	bne.n	8005668 <HAL_SPI_TransmitReceive+0x3aa>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80055dc:	b29b      	uxth	r3, r3
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d042      	beq.n	8005668 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d923      	bls.n	8005636 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68da      	ldr	r2, [r3, #12]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f8:	b292      	uxth	r2, r2
 80055fa:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005600:	1c9a      	adds	r2, r3, #2
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800560c:	b29b      	uxth	r3, r3
 800560e:	3b02      	subs	r3, #2
 8005610:	b29a      	uxth	r2, r3
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800561e:	b29b      	uxth	r3, r3
 8005620:	2b01      	cmp	r3, #1
 8005622:	d81f      	bhi.n	8005664 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	685a      	ldr	r2, [r3, #4]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005632:	605a      	str	r2, [r3, #4]
 8005634:	e016      	b.n	8005664 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f103 020c 	add.w	r2, r3, #12
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005642:	7812      	ldrb	r2, [r2, #0]
 8005644:	b2d2      	uxtb	r2, r2
 8005646:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564c:	1c5a      	adds	r2, r3, #1
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005658:	b29b      	uxth	r3, r3
 800565a:	3b01      	subs	r3, #1
 800565c:	b29a      	uxth	r2, r3
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005664:	2301      	movs	r3, #1
 8005666:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005668:	f7fd fe2c 	bl	80032c4 <HAL_GetTick>
 800566c:	4602      	mov	r2, r0
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005674:	429a      	cmp	r2, r3
 8005676:	d803      	bhi.n	8005680 <HAL_SPI_TransmitReceive+0x3c2>
 8005678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800567a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800567e:	d102      	bne.n	8005686 <HAL_SPI_TransmitReceive+0x3c8>
 8005680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005682:	2b00      	cmp	r3, #0
 8005684:	d103      	bne.n	800568e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800568c:	e01c      	b.n	80056c8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005692:	b29b      	uxth	r3, r3
 8005694:	2b00      	cmp	r3, #0
 8005696:	f47f af5b 	bne.w	8005550 <HAL_SPI_TransmitReceive+0x292>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	f47f af54 	bne.w	8005550 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80056a8:	69fa      	ldr	r2, [r7, #28]
 80056aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056ac:	68f8      	ldr	r0, [r7, #12]
 80056ae:	f000 f9b3 	bl	8005a18 <SPI_EndRxTxTransaction>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d006      	beq.n	80056c6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2220      	movs	r2, #32
 80056c2:	661a      	str	r2, [r3, #96]	; 0x60
 80056c4:	e000      	b.n	80056c8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80056c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80056d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3728      	adds	r7, #40	; 0x28
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b088      	sub	sp, #32
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	60b9      	str	r1, [r7, #8]
 80056ee:	603b      	str	r3, [r7, #0]
 80056f0:	4613      	mov	r3, r2
 80056f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80056f4:	f7fd fde6 	bl	80032c4 <HAL_GetTick>
 80056f8:	4602      	mov	r2, r0
 80056fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fc:	1a9b      	subs	r3, r3, r2
 80056fe:	683a      	ldr	r2, [r7, #0]
 8005700:	4413      	add	r3, r2
 8005702:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005704:	f7fd fdde 	bl	80032c4 <HAL_GetTick>
 8005708:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800570a:	4b39      	ldr	r3, [pc, #228]	; (80057f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	015b      	lsls	r3, r3, #5
 8005710:	0d1b      	lsrs	r3, r3, #20
 8005712:	69fa      	ldr	r2, [r7, #28]
 8005714:	fb02 f303 	mul.w	r3, r2, r3
 8005718:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800571a:	e054      	b.n	80057c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005722:	d050      	beq.n	80057c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005724:	f7fd fdce 	bl	80032c4 <HAL_GetTick>
 8005728:	4602      	mov	r2, r0
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	69fa      	ldr	r2, [r7, #28]
 8005730:	429a      	cmp	r2, r3
 8005732:	d902      	bls.n	800573a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d13d      	bne.n	80057b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	685a      	ldr	r2, [r3, #4]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005748:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005752:	d111      	bne.n	8005778 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800575c:	d004      	beq.n	8005768 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005766:	d107      	bne.n	8005778 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005776:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800577c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005780:	d10f      	bne.n	80057a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005790:	601a      	str	r2, [r3, #0]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2201      	movs	r2, #1
 80057a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80057b2:	2303      	movs	r3, #3
 80057b4:	e017      	b.n	80057e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d101      	bne.n	80057c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80057bc:	2300      	movs	r3, #0
 80057be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	3b01      	subs	r3, #1
 80057c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	689a      	ldr	r2, [r3, #8]
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	4013      	ands	r3, r2
 80057d0:	68ba      	ldr	r2, [r7, #8]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	bf0c      	ite	eq
 80057d6:	2301      	moveq	r3, #1
 80057d8:	2300      	movne	r3, #0
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	461a      	mov	r2, r3
 80057de:	79fb      	ldrb	r3, [r7, #7]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d19b      	bne.n	800571c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3720      	adds	r7, #32
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	20000054 	.word	0x20000054

080057f4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b08a      	sub	sp, #40	; 0x28
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	60b9      	str	r1, [r7, #8]
 80057fe:	607a      	str	r2, [r7, #4]
 8005800:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005802:	2300      	movs	r3, #0
 8005804:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005806:	f7fd fd5d 	bl	80032c4 <HAL_GetTick>
 800580a:	4602      	mov	r2, r0
 800580c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800580e:	1a9b      	subs	r3, r3, r2
 8005810:	683a      	ldr	r2, [r7, #0]
 8005812:	4413      	add	r3, r2
 8005814:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005816:	f7fd fd55 	bl	80032c4 <HAL_GetTick>
 800581a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	330c      	adds	r3, #12
 8005822:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005824:	4b3d      	ldr	r3, [pc, #244]	; (800591c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	4613      	mov	r3, r2
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	4413      	add	r3, r2
 800582e:	00da      	lsls	r2, r3, #3
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	0d1b      	lsrs	r3, r3, #20
 8005834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005836:	fb02 f303 	mul.w	r3, r2, r3
 800583a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800583c:	e060      	b.n	8005900 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005844:	d107      	bne.n	8005856 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d104      	bne.n	8005856 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	b2db      	uxtb	r3, r3
 8005852:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005854:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800585c:	d050      	beq.n	8005900 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800585e:	f7fd fd31 	bl	80032c4 <HAL_GetTick>
 8005862:	4602      	mov	r2, r0
 8005864:	6a3b      	ldr	r3, [r7, #32]
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800586a:	429a      	cmp	r2, r3
 800586c:	d902      	bls.n	8005874 <SPI_WaitFifoStateUntilTimeout+0x80>
 800586e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005870:	2b00      	cmp	r3, #0
 8005872:	d13d      	bne.n	80058f0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	685a      	ldr	r2, [r3, #4]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005882:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800588c:	d111      	bne.n	80058b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005896:	d004      	beq.n	80058a2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058a0:	d107      	bne.n	80058b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058b0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058ba:	d10f      	bne.n	80058dc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058ca:	601a      	str	r2, [r3, #0]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058da:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80058ec:	2303      	movs	r3, #3
 80058ee:	e010      	b.n	8005912 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d101      	bne.n	80058fa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80058f6:	2300      	movs	r3, #0
 80058f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	3b01      	subs	r3, #1
 80058fe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	689a      	ldr	r2, [r3, #8]
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	4013      	ands	r3, r2
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	429a      	cmp	r2, r3
 800590e:	d196      	bne.n	800583e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3728      	adds	r7, #40	; 0x28
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	20000054 	.word	0x20000054

08005920 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b088      	sub	sp, #32
 8005924:	af02      	add	r7, sp, #8
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005934:	d111      	bne.n	800595a <SPI_EndRxTransaction+0x3a>
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800593e:	d004      	beq.n	800594a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005948:	d107      	bne.n	800595a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005958:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005962:	d112      	bne.n	800598a <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	9300      	str	r3, [sp, #0]
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	2200      	movs	r2, #0
 800596c:	2180      	movs	r1, #128	; 0x80
 800596e:	68f8      	ldr	r0, [r7, #12]
 8005970:	f7ff feb8 	bl	80056e4 <SPI_WaitFlagStateUntilTimeout>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d021      	beq.n	80059be <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800597e:	f043 0220 	orr.w	r2, r3, #32
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005986:	2303      	movs	r3, #3
 8005988:	e03d      	b.n	8005a06 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800598a:	4b21      	ldr	r3, [pc, #132]	; (8005a10 <SPI_EndRxTransaction+0xf0>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a21      	ldr	r2, [pc, #132]	; (8005a14 <SPI_EndRxTransaction+0xf4>)
 8005990:	fba2 2303 	umull	r2, r3, r2, r3
 8005994:	0d5b      	lsrs	r3, r3, #21
 8005996:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800599a:	fb02 f303 	mul.w	r3, r2, r3
 800599e:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00a      	beq.n	80059bc <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	3b01      	subs	r3, #1
 80059aa:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059b6:	2b80      	cmp	r3, #128	; 0x80
 80059b8:	d0f2      	beq.n	80059a0 <SPI_EndRxTransaction+0x80>
 80059ba:	e000      	b.n	80059be <SPI_EndRxTransaction+0x9e>
        break;
 80059bc:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059c6:	d11d      	bne.n	8005a04 <SPI_EndRxTransaction+0xe4>
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059d0:	d004      	beq.n	80059dc <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059da:	d113      	bne.n	8005a04 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	9300      	str	r3, [sp, #0]
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80059e8:	68f8      	ldr	r0, [r7, #12]
 80059ea:	f7ff ff03 	bl	80057f4 <SPI_WaitFifoStateUntilTimeout>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d007      	beq.n	8005a04 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059f8:	f043 0220 	orr.w	r2, r3, #32
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005a00:	2303      	movs	r3, #3
 8005a02:	e000      	b.n	8005a06 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3718      	adds	r7, #24
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	20000054 	.word	0x20000054
 8005a14:	165e9f81 	.word	0x165e9f81

08005a18 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b088      	sub	sp, #32
 8005a1c:	af02      	add	r7, sp, #8
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	9300      	str	r3, [sp, #0]
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005a30:	68f8      	ldr	r0, [r7, #12]
 8005a32:	f7ff fedf 	bl	80057f4 <SPI_WaitFifoStateUntilTimeout>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d007      	beq.n	8005a4c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a40:	f043 0220 	orr.w	r2, r3, #32
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e046      	b.n	8005ada <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005a4c:	4b25      	ldr	r3, [pc, #148]	; (8005ae4 <SPI_EndRxTxTransaction+0xcc>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a25      	ldr	r2, [pc, #148]	; (8005ae8 <SPI_EndRxTxTransaction+0xd0>)
 8005a52:	fba2 2303 	umull	r2, r3, r2, r3
 8005a56:	0d5b      	lsrs	r3, r3, #21
 8005a58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a5c:	fb02 f303 	mul.w	r3, r2, r3
 8005a60:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a6a:	d112      	bne.n	8005a92 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	9300      	str	r3, [sp, #0]
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	2200      	movs	r2, #0
 8005a74:	2180      	movs	r1, #128	; 0x80
 8005a76:	68f8      	ldr	r0, [r7, #12]
 8005a78:	f7ff fe34 	bl	80056e4 <SPI_WaitFlagStateUntilTimeout>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d016      	beq.n	8005ab0 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a86:	f043 0220 	orr.w	r2, r3, #32
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	e023      	b.n	8005ada <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d00a      	beq.n	8005aae <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	3b01      	subs	r3, #1
 8005a9c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aa8:	2b80      	cmp	r3, #128	; 0x80
 8005aaa:	d0f2      	beq.n	8005a92 <SPI_EndRxTxTransaction+0x7a>
 8005aac:	e000      	b.n	8005ab0 <SPI_EndRxTxTransaction+0x98>
        break;
 8005aae:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	9300      	str	r3, [sp, #0]
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005abc:	68f8      	ldr	r0, [r7, #12]
 8005abe:	f7ff fe99 	bl	80057f4 <SPI_WaitFifoStateUntilTimeout>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d007      	beq.n	8005ad8 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005acc:	f043 0220 	orr.w	r2, r3, #32
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	e000      	b.n	8005ada <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3718      	adds	r7, #24
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	20000054 	.word	0x20000054
 8005ae8:	165e9f81 	.word	0x165e9f81

08005aec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d101      	bne.n	8005afe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e049      	b.n	8005b92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d106      	bne.n	8005b18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f7fd fa40 	bl	8002f98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2202      	movs	r2, #2
 8005b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	3304      	adds	r3, #4
 8005b28:	4619      	mov	r1, r3
 8005b2a:	4610      	mov	r0, r2
 8005b2c:	f000 fc34 	bl	8006398 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3708      	adds	r7, #8
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
	...

08005b9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b085      	sub	sp, #20
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d001      	beq.n	8005bb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e054      	b.n	8005c5e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2202      	movs	r2, #2
 8005bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68da      	ldr	r2, [r3, #12]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f042 0201 	orr.w	r2, r2, #1
 8005bca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a26      	ldr	r2, [pc, #152]	; (8005c6c <HAL_TIM_Base_Start_IT+0xd0>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d022      	beq.n	8005c1c <HAL_TIM_Base_Start_IT+0x80>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bde:	d01d      	beq.n	8005c1c <HAL_TIM_Base_Start_IT+0x80>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a22      	ldr	r2, [pc, #136]	; (8005c70 <HAL_TIM_Base_Start_IT+0xd4>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d018      	beq.n	8005c1c <HAL_TIM_Base_Start_IT+0x80>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a21      	ldr	r2, [pc, #132]	; (8005c74 <HAL_TIM_Base_Start_IT+0xd8>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d013      	beq.n	8005c1c <HAL_TIM_Base_Start_IT+0x80>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a1f      	ldr	r2, [pc, #124]	; (8005c78 <HAL_TIM_Base_Start_IT+0xdc>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d00e      	beq.n	8005c1c <HAL_TIM_Base_Start_IT+0x80>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a1e      	ldr	r2, [pc, #120]	; (8005c7c <HAL_TIM_Base_Start_IT+0xe0>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d009      	beq.n	8005c1c <HAL_TIM_Base_Start_IT+0x80>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a1c      	ldr	r2, [pc, #112]	; (8005c80 <HAL_TIM_Base_Start_IT+0xe4>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d004      	beq.n	8005c1c <HAL_TIM_Base_Start_IT+0x80>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a1b      	ldr	r2, [pc, #108]	; (8005c84 <HAL_TIM_Base_Start_IT+0xe8>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d115      	bne.n	8005c48 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	689a      	ldr	r2, [r3, #8]
 8005c22:	4b19      	ldr	r3, [pc, #100]	; (8005c88 <HAL_TIM_Base_Start_IT+0xec>)
 8005c24:	4013      	ands	r3, r2
 8005c26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2b06      	cmp	r3, #6
 8005c2c:	d015      	beq.n	8005c5a <HAL_TIM_Base_Start_IT+0xbe>
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c34:	d011      	beq.n	8005c5a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f042 0201 	orr.w	r2, r2, #1
 8005c44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c46:	e008      	b.n	8005c5a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f042 0201 	orr.w	r2, r2, #1
 8005c56:	601a      	str	r2, [r3, #0]
 8005c58:	e000      	b.n	8005c5c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c5a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3714      	adds	r7, #20
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop
 8005c6c:	40010000 	.word	0x40010000
 8005c70:	40000400 	.word	0x40000400
 8005c74:	40000800 	.word	0x40000800
 8005c78:	40000c00 	.word	0x40000c00
 8005c7c:	40010400 	.word	0x40010400
 8005c80:	40014000 	.word	0x40014000
 8005c84:	40001800 	.word	0x40001800
 8005c88:	00010007 	.word	0x00010007

08005c8c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d101      	bne.n	8005c9e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e049      	b.n	8005d32 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d106      	bne.n	8005cb8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 f841 	bl	8005d3a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2202      	movs	r2, #2
 8005cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	3304      	adds	r3, #4
 8005cc8:	4619      	mov	r1, r3
 8005cca:	4610      	mov	r0, r2
 8005ccc:	f000 fb64 	bl	8006398 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3708      	adds	r7, #8
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}

08005d3a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005d3a:	b480      	push	{r7}
 8005d3c:	b083      	sub	sp, #12
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005d42:	bf00      	nop
 8005d44:	370c      	adds	r7, #12
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr

08005d4e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d4e:	b580      	push	{r7, lr}
 8005d50:	b082      	sub	sp, #8
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	691b      	ldr	r3, [r3, #16]
 8005d5c:	f003 0302 	and.w	r3, r3, #2
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	d122      	bne.n	8005daa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	f003 0302 	and.w	r3, r3, #2
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d11b      	bne.n	8005daa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f06f 0202 	mvn.w	r2, #2
 8005d7a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	699b      	ldr	r3, [r3, #24]
 8005d88:	f003 0303 	and.w	r3, r3, #3
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d003      	beq.n	8005d98 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f000 fae3 	bl	800635c <HAL_TIM_IC_CaptureCallback>
 8005d96:	e005      	b.n	8005da4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f000 fad5 	bl	8006348 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 fae6 	bl	8006370 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	f003 0304 	and.w	r3, r3, #4
 8005db4:	2b04      	cmp	r3, #4
 8005db6:	d122      	bne.n	8005dfe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	f003 0304 	and.w	r3, r3, #4
 8005dc2:	2b04      	cmp	r3, #4
 8005dc4:	d11b      	bne.n	8005dfe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f06f 0204 	mvn.w	r2, #4
 8005dce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2202      	movs	r2, #2
 8005dd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	699b      	ldr	r3, [r3, #24]
 8005ddc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d003      	beq.n	8005dec <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 fab9 	bl	800635c <HAL_TIM_IC_CaptureCallback>
 8005dea:	e005      	b.n	8005df8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f000 faab 	bl	8006348 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 fabc 	bl	8006370 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	f003 0308 	and.w	r3, r3, #8
 8005e08:	2b08      	cmp	r3, #8
 8005e0a:	d122      	bne.n	8005e52 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	f003 0308 	and.w	r3, r3, #8
 8005e16:	2b08      	cmp	r3, #8
 8005e18:	d11b      	bne.n	8005e52 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f06f 0208 	mvn.w	r2, #8
 8005e22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2204      	movs	r2, #4
 8005e28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	69db      	ldr	r3, [r3, #28]
 8005e30:	f003 0303 	and.w	r3, r3, #3
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d003      	beq.n	8005e40 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 fa8f 	bl	800635c <HAL_TIM_IC_CaptureCallback>
 8005e3e:	e005      	b.n	8005e4c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f000 fa81 	bl	8006348 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 fa92 	bl	8006370 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	f003 0310 	and.w	r3, r3, #16
 8005e5c:	2b10      	cmp	r3, #16
 8005e5e:	d122      	bne.n	8005ea6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	f003 0310 	and.w	r3, r3, #16
 8005e6a:	2b10      	cmp	r3, #16
 8005e6c:	d11b      	bne.n	8005ea6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f06f 0210 	mvn.w	r2, #16
 8005e76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2208      	movs	r2, #8
 8005e7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	69db      	ldr	r3, [r3, #28]
 8005e84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d003      	beq.n	8005e94 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 fa65 	bl	800635c <HAL_TIM_IC_CaptureCallback>
 8005e92:	e005      	b.n	8005ea0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f000 fa57 	bl	8006348 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 fa68 	bl	8006370 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	691b      	ldr	r3, [r3, #16]
 8005eac:	f003 0301 	and.w	r3, r3, #1
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d10e      	bne.n	8005ed2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	f003 0301 	and.w	r3, r3, #1
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d107      	bne.n	8005ed2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f06f 0201 	mvn.w	r2, #1
 8005eca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f7fc fba9 	bl	8002624 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	691b      	ldr	r3, [r3, #16]
 8005ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005edc:	2b80      	cmp	r3, #128	; 0x80
 8005ede:	d10e      	bne.n	8005efe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eea:	2b80      	cmp	r3, #128	; 0x80
 8005eec:	d107      	bne.n	8005efe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ef6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 fe7d 	bl	8006bf8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f0c:	d10e      	bne.n	8005f2c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f18:	2b80      	cmp	r3, #128	; 0x80
 8005f1a:	d107      	bne.n	8005f2c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 fe70 	bl	8006c0c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f36:	2b40      	cmp	r3, #64	; 0x40
 8005f38:	d10e      	bne.n	8005f58 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f44:	2b40      	cmp	r3, #64	; 0x40
 8005f46:	d107      	bne.n	8005f58 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 fa16 	bl	8006384 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	f003 0320 	and.w	r3, r3, #32
 8005f62:	2b20      	cmp	r3, #32
 8005f64:	d10e      	bne.n	8005f84 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	f003 0320 	and.w	r3, r3, #32
 8005f70:	2b20      	cmp	r3, #32
 8005f72:	d107      	bne.n	8005f84 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f06f 0220 	mvn.w	r2, #32
 8005f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 fe30 	bl	8006be4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f84:	bf00      	nop
 8005f86:	3708      	adds	r7, #8
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b086      	sub	sp, #24
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d101      	bne.n	8005faa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005fa6:	2302      	movs	r3, #2
 8005fa8:	e0ff      	b.n	80061aa <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2201      	movs	r2, #1
 8005fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2b14      	cmp	r3, #20
 8005fb6:	f200 80f0 	bhi.w	800619a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005fba:	a201      	add	r2, pc, #4	; (adr r2, 8005fc0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc0:	08006015 	.word	0x08006015
 8005fc4:	0800619b 	.word	0x0800619b
 8005fc8:	0800619b 	.word	0x0800619b
 8005fcc:	0800619b 	.word	0x0800619b
 8005fd0:	08006055 	.word	0x08006055
 8005fd4:	0800619b 	.word	0x0800619b
 8005fd8:	0800619b 	.word	0x0800619b
 8005fdc:	0800619b 	.word	0x0800619b
 8005fe0:	08006097 	.word	0x08006097
 8005fe4:	0800619b 	.word	0x0800619b
 8005fe8:	0800619b 	.word	0x0800619b
 8005fec:	0800619b 	.word	0x0800619b
 8005ff0:	080060d7 	.word	0x080060d7
 8005ff4:	0800619b 	.word	0x0800619b
 8005ff8:	0800619b 	.word	0x0800619b
 8005ffc:	0800619b 	.word	0x0800619b
 8006000:	08006119 	.word	0x08006119
 8006004:	0800619b 	.word	0x0800619b
 8006008:	0800619b 	.word	0x0800619b
 800600c:	0800619b 	.word	0x0800619b
 8006010:	08006159 	.word	0x08006159
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68b9      	ldr	r1, [r7, #8]
 800601a:	4618      	mov	r0, r3
 800601c:	f000 fa5c 	bl	80064d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	699a      	ldr	r2, [r3, #24]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f042 0208 	orr.w	r2, r2, #8
 800602e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	699a      	ldr	r2, [r3, #24]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f022 0204 	bic.w	r2, r2, #4
 800603e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	6999      	ldr	r1, [r3, #24]
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	691a      	ldr	r2, [r3, #16]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	430a      	orrs	r2, r1
 8006050:	619a      	str	r2, [r3, #24]
      break;
 8006052:	e0a5      	b.n	80061a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68b9      	ldr	r1, [r7, #8]
 800605a:	4618      	mov	r0, r3
 800605c:	f000 faae 	bl	80065bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	699a      	ldr	r2, [r3, #24]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800606e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	699a      	ldr	r2, [r3, #24]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800607e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	6999      	ldr	r1, [r3, #24]
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	021a      	lsls	r2, r3, #8
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	430a      	orrs	r2, r1
 8006092:	619a      	str	r2, [r3, #24]
      break;
 8006094:	e084      	b.n	80061a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68b9      	ldr	r1, [r7, #8]
 800609c:	4618      	mov	r0, r3
 800609e:	f000 fb05 	bl	80066ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	69da      	ldr	r2, [r3, #28]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f042 0208 	orr.w	r2, r2, #8
 80060b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	69da      	ldr	r2, [r3, #28]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f022 0204 	bic.w	r2, r2, #4
 80060c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	69d9      	ldr	r1, [r3, #28]
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	691a      	ldr	r2, [r3, #16]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	430a      	orrs	r2, r1
 80060d2:	61da      	str	r2, [r3, #28]
      break;
 80060d4:	e064      	b.n	80061a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	68b9      	ldr	r1, [r7, #8]
 80060dc:	4618      	mov	r0, r3
 80060de:	f000 fb5b 	bl	8006798 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	69da      	ldr	r2, [r3, #28]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	69da      	ldr	r2, [r3, #28]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006100:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	69d9      	ldr	r1, [r3, #28]
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	691b      	ldr	r3, [r3, #16]
 800610c:	021a      	lsls	r2, r3, #8
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	430a      	orrs	r2, r1
 8006114:	61da      	str	r2, [r3, #28]
      break;
 8006116:	e043      	b.n	80061a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68b9      	ldr	r1, [r7, #8]
 800611e:	4618      	mov	r0, r3
 8006120:	f000 fb92 	bl	8006848 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f042 0208 	orr.w	r2, r2, #8
 8006132:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f022 0204 	bic.w	r2, r2, #4
 8006142:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	691a      	ldr	r2, [r3, #16]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	430a      	orrs	r2, r1
 8006154:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006156:	e023      	b.n	80061a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68b9      	ldr	r1, [r7, #8]
 800615e:	4618      	mov	r0, r3
 8006160:	f000 fbc4 	bl	80068ec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006172:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006182:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	021a      	lsls	r2, r3, #8
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	430a      	orrs	r2, r1
 8006196:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006198:	e002      	b.n	80061a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	75fb      	strb	r3, [r7, #23]
      break;
 800619e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80061a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3718      	adds	r7, #24
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop

080061b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061be:	2300      	movs	r3, #0
 80061c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d101      	bne.n	80061d0 <HAL_TIM_ConfigClockSource+0x1c>
 80061cc:	2302      	movs	r3, #2
 80061ce:	e0b4      	b.n	800633a <HAL_TIM_ConfigClockSource+0x186>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2202      	movs	r2, #2
 80061dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80061e8:	68ba      	ldr	r2, [r7, #8]
 80061ea:	4b56      	ldr	r3, [pc, #344]	; (8006344 <HAL_TIM_ConfigClockSource+0x190>)
 80061ec:	4013      	ands	r3, r2
 80061ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68ba      	ldr	r2, [r7, #8]
 80061fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006208:	d03e      	beq.n	8006288 <HAL_TIM_ConfigClockSource+0xd4>
 800620a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800620e:	f200 8087 	bhi.w	8006320 <HAL_TIM_ConfigClockSource+0x16c>
 8006212:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006216:	f000 8086 	beq.w	8006326 <HAL_TIM_ConfigClockSource+0x172>
 800621a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800621e:	d87f      	bhi.n	8006320 <HAL_TIM_ConfigClockSource+0x16c>
 8006220:	2b70      	cmp	r3, #112	; 0x70
 8006222:	d01a      	beq.n	800625a <HAL_TIM_ConfigClockSource+0xa6>
 8006224:	2b70      	cmp	r3, #112	; 0x70
 8006226:	d87b      	bhi.n	8006320 <HAL_TIM_ConfigClockSource+0x16c>
 8006228:	2b60      	cmp	r3, #96	; 0x60
 800622a:	d050      	beq.n	80062ce <HAL_TIM_ConfigClockSource+0x11a>
 800622c:	2b60      	cmp	r3, #96	; 0x60
 800622e:	d877      	bhi.n	8006320 <HAL_TIM_ConfigClockSource+0x16c>
 8006230:	2b50      	cmp	r3, #80	; 0x50
 8006232:	d03c      	beq.n	80062ae <HAL_TIM_ConfigClockSource+0xfa>
 8006234:	2b50      	cmp	r3, #80	; 0x50
 8006236:	d873      	bhi.n	8006320 <HAL_TIM_ConfigClockSource+0x16c>
 8006238:	2b40      	cmp	r3, #64	; 0x40
 800623a:	d058      	beq.n	80062ee <HAL_TIM_ConfigClockSource+0x13a>
 800623c:	2b40      	cmp	r3, #64	; 0x40
 800623e:	d86f      	bhi.n	8006320 <HAL_TIM_ConfigClockSource+0x16c>
 8006240:	2b30      	cmp	r3, #48	; 0x30
 8006242:	d064      	beq.n	800630e <HAL_TIM_ConfigClockSource+0x15a>
 8006244:	2b30      	cmp	r3, #48	; 0x30
 8006246:	d86b      	bhi.n	8006320 <HAL_TIM_ConfigClockSource+0x16c>
 8006248:	2b20      	cmp	r3, #32
 800624a:	d060      	beq.n	800630e <HAL_TIM_ConfigClockSource+0x15a>
 800624c:	2b20      	cmp	r3, #32
 800624e:	d867      	bhi.n	8006320 <HAL_TIM_ConfigClockSource+0x16c>
 8006250:	2b00      	cmp	r3, #0
 8006252:	d05c      	beq.n	800630e <HAL_TIM_ConfigClockSource+0x15a>
 8006254:	2b10      	cmp	r3, #16
 8006256:	d05a      	beq.n	800630e <HAL_TIM_ConfigClockSource+0x15a>
 8006258:	e062      	b.n	8006320 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800626a:	f000 fc0d 	bl	8006a88 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800627c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	68ba      	ldr	r2, [r7, #8]
 8006284:	609a      	str	r2, [r3, #8]
      break;
 8006286:	e04f      	b.n	8006328 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006298:	f000 fbf6 	bl	8006a88 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	689a      	ldr	r2, [r3, #8]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062aa:	609a      	str	r2, [r3, #8]
      break;
 80062ac:	e03c      	b.n	8006328 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062ba:	461a      	mov	r2, r3
 80062bc:	f000 fb6a 	bl	8006994 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2150      	movs	r1, #80	; 0x50
 80062c6:	4618      	mov	r0, r3
 80062c8:	f000 fbc3 	bl	8006a52 <TIM_ITRx_SetConfig>
      break;
 80062cc:	e02c      	b.n	8006328 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80062da:	461a      	mov	r2, r3
 80062dc:	f000 fb89 	bl	80069f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2160      	movs	r1, #96	; 0x60
 80062e6:	4618      	mov	r0, r3
 80062e8:	f000 fbb3 	bl	8006a52 <TIM_ITRx_SetConfig>
      break;
 80062ec:	e01c      	b.n	8006328 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062fa:	461a      	mov	r2, r3
 80062fc:	f000 fb4a 	bl	8006994 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2140      	movs	r1, #64	; 0x40
 8006306:	4618      	mov	r0, r3
 8006308:	f000 fba3 	bl	8006a52 <TIM_ITRx_SetConfig>
      break;
 800630c:	e00c      	b.n	8006328 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4619      	mov	r1, r3
 8006318:	4610      	mov	r0, r2
 800631a:	f000 fb9a 	bl	8006a52 <TIM_ITRx_SetConfig>
      break;
 800631e:	e003      	b.n	8006328 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	73fb      	strb	r3, [r7, #15]
      break;
 8006324:	e000      	b.n	8006328 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006326:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006338:	7bfb      	ldrb	r3, [r7, #15]
}
 800633a:	4618      	mov	r0, r3
 800633c:	3710      	adds	r7, #16
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop
 8006344:	fffeff88 	.word	0xfffeff88

08006348 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006350:	bf00      	nop
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006364:	bf00      	nop
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006378:	bf00      	nop
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800638c:	bf00      	nop
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006398:	b480      	push	{r7}
 800639a:	b085      	sub	sp, #20
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4a40      	ldr	r2, [pc, #256]	; (80064ac <TIM_Base_SetConfig+0x114>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d013      	beq.n	80063d8 <TIM_Base_SetConfig+0x40>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063b6:	d00f      	beq.n	80063d8 <TIM_Base_SetConfig+0x40>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	4a3d      	ldr	r2, [pc, #244]	; (80064b0 <TIM_Base_SetConfig+0x118>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d00b      	beq.n	80063d8 <TIM_Base_SetConfig+0x40>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4a3c      	ldr	r2, [pc, #240]	; (80064b4 <TIM_Base_SetConfig+0x11c>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d007      	beq.n	80063d8 <TIM_Base_SetConfig+0x40>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	4a3b      	ldr	r2, [pc, #236]	; (80064b8 <TIM_Base_SetConfig+0x120>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d003      	beq.n	80063d8 <TIM_Base_SetConfig+0x40>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4a3a      	ldr	r2, [pc, #232]	; (80064bc <TIM_Base_SetConfig+0x124>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d108      	bne.n	80063ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	68fa      	ldr	r2, [r7, #12]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a2f      	ldr	r2, [pc, #188]	; (80064ac <TIM_Base_SetConfig+0x114>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d02b      	beq.n	800644a <TIM_Base_SetConfig+0xb2>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063f8:	d027      	beq.n	800644a <TIM_Base_SetConfig+0xb2>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a2c      	ldr	r2, [pc, #176]	; (80064b0 <TIM_Base_SetConfig+0x118>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d023      	beq.n	800644a <TIM_Base_SetConfig+0xb2>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a2b      	ldr	r2, [pc, #172]	; (80064b4 <TIM_Base_SetConfig+0x11c>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d01f      	beq.n	800644a <TIM_Base_SetConfig+0xb2>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a2a      	ldr	r2, [pc, #168]	; (80064b8 <TIM_Base_SetConfig+0x120>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d01b      	beq.n	800644a <TIM_Base_SetConfig+0xb2>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a29      	ldr	r2, [pc, #164]	; (80064bc <TIM_Base_SetConfig+0x124>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d017      	beq.n	800644a <TIM_Base_SetConfig+0xb2>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a28      	ldr	r2, [pc, #160]	; (80064c0 <TIM_Base_SetConfig+0x128>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d013      	beq.n	800644a <TIM_Base_SetConfig+0xb2>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4a27      	ldr	r2, [pc, #156]	; (80064c4 <TIM_Base_SetConfig+0x12c>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d00f      	beq.n	800644a <TIM_Base_SetConfig+0xb2>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4a26      	ldr	r2, [pc, #152]	; (80064c8 <TIM_Base_SetConfig+0x130>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d00b      	beq.n	800644a <TIM_Base_SetConfig+0xb2>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a25      	ldr	r2, [pc, #148]	; (80064cc <TIM_Base_SetConfig+0x134>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d007      	beq.n	800644a <TIM_Base_SetConfig+0xb2>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4a24      	ldr	r2, [pc, #144]	; (80064d0 <TIM_Base_SetConfig+0x138>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d003      	beq.n	800644a <TIM_Base_SetConfig+0xb2>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4a23      	ldr	r2, [pc, #140]	; (80064d4 <TIM_Base_SetConfig+0x13c>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d108      	bne.n	800645c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006450:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	68db      	ldr	r3, [r3, #12]
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	4313      	orrs	r3, r2
 800645a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	695b      	ldr	r3, [r3, #20]
 8006466:	4313      	orrs	r3, r2
 8006468:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	689a      	ldr	r2, [r3, #8]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4a0a      	ldr	r2, [pc, #40]	; (80064ac <TIM_Base_SetConfig+0x114>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d003      	beq.n	8006490 <TIM_Base_SetConfig+0xf8>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4a0c      	ldr	r2, [pc, #48]	; (80064bc <TIM_Base_SetConfig+0x124>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d103      	bne.n	8006498 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	691a      	ldr	r2, [r3, #16]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	615a      	str	r2, [r3, #20]
}
 800649e:	bf00      	nop
 80064a0:	3714      	adds	r7, #20
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr
 80064aa:	bf00      	nop
 80064ac:	40010000 	.word	0x40010000
 80064b0:	40000400 	.word	0x40000400
 80064b4:	40000800 	.word	0x40000800
 80064b8:	40000c00 	.word	0x40000c00
 80064bc:	40010400 	.word	0x40010400
 80064c0:	40014000 	.word	0x40014000
 80064c4:	40014400 	.word	0x40014400
 80064c8:	40014800 	.word	0x40014800
 80064cc:	40001800 	.word	0x40001800
 80064d0:	40001c00 	.word	0x40001c00
 80064d4:	40002000 	.word	0x40002000

080064d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064d8:	b480      	push	{r7}
 80064da:	b087      	sub	sp, #28
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6a1b      	ldr	r3, [r3, #32]
 80064e6:	f023 0201 	bic.w	r2, r3, #1
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a1b      	ldr	r3, [r3, #32]
 80064f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	699b      	ldr	r3, [r3, #24]
 80064fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006500:	68fa      	ldr	r2, [r7, #12]
 8006502:	4b2b      	ldr	r3, [pc, #172]	; (80065b0 <TIM_OC1_SetConfig+0xd8>)
 8006504:	4013      	ands	r3, r2
 8006506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f023 0303 	bic.w	r3, r3, #3
 800650e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68fa      	ldr	r2, [r7, #12]
 8006516:	4313      	orrs	r3, r2
 8006518:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	f023 0302 	bic.w	r3, r3, #2
 8006520:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	697a      	ldr	r2, [r7, #20]
 8006528:	4313      	orrs	r3, r2
 800652a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4a21      	ldr	r2, [pc, #132]	; (80065b4 <TIM_OC1_SetConfig+0xdc>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d003      	beq.n	800653c <TIM_OC1_SetConfig+0x64>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4a20      	ldr	r2, [pc, #128]	; (80065b8 <TIM_OC1_SetConfig+0xe0>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d10c      	bne.n	8006556 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	f023 0308 	bic.w	r3, r3, #8
 8006542:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	697a      	ldr	r2, [r7, #20]
 800654a:	4313      	orrs	r3, r2
 800654c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	f023 0304 	bic.w	r3, r3, #4
 8006554:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a16      	ldr	r2, [pc, #88]	; (80065b4 <TIM_OC1_SetConfig+0xdc>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d003      	beq.n	8006566 <TIM_OC1_SetConfig+0x8e>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a15      	ldr	r2, [pc, #84]	; (80065b8 <TIM_OC1_SetConfig+0xe0>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d111      	bne.n	800658a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800656c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006574:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	695b      	ldr	r3, [r3, #20]
 800657a:	693a      	ldr	r2, [r7, #16]
 800657c:	4313      	orrs	r3, r2
 800657e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	699b      	ldr	r3, [r3, #24]
 8006584:	693a      	ldr	r2, [r7, #16]
 8006586:	4313      	orrs	r3, r2
 8006588:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	693a      	ldr	r2, [r7, #16]
 800658e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	685a      	ldr	r2, [r3, #4]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	697a      	ldr	r2, [r7, #20]
 80065a2:	621a      	str	r2, [r3, #32]
}
 80065a4:	bf00      	nop
 80065a6:	371c      	adds	r7, #28
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr
 80065b0:	fffeff8f 	.word	0xfffeff8f
 80065b4:	40010000 	.word	0x40010000
 80065b8:	40010400 	.word	0x40010400

080065bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065bc:	b480      	push	{r7}
 80065be:	b087      	sub	sp, #28
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6a1b      	ldr	r3, [r3, #32]
 80065ca:	f023 0210 	bic.w	r2, r3, #16
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6a1b      	ldr	r3, [r3, #32]
 80065d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	699b      	ldr	r3, [r3, #24]
 80065e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80065e4:	68fa      	ldr	r2, [r7, #12]
 80065e6:	4b2e      	ldr	r3, [pc, #184]	; (80066a0 <TIM_OC2_SetConfig+0xe4>)
 80065e8:	4013      	ands	r3, r2
 80065ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	021b      	lsls	r3, r3, #8
 80065fa:	68fa      	ldr	r2, [r7, #12]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	f023 0320 	bic.w	r3, r3, #32
 8006606:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	011b      	lsls	r3, r3, #4
 800660e:	697a      	ldr	r2, [r7, #20]
 8006610:	4313      	orrs	r3, r2
 8006612:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4a23      	ldr	r2, [pc, #140]	; (80066a4 <TIM_OC2_SetConfig+0xe8>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d003      	beq.n	8006624 <TIM_OC2_SetConfig+0x68>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4a22      	ldr	r2, [pc, #136]	; (80066a8 <TIM_OC2_SetConfig+0xec>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d10d      	bne.n	8006640 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800662a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	011b      	lsls	r3, r3, #4
 8006632:	697a      	ldr	r2, [r7, #20]
 8006634:	4313      	orrs	r3, r2
 8006636:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800663e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4a18      	ldr	r2, [pc, #96]	; (80066a4 <TIM_OC2_SetConfig+0xe8>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d003      	beq.n	8006650 <TIM_OC2_SetConfig+0x94>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4a17      	ldr	r2, [pc, #92]	; (80066a8 <TIM_OC2_SetConfig+0xec>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d113      	bne.n	8006678 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006656:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800665e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	695b      	ldr	r3, [r3, #20]
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	693a      	ldr	r2, [r7, #16]
 8006668:	4313      	orrs	r3, r2
 800666a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	699b      	ldr	r3, [r3, #24]
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	693a      	ldr	r2, [r7, #16]
 8006674:	4313      	orrs	r3, r2
 8006676:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	693a      	ldr	r2, [r7, #16]
 800667c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	68fa      	ldr	r2, [r7, #12]
 8006682:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	685a      	ldr	r2, [r3, #4]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	697a      	ldr	r2, [r7, #20]
 8006690:	621a      	str	r2, [r3, #32]
}
 8006692:	bf00      	nop
 8006694:	371c      	adds	r7, #28
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr
 800669e:	bf00      	nop
 80066a0:	feff8fff 	.word	0xfeff8fff
 80066a4:	40010000 	.word	0x40010000
 80066a8:	40010400 	.word	0x40010400

080066ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b087      	sub	sp, #28
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6a1b      	ldr	r3, [r3, #32]
 80066ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6a1b      	ldr	r3, [r3, #32]
 80066c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	69db      	ldr	r3, [r3, #28]
 80066d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80066d4:	68fa      	ldr	r2, [r7, #12]
 80066d6:	4b2d      	ldr	r3, [pc, #180]	; (800678c <TIM_OC3_SetConfig+0xe0>)
 80066d8:	4013      	ands	r3, r2
 80066da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f023 0303 	bic.w	r3, r3, #3
 80066e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68fa      	ldr	r2, [r7, #12]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	021b      	lsls	r3, r3, #8
 80066fc:	697a      	ldr	r2, [r7, #20]
 80066fe:	4313      	orrs	r3, r2
 8006700:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	4a22      	ldr	r2, [pc, #136]	; (8006790 <TIM_OC3_SetConfig+0xe4>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d003      	beq.n	8006712 <TIM_OC3_SetConfig+0x66>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4a21      	ldr	r2, [pc, #132]	; (8006794 <TIM_OC3_SetConfig+0xe8>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d10d      	bne.n	800672e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006718:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	021b      	lsls	r3, r3, #8
 8006720:	697a      	ldr	r2, [r7, #20]
 8006722:	4313      	orrs	r3, r2
 8006724:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800672c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	4a17      	ldr	r2, [pc, #92]	; (8006790 <TIM_OC3_SetConfig+0xe4>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d003      	beq.n	800673e <TIM_OC3_SetConfig+0x92>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4a16      	ldr	r2, [pc, #88]	; (8006794 <TIM_OC3_SetConfig+0xe8>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d113      	bne.n	8006766 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006744:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800674c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	695b      	ldr	r3, [r3, #20]
 8006752:	011b      	lsls	r3, r3, #4
 8006754:	693a      	ldr	r2, [r7, #16]
 8006756:	4313      	orrs	r3, r2
 8006758:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	699b      	ldr	r3, [r3, #24]
 800675e:	011b      	lsls	r3, r3, #4
 8006760:	693a      	ldr	r2, [r7, #16]
 8006762:	4313      	orrs	r3, r2
 8006764:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	693a      	ldr	r2, [r7, #16]
 800676a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	68fa      	ldr	r2, [r7, #12]
 8006770:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	685a      	ldr	r2, [r3, #4]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	697a      	ldr	r2, [r7, #20]
 800677e:	621a      	str	r2, [r3, #32]
}
 8006780:	bf00      	nop
 8006782:	371c      	adds	r7, #28
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr
 800678c:	fffeff8f 	.word	0xfffeff8f
 8006790:	40010000 	.word	0x40010000
 8006794:	40010400 	.word	0x40010400

08006798 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006798:	b480      	push	{r7}
 800679a:	b087      	sub	sp, #28
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a1b      	ldr	r3, [r3, #32]
 80067a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6a1b      	ldr	r3, [r3, #32]
 80067b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	69db      	ldr	r3, [r3, #28]
 80067be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	4b1e      	ldr	r3, [pc, #120]	; (800683c <TIM_OC4_SetConfig+0xa4>)
 80067c4:	4013      	ands	r3, r2
 80067c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	021b      	lsls	r3, r3, #8
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	4313      	orrs	r3, r2
 80067da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	031b      	lsls	r3, r3, #12
 80067ea:	693a      	ldr	r2, [r7, #16]
 80067ec:	4313      	orrs	r3, r2
 80067ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a13      	ldr	r2, [pc, #76]	; (8006840 <TIM_OC4_SetConfig+0xa8>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d003      	beq.n	8006800 <TIM_OC4_SetConfig+0x68>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a12      	ldr	r2, [pc, #72]	; (8006844 <TIM_OC4_SetConfig+0xac>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d109      	bne.n	8006814 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006806:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	695b      	ldr	r3, [r3, #20]
 800680c:	019b      	lsls	r3, r3, #6
 800680e:	697a      	ldr	r2, [r7, #20]
 8006810:	4313      	orrs	r3, r2
 8006812:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	697a      	ldr	r2, [r7, #20]
 8006818:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	685a      	ldr	r2, [r3, #4]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	693a      	ldr	r2, [r7, #16]
 800682c:	621a      	str	r2, [r3, #32]
}
 800682e:	bf00      	nop
 8006830:	371c      	adds	r7, #28
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr
 800683a:	bf00      	nop
 800683c:	feff8fff 	.word	0xfeff8fff
 8006840:	40010000 	.word	0x40010000
 8006844:	40010400 	.word	0x40010400

08006848 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006848:	b480      	push	{r7}
 800684a:	b087      	sub	sp, #28
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a1b      	ldr	r3, [r3, #32]
 8006856:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a1b      	ldr	r3, [r3, #32]
 8006862:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800686e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006870:	68fa      	ldr	r2, [r7, #12]
 8006872:	4b1b      	ldr	r3, [pc, #108]	; (80068e0 <TIM_OC5_SetConfig+0x98>)
 8006874:	4013      	ands	r3, r2
 8006876:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	68fa      	ldr	r2, [r7, #12]
 800687e:	4313      	orrs	r3, r2
 8006880:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006888:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	041b      	lsls	r3, r3, #16
 8006890:	693a      	ldr	r2, [r7, #16]
 8006892:	4313      	orrs	r3, r2
 8006894:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a12      	ldr	r2, [pc, #72]	; (80068e4 <TIM_OC5_SetConfig+0x9c>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d003      	beq.n	80068a6 <TIM_OC5_SetConfig+0x5e>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4a11      	ldr	r2, [pc, #68]	; (80068e8 <TIM_OC5_SetConfig+0xa0>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d109      	bne.n	80068ba <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	695b      	ldr	r3, [r3, #20]
 80068b2:	021b      	lsls	r3, r3, #8
 80068b4:	697a      	ldr	r2, [r7, #20]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	697a      	ldr	r2, [r7, #20]
 80068be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	68fa      	ldr	r2, [r7, #12]
 80068c4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	685a      	ldr	r2, [r3, #4]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	693a      	ldr	r2, [r7, #16]
 80068d2:	621a      	str	r2, [r3, #32]
}
 80068d4:	bf00      	nop
 80068d6:	371c      	adds	r7, #28
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr
 80068e0:	fffeff8f 	.word	0xfffeff8f
 80068e4:	40010000 	.word	0x40010000
 80068e8:	40010400 	.word	0x40010400

080068ec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b087      	sub	sp, #28
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6a1b      	ldr	r3, [r3, #32]
 80068fa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6a1b      	ldr	r3, [r3, #32]
 8006906:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	4b1c      	ldr	r3, [pc, #112]	; (8006988 <TIM_OC6_SetConfig+0x9c>)
 8006918:	4013      	ands	r3, r2
 800691a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	021b      	lsls	r3, r3, #8
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	4313      	orrs	r3, r2
 8006926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800692e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	051b      	lsls	r3, r3, #20
 8006936:	693a      	ldr	r2, [r7, #16]
 8006938:	4313      	orrs	r3, r2
 800693a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	4a13      	ldr	r2, [pc, #76]	; (800698c <TIM_OC6_SetConfig+0xa0>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d003      	beq.n	800694c <TIM_OC6_SetConfig+0x60>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4a12      	ldr	r2, [pc, #72]	; (8006990 <TIM_OC6_SetConfig+0xa4>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d109      	bne.n	8006960 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006952:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	695b      	ldr	r3, [r3, #20]
 8006958:	029b      	lsls	r3, r3, #10
 800695a:	697a      	ldr	r2, [r7, #20]
 800695c:	4313      	orrs	r3, r2
 800695e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	697a      	ldr	r2, [r7, #20]
 8006964:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	685a      	ldr	r2, [r3, #4]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	693a      	ldr	r2, [r7, #16]
 8006978:	621a      	str	r2, [r3, #32]
}
 800697a:	bf00      	nop
 800697c:	371c      	adds	r7, #28
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr
 8006986:	bf00      	nop
 8006988:	feff8fff 	.word	0xfeff8fff
 800698c:	40010000 	.word	0x40010000
 8006990:	40010400 	.word	0x40010400

08006994 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006994:	b480      	push	{r7}
 8006996:	b087      	sub	sp, #28
 8006998:	af00      	add	r7, sp, #0
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	6a1b      	ldr	r3, [r3, #32]
 80069a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6a1b      	ldr	r3, [r3, #32]
 80069aa:	f023 0201 	bic.w	r2, r3, #1
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	699b      	ldr	r3, [r3, #24]
 80069b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	011b      	lsls	r3, r3, #4
 80069c4:	693a      	ldr	r2, [r7, #16]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	f023 030a 	bic.w	r3, r3, #10
 80069d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80069d2:	697a      	ldr	r2, [r7, #20]
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	693a      	ldr	r2, [r7, #16]
 80069de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	697a      	ldr	r2, [r7, #20]
 80069e4:	621a      	str	r2, [r3, #32]
}
 80069e6:	bf00      	nop
 80069e8:	371c      	adds	r7, #28
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr

080069f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069f2:	b480      	push	{r7}
 80069f4:	b087      	sub	sp, #28
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	60f8      	str	r0, [r7, #12]
 80069fa:	60b9      	str	r1, [r7, #8]
 80069fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	6a1b      	ldr	r3, [r3, #32]
 8006a02:	f023 0210 	bic.w	r2, r3, #16
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	699b      	ldr	r3, [r3, #24]
 8006a0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6a1b      	ldr	r3, [r3, #32]
 8006a14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	031b      	lsls	r3, r3, #12
 8006a22:	697a      	ldr	r2, [r7, #20]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a2e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	011b      	lsls	r3, r3, #4
 8006a34:	693a      	ldr	r2, [r7, #16]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	697a      	ldr	r2, [r7, #20]
 8006a3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	693a      	ldr	r2, [r7, #16]
 8006a44:	621a      	str	r2, [r3, #32]
}
 8006a46:	bf00      	nop
 8006a48:	371c      	adds	r7, #28
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr

08006a52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a52:	b480      	push	{r7}
 8006a54:	b085      	sub	sp, #20
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
 8006a5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a6a:	683a      	ldr	r2, [r7, #0]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	f043 0307 	orr.w	r3, r3, #7
 8006a74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	68fa      	ldr	r2, [r7, #12]
 8006a7a:	609a      	str	r2, [r3, #8]
}
 8006a7c:	bf00      	nop
 8006a7e:	3714      	adds	r7, #20
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr

08006a88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b087      	sub	sp, #28
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	60f8      	str	r0, [r7, #12]
 8006a90:	60b9      	str	r1, [r7, #8]
 8006a92:	607a      	str	r2, [r7, #4]
 8006a94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006aa2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	021a      	lsls	r2, r3, #8
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	431a      	orrs	r2, r3
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	697a      	ldr	r2, [r7, #20]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	697a      	ldr	r2, [r7, #20]
 8006aba:	609a      	str	r2, [r3, #8]
}
 8006abc:	bf00      	nop
 8006abe:	371c      	adds	r7, #28
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b085      	sub	sp, #20
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d101      	bne.n	8006ae0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006adc:	2302      	movs	r3, #2
 8006ade:	e06d      	b.n	8006bbc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2202      	movs	r2, #2
 8006aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a30      	ldr	r2, [pc, #192]	; (8006bc8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d004      	beq.n	8006b14 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a2f      	ldr	r2, [pc, #188]	; (8006bcc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d108      	bne.n	8006b26 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006b1a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b2c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	68fa      	ldr	r2, [r7, #12]
 8006b34:	4313      	orrs	r3, r2
 8006b36:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68fa      	ldr	r2, [r7, #12]
 8006b3e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a20      	ldr	r2, [pc, #128]	; (8006bc8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d022      	beq.n	8006b90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b52:	d01d      	beq.n	8006b90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a1d      	ldr	r2, [pc, #116]	; (8006bd0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d018      	beq.n	8006b90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a1c      	ldr	r2, [pc, #112]	; (8006bd4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d013      	beq.n	8006b90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a1a      	ldr	r2, [pc, #104]	; (8006bd8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d00e      	beq.n	8006b90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a15      	ldr	r2, [pc, #84]	; (8006bcc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d009      	beq.n	8006b90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a16      	ldr	r2, [pc, #88]	; (8006bdc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d004      	beq.n	8006b90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a15      	ldr	r2, [pc, #84]	; (8006be0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d10c      	bne.n	8006baa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b96:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	68ba      	ldr	r2, [r7, #8]
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	68ba      	ldr	r2, [r7, #8]
 8006ba8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2201      	movs	r2, #1
 8006bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006bba:	2300      	movs	r3, #0
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3714      	adds	r7, #20
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr
 8006bc8:	40010000 	.word	0x40010000
 8006bcc:	40010400 	.word	0x40010400
 8006bd0:	40000400 	.word	0x40000400
 8006bd4:	40000800 	.word	0x40000800
 8006bd8:	40000c00 	.word	0x40000c00
 8006bdc:	40014000 	.word	0x40014000
 8006be0:	40001800 	.word	0x40001800

08006be4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006bec:	bf00      	nop
 8006bee:	370c      	adds	r7, #12
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b083      	sub	sp, #12
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c00:	bf00      	nop
 8006c02:	370c      	adds	r7, #12
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr

08006c0c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006c14:	bf00      	nop
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d101      	bne.n	8006c32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e040      	b.n	8006cb4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d106      	bne.n	8006c48 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f7fc fa5c 	bl	8003100 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2224      	movs	r2, #36	; 0x24
 8006c4c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f022 0201 	bic.w	r2, r2, #1
 8006c5c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 fbe6 	bl	8007430 <UART_SetConfig>
 8006c64:	4603      	mov	r3, r0
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d101      	bne.n	8006c6e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e022      	b.n	8006cb4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d002      	beq.n	8006c7c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 fe3e 	bl	80078f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	685a      	ldr	r2, [r3, #4]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	689a      	ldr	r2, [r3, #8]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f042 0201 	orr.w	r2, r2, #1
 8006caa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 fec5 	bl	8007a3c <UART_CheckIdleState>
 8006cb2:	4603      	mov	r3, r0
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3708      	adds	r7, #8
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b08a      	sub	sp, #40	; 0x28
 8006cc0:	af02      	add	r7, sp, #8
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	60b9      	str	r1, [r7, #8]
 8006cc6:	603b      	str	r3, [r7, #0]
 8006cc8:	4613      	mov	r3, r2
 8006cca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cd0:	2b20      	cmp	r3, #32
 8006cd2:	d171      	bne.n	8006db8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d002      	beq.n	8006ce0 <HAL_UART_Transmit+0x24>
 8006cda:	88fb      	ldrh	r3, [r7, #6]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d101      	bne.n	8006ce4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e06a      	b.n	8006dba <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2221      	movs	r2, #33	; 0x21
 8006cf0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006cf2:	f7fc fae7 	bl	80032c4 <HAL_GetTick>
 8006cf6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	88fa      	ldrh	r2, [r7, #6]
 8006cfc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	88fa      	ldrh	r2, [r7, #6]
 8006d04:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d10:	d108      	bne.n	8006d24 <HAL_UART_Transmit+0x68>
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	691b      	ldr	r3, [r3, #16]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d104      	bne.n	8006d24 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	61bb      	str	r3, [r7, #24]
 8006d22:	e003      	b.n	8006d2c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006d2c:	e02c      	b.n	8006d88 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	9300      	str	r3, [sp, #0]
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	2200      	movs	r2, #0
 8006d36:	2180      	movs	r1, #128	; 0x80
 8006d38:	68f8      	ldr	r0, [r7, #12]
 8006d3a:	f000 feb6 	bl	8007aaa <UART_WaitOnFlagUntilTimeout>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d001      	beq.n	8006d48 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8006d44:	2303      	movs	r3, #3
 8006d46:	e038      	b.n	8006dba <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d10b      	bne.n	8006d66 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d4e:	69bb      	ldr	r3, [r7, #24]
 8006d50:	881b      	ldrh	r3, [r3, #0]
 8006d52:	461a      	mov	r2, r3
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d5c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	3302      	adds	r3, #2
 8006d62:	61bb      	str	r3, [r7, #24]
 8006d64:	e007      	b.n	8006d76 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	781a      	ldrb	r2, [r3, #0]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006d70:	69fb      	ldr	r3, [r7, #28]
 8006d72:	3301      	adds	r3, #1
 8006d74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	3b01      	subs	r3, #1
 8006d80:	b29a      	uxth	r2, r3
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d1cc      	bne.n	8006d2e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	9300      	str	r3, [sp, #0]
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	2140      	movs	r1, #64	; 0x40
 8006d9e:	68f8      	ldr	r0, [r7, #12]
 8006da0:	f000 fe83 	bl	8007aaa <UART_WaitOnFlagUntilTimeout>
 8006da4:	4603      	mov	r3, r0
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d001      	beq.n	8006dae <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8006daa:	2303      	movs	r3, #3
 8006dac:	e005      	b.n	8006dba <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2220      	movs	r2, #32
 8006db2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006db4:	2300      	movs	r3, #0
 8006db6:	e000      	b.n	8006dba <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006db8:	2302      	movs	r3, #2
  }
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3720      	adds	r7, #32
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}

08006dc2 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b08a      	sub	sp, #40	; 0x28
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	60f8      	str	r0, [r7, #12]
 8006dca:	60b9      	str	r1, [r7, #8]
 8006dcc:	4613      	mov	r3, r2
 8006dce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006dd6:	2b20      	cmp	r3, #32
 8006dd8:	d132      	bne.n	8006e40 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d002      	beq.n	8006de6 <HAL_UART_Receive_IT+0x24>
 8006de0:	88fb      	ldrh	r3, [r7, #6]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d101      	bne.n	8006dea <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006de6:	2301      	movs	r3, #1
 8006de8:	e02b      	b.n	8006e42 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2200      	movs	r2, #0
 8006dee:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d018      	beq.n	8006e30 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	e853 3f00 	ldrex	r3, [r3]
 8006e0a:	613b      	str	r3, [r7, #16]
   return(result);
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006e12:	627b      	str	r3, [r7, #36]	; 0x24
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	461a      	mov	r2, r3
 8006e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1c:	623b      	str	r3, [r7, #32]
 8006e1e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e20:	69f9      	ldr	r1, [r7, #28]
 8006e22:	6a3a      	ldr	r2, [r7, #32]
 8006e24:	e841 2300 	strex	r3, r2, [r1]
 8006e28:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d1e6      	bne.n	8006dfe <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006e30:	88fb      	ldrh	r3, [r7, #6]
 8006e32:	461a      	mov	r2, r3
 8006e34:	68b9      	ldr	r1, [r7, #8]
 8006e36:	68f8      	ldr	r0, [r7, #12]
 8006e38:	f000 fefe 	bl	8007c38 <UART_Start_Receive_IT>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	e000      	b.n	8006e42 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006e40:	2302      	movs	r3, #2
  }
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3728      	adds	r7, #40	; 0x28
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
	...

08006e4c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b0ba      	sub	sp, #232	; 0xe8
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	69db      	ldr	r3, [r3, #28]
 8006e5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006e72:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006e76:	f640 030f 	movw	r3, #2063	; 0x80f
 8006e7a:	4013      	ands	r3, r2
 8006e7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006e80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d115      	bne.n	8006eb4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006e88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e8c:	f003 0320 	and.w	r3, r3, #32
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d00f      	beq.n	8006eb4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006e94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e98:	f003 0320 	and.w	r3, r3, #32
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d009      	beq.n	8006eb4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	f000 8297 	beq.w	80073d8 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	4798      	blx	r3
      }
      return;
 8006eb2:	e291      	b.n	80073d8 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006eb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	f000 8117 	beq.w	80070ec <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006ebe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ec2:	f003 0301 	and.w	r3, r3, #1
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d106      	bne.n	8006ed8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006eca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006ece:	4b85      	ldr	r3, [pc, #532]	; (80070e4 <HAL_UART_IRQHandler+0x298>)
 8006ed0:	4013      	ands	r3, r2
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	f000 810a 	beq.w	80070ec <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006edc:	f003 0301 	and.w	r3, r3, #1
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d011      	beq.n	8006f08 <HAL_UART_IRQHandler+0xbc>
 8006ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d00b      	beq.n	8006f08 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006efe:	f043 0201 	orr.w	r2, r3, #1
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f0c:	f003 0302 	and.w	r3, r3, #2
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d011      	beq.n	8006f38 <HAL_UART_IRQHandler+0xec>
 8006f14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f18:	f003 0301 	and.w	r3, r3, #1
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d00b      	beq.n	8006f38 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2202      	movs	r2, #2
 8006f26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f2e:	f043 0204 	orr.w	r2, r3, #4
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f3c:	f003 0304 	and.w	r3, r3, #4
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d011      	beq.n	8006f68 <HAL_UART_IRQHandler+0x11c>
 8006f44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f48:	f003 0301 	and.w	r3, r3, #1
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d00b      	beq.n	8006f68 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2204      	movs	r2, #4
 8006f56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f5e:	f043 0202 	orr.w	r2, r3, #2
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006f68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f6c:	f003 0308 	and.w	r3, r3, #8
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d017      	beq.n	8006fa4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006f74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f78:	f003 0320 	and.w	r3, r3, #32
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d105      	bne.n	8006f8c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006f80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f84:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d00b      	beq.n	8006fa4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	2208      	movs	r2, #8
 8006f92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f9a:	f043 0208 	orr.w	r2, r3, #8
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006fa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d012      	beq.n	8006fd6 <HAL_UART_IRQHandler+0x18a>
 8006fb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fb4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d00c      	beq.n	8006fd6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006fc4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fcc:	f043 0220 	orr.w	r2, r3, #32
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	f000 81fd 	beq.w	80073dc <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fe6:	f003 0320 	and.w	r3, r3, #32
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00d      	beq.n	800700a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006fee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ff2:	f003 0320 	and.w	r3, r3, #32
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d007      	beq.n	800700a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d003      	beq.n	800700a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007010:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800701e:	2b40      	cmp	r3, #64	; 0x40
 8007020:	d005      	beq.n	800702e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007022:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007026:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800702a:	2b00      	cmp	r3, #0
 800702c:	d04f      	beq.n	80070ce <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 fec8 	bl	8007dc4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800703e:	2b40      	cmp	r3, #64	; 0x40
 8007040:	d141      	bne.n	80070c6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	3308      	adds	r3, #8
 8007048:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800704c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007050:	e853 3f00 	ldrex	r3, [r3]
 8007054:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007058:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800705c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007060:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	3308      	adds	r3, #8
 800706a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800706e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007072:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007076:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800707a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800707e:	e841 2300 	strex	r3, r2, [r1]
 8007082:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007086:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800708a:	2b00      	cmp	r3, #0
 800708c:	d1d9      	bne.n	8007042 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007092:	2b00      	cmp	r3, #0
 8007094:	d013      	beq.n	80070be <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800709a:	4a13      	ldr	r2, [pc, #76]	; (80070e8 <HAL_UART_IRQHandler+0x29c>)
 800709c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070a2:	4618      	mov	r0, r3
 80070a4:	f7fc fabf 	bl	8003626 <HAL_DMA_Abort_IT>
 80070a8:	4603      	mov	r3, r0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d017      	beq.n	80070de <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80070b8:	4610      	mov	r0, r2
 80070ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070bc:	e00f      	b.n	80070de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 f9a0 	bl	8007404 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070c4:	e00b      	b.n	80070de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 f99c 	bl	8007404 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070cc:	e007      	b.n	80070de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 f998 	bl	8007404 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80070dc:	e17e      	b.n	80073dc <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070de:	bf00      	nop
    return;
 80070e0:	e17c      	b.n	80073dc <HAL_UART_IRQHandler+0x590>
 80070e2:	bf00      	nop
 80070e4:	04000120 	.word	0x04000120
 80070e8:	08007e8d 	.word	0x08007e8d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	f040 814c 	bne.w	800738e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80070f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070fa:	f003 0310 	and.w	r3, r3, #16
 80070fe:	2b00      	cmp	r3, #0
 8007100:	f000 8145 	beq.w	800738e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007108:	f003 0310 	and.w	r3, r3, #16
 800710c:	2b00      	cmp	r3, #0
 800710e:	f000 813e 	beq.w	800738e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	2210      	movs	r2, #16
 8007118:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007124:	2b40      	cmp	r3, #64	; 0x40
 8007126:	f040 80b6 	bne.w	8007296 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007136:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800713a:	2b00      	cmp	r3, #0
 800713c:	f000 8150 	beq.w	80073e0 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007146:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800714a:	429a      	cmp	r2, r3
 800714c:	f080 8148 	bcs.w	80073e0 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007156:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800715e:	69db      	ldr	r3, [r3, #28]
 8007160:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007164:	f000 8086 	beq.w	8007274 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007170:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007174:	e853 3f00 	ldrex	r3, [r3]
 8007178:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800717c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007180:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007184:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	461a      	mov	r2, r3
 800718e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007192:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007196:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800719a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800719e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80071a2:	e841 2300 	strex	r3, r2, [r1]
 80071a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80071aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d1da      	bne.n	8007168 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	3308      	adds	r3, #8
 80071b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071bc:	e853 3f00 	ldrex	r3, [r3]
 80071c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80071c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80071c4:	f023 0301 	bic.w	r3, r3, #1
 80071c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	3308      	adds	r3, #8
 80071d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80071d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80071da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80071de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80071e2:	e841 2300 	strex	r3, r2, [r1]
 80071e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80071e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d1e1      	bne.n	80071b2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	3308      	adds	r3, #8
 80071f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80071f8:	e853 3f00 	ldrex	r3, [r3]
 80071fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80071fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007200:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007204:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	3308      	adds	r3, #8
 800720e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007212:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007214:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007216:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007218:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800721a:	e841 2300 	strex	r3, r2, [r1]
 800721e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007220:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007222:	2b00      	cmp	r3, #0
 8007224:	d1e3      	bne.n	80071ee <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2220      	movs	r2, #32
 800722a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800723a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800723c:	e853 3f00 	ldrex	r3, [r3]
 8007240:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007242:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007244:	f023 0310 	bic.w	r3, r3, #16
 8007248:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	461a      	mov	r2, r3
 8007252:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007256:	65bb      	str	r3, [r7, #88]	; 0x58
 8007258:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800725a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800725c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800725e:	e841 2300 	strex	r3, r2, [r1]
 8007262:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007264:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007266:	2b00      	cmp	r3, #0
 8007268:	d1e4      	bne.n	8007234 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800726e:	4618      	mov	r0, r3
 8007270:	f7fc f969 	bl	8003546 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2202      	movs	r2, #2
 8007278:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007286:	b29b      	uxth	r3, r3
 8007288:	1ad3      	subs	r3, r2, r3
 800728a:	b29b      	uxth	r3, r3
 800728c:	4619      	mov	r1, r3
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 f8c2 	bl	8007418 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007294:	e0a4      	b.n	80073e0 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	1ad3      	subs	r3, r2, r3
 80072a6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	f000 8096 	beq.w	80073e4 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80072b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80072bc:	2b00      	cmp	r3, #0
 80072be:	f000 8091 	beq.w	80073e4 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ca:	e853 3f00 	ldrex	r3, [r3]
 80072ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80072d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80072d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	461a      	mov	r2, r3
 80072e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80072e4:	647b      	str	r3, [r7, #68]	; 0x44
 80072e6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80072ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072ec:	e841 2300 	strex	r3, r2, [r1]
 80072f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80072f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d1e4      	bne.n	80072c2 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	3308      	adds	r3, #8
 80072fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007302:	e853 3f00 	ldrex	r3, [r3]
 8007306:	623b      	str	r3, [r7, #32]
   return(result);
 8007308:	6a3b      	ldr	r3, [r7, #32]
 800730a:	f023 0301 	bic.w	r3, r3, #1
 800730e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	3308      	adds	r3, #8
 8007318:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800731c:	633a      	str	r2, [r7, #48]	; 0x30
 800731e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007320:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007322:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007324:	e841 2300 	strex	r3, r2, [r1]
 8007328:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800732a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800732c:	2b00      	cmp	r3, #0
 800732e:	d1e3      	bne.n	80072f8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2220      	movs	r2, #32
 8007334:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	e853 3f00 	ldrex	r3, [r3]
 8007350:	60fb      	str	r3, [r7, #12]
   return(result);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	f023 0310 	bic.w	r3, r3, #16
 8007358:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	461a      	mov	r2, r3
 8007362:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007366:	61fb      	str	r3, [r7, #28]
 8007368:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800736a:	69b9      	ldr	r1, [r7, #24]
 800736c:	69fa      	ldr	r2, [r7, #28]
 800736e:	e841 2300 	strex	r3, r2, [r1]
 8007372:	617b      	str	r3, [r7, #20]
   return(result);
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d1e4      	bne.n	8007344 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2202      	movs	r2, #2
 800737e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007380:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007384:	4619      	mov	r1, r3
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 f846 	bl	8007418 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800738c:	e02a      	b.n	80073e4 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800738e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007396:	2b00      	cmp	r3, #0
 8007398:	d00e      	beq.n	80073b8 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800739a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800739e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d008      	beq.n	80073b8 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d01c      	beq.n	80073e8 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	4798      	blx	r3
    }
    return;
 80073b6:	e017      	b.n	80073e8 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80073b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d012      	beq.n	80073ea <HAL_UART_IRQHandler+0x59e>
 80073c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d00c      	beq.n	80073ea <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 fd71 	bl	8007eb8 <UART_EndTransmit_IT>
    return;
 80073d6:	e008      	b.n	80073ea <HAL_UART_IRQHandler+0x59e>
      return;
 80073d8:	bf00      	nop
 80073da:	e006      	b.n	80073ea <HAL_UART_IRQHandler+0x59e>
    return;
 80073dc:	bf00      	nop
 80073de:	e004      	b.n	80073ea <HAL_UART_IRQHandler+0x59e>
      return;
 80073e0:	bf00      	nop
 80073e2:	e002      	b.n	80073ea <HAL_UART_IRQHandler+0x59e>
      return;
 80073e4:	bf00      	nop
 80073e6:	e000      	b.n	80073ea <HAL_UART_IRQHandler+0x59e>
    return;
 80073e8:	bf00      	nop
  }

}
 80073ea:	37e8      	adds	r7, #232	; 0xe8
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80073f8:	bf00      	nop
 80073fa:	370c      	adds	r7, #12
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr

08007404 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007404:	b480      	push	{r7}
 8007406:	b083      	sub	sp, #12
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800740c:	bf00      	nop
 800740e:	370c      	adds	r7, #12
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr

08007418 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007418:	b480      	push	{r7}
 800741a:	b083      	sub	sp, #12
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	460b      	mov	r3, r1
 8007422:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007424:	bf00      	nop
 8007426:	370c      	adds	r7, #12
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b088      	sub	sp, #32
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007438:	2300      	movs	r3, #0
 800743a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	689a      	ldr	r2, [r3, #8]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	691b      	ldr	r3, [r3, #16]
 8007444:	431a      	orrs	r2, r3
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	695b      	ldr	r3, [r3, #20]
 800744a:	431a      	orrs	r2, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	69db      	ldr	r3, [r3, #28]
 8007450:	4313      	orrs	r3, r2
 8007452:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	4ba6      	ldr	r3, [pc, #664]	; (80076f4 <UART_SetConfig+0x2c4>)
 800745c:	4013      	ands	r3, r2
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	6812      	ldr	r2, [r2, #0]
 8007462:	6979      	ldr	r1, [r7, #20]
 8007464:	430b      	orrs	r3, r1
 8007466:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	68da      	ldr	r2, [r3, #12]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	430a      	orrs	r2, r1
 800747c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	699b      	ldr	r3, [r3, #24]
 8007482:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6a1b      	ldr	r3, [r3, #32]
 8007488:	697a      	ldr	r2, [r7, #20]
 800748a:	4313      	orrs	r3, r2
 800748c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	697a      	ldr	r2, [r7, #20]
 800749e:	430a      	orrs	r2, r1
 80074a0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a94      	ldr	r2, [pc, #592]	; (80076f8 <UART_SetConfig+0x2c8>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d120      	bne.n	80074ee <UART_SetConfig+0xbe>
 80074ac:	4b93      	ldr	r3, [pc, #588]	; (80076fc <UART_SetConfig+0x2cc>)
 80074ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074b2:	f003 0303 	and.w	r3, r3, #3
 80074b6:	2b03      	cmp	r3, #3
 80074b8:	d816      	bhi.n	80074e8 <UART_SetConfig+0xb8>
 80074ba:	a201      	add	r2, pc, #4	; (adr r2, 80074c0 <UART_SetConfig+0x90>)
 80074bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c0:	080074d1 	.word	0x080074d1
 80074c4:	080074dd 	.word	0x080074dd
 80074c8:	080074d7 	.word	0x080074d7
 80074cc:	080074e3 	.word	0x080074e3
 80074d0:	2301      	movs	r3, #1
 80074d2:	77fb      	strb	r3, [r7, #31]
 80074d4:	e150      	b.n	8007778 <UART_SetConfig+0x348>
 80074d6:	2302      	movs	r3, #2
 80074d8:	77fb      	strb	r3, [r7, #31]
 80074da:	e14d      	b.n	8007778 <UART_SetConfig+0x348>
 80074dc:	2304      	movs	r3, #4
 80074de:	77fb      	strb	r3, [r7, #31]
 80074e0:	e14a      	b.n	8007778 <UART_SetConfig+0x348>
 80074e2:	2308      	movs	r3, #8
 80074e4:	77fb      	strb	r3, [r7, #31]
 80074e6:	e147      	b.n	8007778 <UART_SetConfig+0x348>
 80074e8:	2310      	movs	r3, #16
 80074ea:	77fb      	strb	r3, [r7, #31]
 80074ec:	e144      	b.n	8007778 <UART_SetConfig+0x348>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a83      	ldr	r2, [pc, #524]	; (8007700 <UART_SetConfig+0x2d0>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d132      	bne.n	800755e <UART_SetConfig+0x12e>
 80074f8:	4b80      	ldr	r3, [pc, #512]	; (80076fc <UART_SetConfig+0x2cc>)
 80074fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074fe:	f003 030c 	and.w	r3, r3, #12
 8007502:	2b0c      	cmp	r3, #12
 8007504:	d828      	bhi.n	8007558 <UART_SetConfig+0x128>
 8007506:	a201      	add	r2, pc, #4	; (adr r2, 800750c <UART_SetConfig+0xdc>)
 8007508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800750c:	08007541 	.word	0x08007541
 8007510:	08007559 	.word	0x08007559
 8007514:	08007559 	.word	0x08007559
 8007518:	08007559 	.word	0x08007559
 800751c:	0800754d 	.word	0x0800754d
 8007520:	08007559 	.word	0x08007559
 8007524:	08007559 	.word	0x08007559
 8007528:	08007559 	.word	0x08007559
 800752c:	08007547 	.word	0x08007547
 8007530:	08007559 	.word	0x08007559
 8007534:	08007559 	.word	0x08007559
 8007538:	08007559 	.word	0x08007559
 800753c:	08007553 	.word	0x08007553
 8007540:	2300      	movs	r3, #0
 8007542:	77fb      	strb	r3, [r7, #31]
 8007544:	e118      	b.n	8007778 <UART_SetConfig+0x348>
 8007546:	2302      	movs	r3, #2
 8007548:	77fb      	strb	r3, [r7, #31]
 800754a:	e115      	b.n	8007778 <UART_SetConfig+0x348>
 800754c:	2304      	movs	r3, #4
 800754e:	77fb      	strb	r3, [r7, #31]
 8007550:	e112      	b.n	8007778 <UART_SetConfig+0x348>
 8007552:	2308      	movs	r3, #8
 8007554:	77fb      	strb	r3, [r7, #31]
 8007556:	e10f      	b.n	8007778 <UART_SetConfig+0x348>
 8007558:	2310      	movs	r3, #16
 800755a:	77fb      	strb	r3, [r7, #31]
 800755c:	e10c      	b.n	8007778 <UART_SetConfig+0x348>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a68      	ldr	r2, [pc, #416]	; (8007704 <UART_SetConfig+0x2d4>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d120      	bne.n	80075aa <UART_SetConfig+0x17a>
 8007568:	4b64      	ldr	r3, [pc, #400]	; (80076fc <UART_SetConfig+0x2cc>)
 800756a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800756e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007572:	2b30      	cmp	r3, #48	; 0x30
 8007574:	d013      	beq.n	800759e <UART_SetConfig+0x16e>
 8007576:	2b30      	cmp	r3, #48	; 0x30
 8007578:	d814      	bhi.n	80075a4 <UART_SetConfig+0x174>
 800757a:	2b20      	cmp	r3, #32
 800757c:	d009      	beq.n	8007592 <UART_SetConfig+0x162>
 800757e:	2b20      	cmp	r3, #32
 8007580:	d810      	bhi.n	80075a4 <UART_SetConfig+0x174>
 8007582:	2b00      	cmp	r3, #0
 8007584:	d002      	beq.n	800758c <UART_SetConfig+0x15c>
 8007586:	2b10      	cmp	r3, #16
 8007588:	d006      	beq.n	8007598 <UART_SetConfig+0x168>
 800758a:	e00b      	b.n	80075a4 <UART_SetConfig+0x174>
 800758c:	2300      	movs	r3, #0
 800758e:	77fb      	strb	r3, [r7, #31]
 8007590:	e0f2      	b.n	8007778 <UART_SetConfig+0x348>
 8007592:	2302      	movs	r3, #2
 8007594:	77fb      	strb	r3, [r7, #31]
 8007596:	e0ef      	b.n	8007778 <UART_SetConfig+0x348>
 8007598:	2304      	movs	r3, #4
 800759a:	77fb      	strb	r3, [r7, #31]
 800759c:	e0ec      	b.n	8007778 <UART_SetConfig+0x348>
 800759e:	2308      	movs	r3, #8
 80075a0:	77fb      	strb	r3, [r7, #31]
 80075a2:	e0e9      	b.n	8007778 <UART_SetConfig+0x348>
 80075a4:	2310      	movs	r3, #16
 80075a6:	77fb      	strb	r3, [r7, #31]
 80075a8:	e0e6      	b.n	8007778 <UART_SetConfig+0x348>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a56      	ldr	r2, [pc, #344]	; (8007708 <UART_SetConfig+0x2d8>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d120      	bne.n	80075f6 <UART_SetConfig+0x1c6>
 80075b4:	4b51      	ldr	r3, [pc, #324]	; (80076fc <UART_SetConfig+0x2cc>)
 80075b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80075be:	2bc0      	cmp	r3, #192	; 0xc0
 80075c0:	d013      	beq.n	80075ea <UART_SetConfig+0x1ba>
 80075c2:	2bc0      	cmp	r3, #192	; 0xc0
 80075c4:	d814      	bhi.n	80075f0 <UART_SetConfig+0x1c0>
 80075c6:	2b80      	cmp	r3, #128	; 0x80
 80075c8:	d009      	beq.n	80075de <UART_SetConfig+0x1ae>
 80075ca:	2b80      	cmp	r3, #128	; 0x80
 80075cc:	d810      	bhi.n	80075f0 <UART_SetConfig+0x1c0>
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d002      	beq.n	80075d8 <UART_SetConfig+0x1a8>
 80075d2:	2b40      	cmp	r3, #64	; 0x40
 80075d4:	d006      	beq.n	80075e4 <UART_SetConfig+0x1b4>
 80075d6:	e00b      	b.n	80075f0 <UART_SetConfig+0x1c0>
 80075d8:	2300      	movs	r3, #0
 80075da:	77fb      	strb	r3, [r7, #31]
 80075dc:	e0cc      	b.n	8007778 <UART_SetConfig+0x348>
 80075de:	2302      	movs	r3, #2
 80075e0:	77fb      	strb	r3, [r7, #31]
 80075e2:	e0c9      	b.n	8007778 <UART_SetConfig+0x348>
 80075e4:	2304      	movs	r3, #4
 80075e6:	77fb      	strb	r3, [r7, #31]
 80075e8:	e0c6      	b.n	8007778 <UART_SetConfig+0x348>
 80075ea:	2308      	movs	r3, #8
 80075ec:	77fb      	strb	r3, [r7, #31]
 80075ee:	e0c3      	b.n	8007778 <UART_SetConfig+0x348>
 80075f0:	2310      	movs	r3, #16
 80075f2:	77fb      	strb	r3, [r7, #31]
 80075f4:	e0c0      	b.n	8007778 <UART_SetConfig+0x348>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a44      	ldr	r2, [pc, #272]	; (800770c <UART_SetConfig+0x2dc>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d125      	bne.n	800764c <UART_SetConfig+0x21c>
 8007600:	4b3e      	ldr	r3, [pc, #248]	; (80076fc <UART_SetConfig+0x2cc>)
 8007602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007606:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800760a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800760e:	d017      	beq.n	8007640 <UART_SetConfig+0x210>
 8007610:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007614:	d817      	bhi.n	8007646 <UART_SetConfig+0x216>
 8007616:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800761a:	d00b      	beq.n	8007634 <UART_SetConfig+0x204>
 800761c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007620:	d811      	bhi.n	8007646 <UART_SetConfig+0x216>
 8007622:	2b00      	cmp	r3, #0
 8007624:	d003      	beq.n	800762e <UART_SetConfig+0x1fe>
 8007626:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800762a:	d006      	beq.n	800763a <UART_SetConfig+0x20a>
 800762c:	e00b      	b.n	8007646 <UART_SetConfig+0x216>
 800762e:	2300      	movs	r3, #0
 8007630:	77fb      	strb	r3, [r7, #31]
 8007632:	e0a1      	b.n	8007778 <UART_SetConfig+0x348>
 8007634:	2302      	movs	r3, #2
 8007636:	77fb      	strb	r3, [r7, #31]
 8007638:	e09e      	b.n	8007778 <UART_SetConfig+0x348>
 800763a:	2304      	movs	r3, #4
 800763c:	77fb      	strb	r3, [r7, #31]
 800763e:	e09b      	b.n	8007778 <UART_SetConfig+0x348>
 8007640:	2308      	movs	r3, #8
 8007642:	77fb      	strb	r3, [r7, #31]
 8007644:	e098      	b.n	8007778 <UART_SetConfig+0x348>
 8007646:	2310      	movs	r3, #16
 8007648:	77fb      	strb	r3, [r7, #31]
 800764a:	e095      	b.n	8007778 <UART_SetConfig+0x348>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a2f      	ldr	r2, [pc, #188]	; (8007710 <UART_SetConfig+0x2e0>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d125      	bne.n	80076a2 <UART_SetConfig+0x272>
 8007656:	4b29      	ldr	r3, [pc, #164]	; (80076fc <UART_SetConfig+0x2cc>)
 8007658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800765c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007660:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007664:	d017      	beq.n	8007696 <UART_SetConfig+0x266>
 8007666:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800766a:	d817      	bhi.n	800769c <UART_SetConfig+0x26c>
 800766c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007670:	d00b      	beq.n	800768a <UART_SetConfig+0x25a>
 8007672:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007676:	d811      	bhi.n	800769c <UART_SetConfig+0x26c>
 8007678:	2b00      	cmp	r3, #0
 800767a:	d003      	beq.n	8007684 <UART_SetConfig+0x254>
 800767c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007680:	d006      	beq.n	8007690 <UART_SetConfig+0x260>
 8007682:	e00b      	b.n	800769c <UART_SetConfig+0x26c>
 8007684:	2301      	movs	r3, #1
 8007686:	77fb      	strb	r3, [r7, #31]
 8007688:	e076      	b.n	8007778 <UART_SetConfig+0x348>
 800768a:	2302      	movs	r3, #2
 800768c:	77fb      	strb	r3, [r7, #31]
 800768e:	e073      	b.n	8007778 <UART_SetConfig+0x348>
 8007690:	2304      	movs	r3, #4
 8007692:	77fb      	strb	r3, [r7, #31]
 8007694:	e070      	b.n	8007778 <UART_SetConfig+0x348>
 8007696:	2308      	movs	r3, #8
 8007698:	77fb      	strb	r3, [r7, #31]
 800769a:	e06d      	b.n	8007778 <UART_SetConfig+0x348>
 800769c:	2310      	movs	r3, #16
 800769e:	77fb      	strb	r3, [r7, #31]
 80076a0:	e06a      	b.n	8007778 <UART_SetConfig+0x348>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a1b      	ldr	r2, [pc, #108]	; (8007714 <UART_SetConfig+0x2e4>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d138      	bne.n	800771e <UART_SetConfig+0x2ee>
 80076ac:	4b13      	ldr	r3, [pc, #76]	; (80076fc <UART_SetConfig+0x2cc>)
 80076ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076b2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80076b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80076ba:	d017      	beq.n	80076ec <UART_SetConfig+0x2bc>
 80076bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80076c0:	d82a      	bhi.n	8007718 <UART_SetConfig+0x2e8>
 80076c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076c6:	d00b      	beq.n	80076e0 <UART_SetConfig+0x2b0>
 80076c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076cc:	d824      	bhi.n	8007718 <UART_SetConfig+0x2e8>
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d003      	beq.n	80076da <UART_SetConfig+0x2aa>
 80076d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076d6:	d006      	beq.n	80076e6 <UART_SetConfig+0x2b6>
 80076d8:	e01e      	b.n	8007718 <UART_SetConfig+0x2e8>
 80076da:	2300      	movs	r3, #0
 80076dc:	77fb      	strb	r3, [r7, #31]
 80076de:	e04b      	b.n	8007778 <UART_SetConfig+0x348>
 80076e0:	2302      	movs	r3, #2
 80076e2:	77fb      	strb	r3, [r7, #31]
 80076e4:	e048      	b.n	8007778 <UART_SetConfig+0x348>
 80076e6:	2304      	movs	r3, #4
 80076e8:	77fb      	strb	r3, [r7, #31]
 80076ea:	e045      	b.n	8007778 <UART_SetConfig+0x348>
 80076ec:	2308      	movs	r3, #8
 80076ee:	77fb      	strb	r3, [r7, #31]
 80076f0:	e042      	b.n	8007778 <UART_SetConfig+0x348>
 80076f2:	bf00      	nop
 80076f4:	efff69f3 	.word	0xefff69f3
 80076f8:	40011000 	.word	0x40011000
 80076fc:	40023800 	.word	0x40023800
 8007700:	40004400 	.word	0x40004400
 8007704:	40004800 	.word	0x40004800
 8007708:	40004c00 	.word	0x40004c00
 800770c:	40005000 	.word	0x40005000
 8007710:	40011400 	.word	0x40011400
 8007714:	40007800 	.word	0x40007800
 8007718:	2310      	movs	r3, #16
 800771a:	77fb      	strb	r3, [r7, #31]
 800771c:	e02c      	b.n	8007778 <UART_SetConfig+0x348>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a72      	ldr	r2, [pc, #456]	; (80078ec <UART_SetConfig+0x4bc>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d125      	bne.n	8007774 <UART_SetConfig+0x344>
 8007728:	4b71      	ldr	r3, [pc, #452]	; (80078f0 <UART_SetConfig+0x4c0>)
 800772a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800772e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007732:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007736:	d017      	beq.n	8007768 <UART_SetConfig+0x338>
 8007738:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800773c:	d817      	bhi.n	800776e <UART_SetConfig+0x33e>
 800773e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007742:	d00b      	beq.n	800775c <UART_SetConfig+0x32c>
 8007744:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007748:	d811      	bhi.n	800776e <UART_SetConfig+0x33e>
 800774a:	2b00      	cmp	r3, #0
 800774c:	d003      	beq.n	8007756 <UART_SetConfig+0x326>
 800774e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007752:	d006      	beq.n	8007762 <UART_SetConfig+0x332>
 8007754:	e00b      	b.n	800776e <UART_SetConfig+0x33e>
 8007756:	2300      	movs	r3, #0
 8007758:	77fb      	strb	r3, [r7, #31]
 800775a:	e00d      	b.n	8007778 <UART_SetConfig+0x348>
 800775c:	2302      	movs	r3, #2
 800775e:	77fb      	strb	r3, [r7, #31]
 8007760:	e00a      	b.n	8007778 <UART_SetConfig+0x348>
 8007762:	2304      	movs	r3, #4
 8007764:	77fb      	strb	r3, [r7, #31]
 8007766:	e007      	b.n	8007778 <UART_SetConfig+0x348>
 8007768:	2308      	movs	r3, #8
 800776a:	77fb      	strb	r3, [r7, #31]
 800776c:	e004      	b.n	8007778 <UART_SetConfig+0x348>
 800776e:	2310      	movs	r3, #16
 8007770:	77fb      	strb	r3, [r7, #31]
 8007772:	e001      	b.n	8007778 <UART_SetConfig+0x348>
 8007774:	2310      	movs	r3, #16
 8007776:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	69db      	ldr	r3, [r3, #28]
 800777c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007780:	d15b      	bne.n	800783a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007782:	7ffb      	ldrb	r3, [r7, #31]
 8007784:	2b08      	cmp	r3, #8
 8007786:	d828      	bhi.n	80077da <UART_SetConfig+0x3aa>
 8007788:	a201      	add	r2, pc, #4	; (adr r2, 8007790 <UART_SetConfig+0x360>)
 800778a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800778e:	bf00      	nop
 8007790:	080077b5 	.word	0x080077b5
 8007794:	080077bd 	.word	0x080077bd
 8007798:	080077c5 	.word	0x080077c5
 800779c:	080077db 	.word	0x080077db
 80077a0:	080077cb 	.word	0x080077cb
 80077a4:	080077db 	.word	0x080077db
 80077a8:	080077db 	.word	0x080077db
 80077ac:	080077db 	.word	0x080077db
 80077b0:	080077d3 	.word	0x080077d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077b4:	f7fc fe22 	bl	80043fc <HAL_RCC_GetPCLK1Freq>
 80077b8:	61b8      	str	r0, [r7, #24]
        break;
 80077ba:	e013      	b.n	80077e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077bc:	f7fc fe32 	bl	8004424 <HAL_RCC_GetPCLK2Freq>
 80077c0:	61b8      	str	r0, [r7, #24]
        break;
 80077c2:	e00f      	b.n	80077e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077c4:	4b4b      	ldr	r3, [pc, #300]	; (80078f4 <UART_SetConfig+0x4c4>)
 80077c6:	61bb      	str	r3, [r7, #24]
        break;
 80077c8:	e00c      	b.n	80077e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077ca:	f7fc fd05 	bl	80041d8 <HAL_RCC_GetSysClockFreq>
 80077ce:	61b8      	str	r0, [r7, #24]
        break;
 80077d0:	e008      	b.n	80077e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077d6:	61bb      	str	r3, [r7, #24]
        break;
 80077d8:	e004      	b.n	80077e4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80077da:	2300      	movs	r3, #0
 80077dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	77bb      	strb	r3, [r7, #30]
        break;
 80077e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80077e4:	69bb      	ldr	r3, [r7, #24]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d074      	beq.n	80078d4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80077ea:	69bb      	ldr	r3, [r7, #24]
 80077ec:	005a      	lsls	r2, r3, #1
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	085b      	lsrs	r3, r3, #1
 80077f4:	441a      	add	r2, r3
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80077fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	2b0f      	cmp	r3, #15
 8007804:	d916      	bls.n	8007834 <UART_SetConfig+0x404>
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800780c:	d212      	bcs.n	8007834 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	b29b      	uxth	r3, r3
 8007812:	f023 030f 	bic.w	r3, r3, #15
 8007816:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	085b      	lsrs	r3, r3, #1
 800781c:	b29b      	uxth	r3, r3
 800781e:	f003 0307 	and.w	r3, r3, #7
 8007822:	b29a      	uxth	r2, r3
 8007824:	89fb      	ldrh	r3, [r7, #14]
 8007826:	4313      	orrs	r3, r2
 8007828:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	89fa      	ldrh	r2, [r7, #14]
 8007830:	60da      	str	r2, [r3, #12]
 8007832:	e04f      	b.n	80078d4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007834:	2301      	movs	r3, #1
 8007836:	77bb      	strb	r3, [r7, #30]
 8007838:	e04c      	b.n	80078d4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800783a:	7ffb      	ldrb	r3, [r7, #31]
 800783c:	2b08      	cmp	r3, #8
 800783e:	d828      	bhi.n	8007892 <UART_SetConfig+0x462>
 8007840:	a201      	add	r2, pc, #4	; (adr r2, 8007848 <UART_SetConfig+0x418>)
 8007842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007846:	bf00      	nop
 8007848:	0800786d 	.word	0x0800786d
 800784c:	08007875 	.word	0x08007875
 8007850:	0800787d 	.word	0x0800787d
 8007854:	08007893 	.word	0x08007893
 8007858:	08007883 	.word	0x08007883
 800785c:	08007893 	.word	0x08007893
 8007860:	08007893 	.word	0x08007893
 8007864:	08007893 	.word	0x08007893
 8007868:	0800788b 	.word	0x0800788b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800786c:	f7fc fdc6 	bl	80043fc <HAL_RCC_GetPCLK1Freq>
 8007870:	61b8      	str	r0, [r7, #24]
        break;
 8007872:	e013      	b.n	800789c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007874:	f7fc fdd6 	bl	8004424 <HAL_RCC_GetPCLK2Freq>
 8007878:	61b8      	str	r0, [r7, #24]
        break;
 800787a:	e00f      	b.n	800789c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800787c:	4b1d      	ldr	r3, [pc, #116]	; (80078f4 <UART_SetConfig+0x4c4>)
 800787e:	61bb      	str	r3, [r7, #24]
        break;
 8007880:	e00c      	b.n	800789c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007882:	f7fc fca9 	bl	80041d8 <HAL_RCC_GetSysClockFreq>
 8007886:	61b8      	str	r0, [r7, #24]
        break;
 8007888:	e008      	b.n	800789c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800788a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800788e:	61bb      	str	r3, [r7, #24]
        break;
 8007890:	e004      	b.n	800789c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007892:	2300      	movs	r3, #0
 8007894:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007896:	2301      	movs	r3, #1
 8007898:	77bb      	strb	r3, [r7, #30]
        break;
 800789a:	bf00      	nop
    }

    if (pclk != 0U)
 800789c:	69bb      	ldr	r3, [r7, #24]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d018      	beq.n	80078d4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	085a      	lsrs	r2, r3, #1
 80078a8:	69bb      	ldr	r3, [r7, #24]
 80078aa:	441a      	add	r2, r3
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80078b4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	2b0f      	cmp	r3, #15
 80078ba:	d909      	bls.n	80078d0 <UART_SetConfig+0x4a0>
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078c2:	d205      	bcs.n	80078d0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	b29a      	uxth	r2, r3
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	60da      	str	r2, [r3, #12]
 80078ce:	e001      	b.n	80078d4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80078d0:	2301      	movs	r3, #1
 80078d2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2200      	movs	r2, #0
 80078d8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80078e0:	7fbb      	ldrb	r3, [r7, #30]
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3720      	adds	r7, #32
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	40007c00 	.word	0x40007c00
 80078f0:	40023800 	.word	0x40023800
 80078f4:	00f42400 	.word	0x00f42400

080078f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b083      	sub	sp, #12
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007904:	f003 0301 	and.w	r3, r3, #1
 8007908:	2b00      	cmp	r3, #0
 800790a:	d00a      	beq.n	8007922 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	430a      	orrs	r2, r1
 8007920:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007926:	f003 0302 	and.w	r3, r3, #2
 800792a:	2b00      	cmp	r3, #0
 800792c:	d00a      	beq.n	8007944 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	430a      	orrs	r2, r1
 8007942:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007948:	f003 0304 	and.w	r3, r3, #4
 800794c:	2b00      	cmp	r3, #0
 800794e:	d00a      	beq.n	8007966 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	430a      	orrs	r2, r1
 8007964:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800796a:	f003 0308 	and.w	r3, r3, #8
 800796e:	2b00      	cmp	r3, #0
 8007970:	d00a      	beq.n	8007988 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	430a      	orrs	r2, r1
 8007986:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800798c:	f003 0310 	and.w	r3, r3, #16
 8007990:	2b00      	cmp	r3, #0
 8007992:	d00a      	beq.n	80079aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	430a      	orrs	r2, r1
 80079a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ae:	f003 0320 	and.w	r3, r3, #32
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d00a      	beq.n	80079cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	430a      	orrs	r2, r1
 80079ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d01a      	beq.n	8007a0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	430a      	orrs	r2, r1
 80079ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079f6:	d10a      	bne.n	8007a0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	430a      	orrs	r2, r1
 8007a0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d00a      	beq.n	8007a30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	430a      	orrs	r2, r1
 8007a2e:	605a      	str	r2, [r3, #4]
  }
}
 8007a30:	bf00      	nop
 8007a32:	370c      	adds	r7, #12
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr

08007a3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b086      	sub	sp, #24
 8007a40:	af02      	add	r7, sp, #8
 8007a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2200      	movs	r2, #0
 8007a48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a4c:	f7fb fc3a 	bl	80032c4 <HAL_GetTick>
 8007a50:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f003 0308 	and.w	r3, r3, #8
 8007a5c:	2b08      	cmp	r3, #8
 8007a5e:	d10e      	bne.n	8007a7e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a64:	9300      	str	r3, [sp, #0]
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 f81b 	bl	8007aaa <UART_WaitOnFlagUntilTimeout>
 8007a74:	4603      	mov	r3, r0
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d001      	beq.n	8007a7e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a7a:	2303      	movs	r3, #3
 8007a7c:	e011      	b.n	8007aa2 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2220      	movs	r2, #32
 8007a82:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2220      	movs	r2, #32
 8007a88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2200      	movs	r2, #0
 8007a96:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007aa0:	2300      	movs	r3, #0
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3710      	adds	r7, #16
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}

08007aaa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007aaa:	b580      	push	{r7, lr}
 8007aac:	b09c      	sub	sp, #112	; 0x70
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	60f8      	str	r0, [r7, #12]
 8007ab2:	60b9      	str	r1, [r7, #8]
 8007ab4:	603b      	str	r3, [r7, #0]
 8007ab6:	4613      	mov	r3, r2
 8007ab8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007aba:	e0a7      	b.n	8007c0c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007abc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007abe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ac2:	f000 80a3 	beq.w	8007c0c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ac6:	f7fb fbfd 	bl	80032c4 <HAL_GetTick>
 8007aca:	4602      	mov	r2, r0
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	1ad3      	subs	r3, r2, r3
 8007ad0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d302      	bcc.n	8007adc <UART_WaitOnFlagUntilTimeout+0x32>
 8007ad6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d13f      	bne.n	8007b5c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ae4:	e853 3f00 	ldrex	r3, [r3]
 8007ae8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007aea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007aec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007af0:	667b      	str	r3, [r7, #100]	; 0x64
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	461a      	mov	r2, r3
 8007af8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007afa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007afc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007afe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007b00:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007b02:	e841 2300 	strex	r3, r2, [r1]
 8007b06:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007b08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d1e6      	bne.n	8007adc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	3308      	adds	r3, #8
 8007b14:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b18:	e853 3f00 	ldrex	r3, [r3]
 8007b1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b20:	f023 0301 	bic.w	r3, r3, #1
 8007b24:	663b      	str	r3, [r7, #96]	; 0x60
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	3308      	adds	r3, #8
 8007b2c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007b2e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007b30:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b32:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007b34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b36:	e841 2300 	strex	r3, r2, [r1]
 8007b3a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007b3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d1e5      	bne.n	8007b0e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2220      	movs	r2, #32
 8007b46:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2220      	movs	r2, #32
 8007b4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2200      	movs	r2, #0
 8007b54:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007b58:	2303      	movs	r3, #3
 8007b5a:	e068      	b.n	8007c2e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f003 0304 	and.w	r3, r3, #4
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d050      	beq.n	8007c0c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	69db      	ldr	r3, [r3, #28]
 8007b70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b78:	d148      	bne.n	8007c0c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b82:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b8c:	e853 3f00 	ldrex	r3, [r3]
 8007b90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b94:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007b98:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ba2:	637b      	str	r3, [r7, #52]	; 0x34
 8007ba4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007ba8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007baa:	e841 2300 	strex	r3, r2, [r1]
 8007bae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d1e6      	bne.n	8007b84 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	3308      	adds	r3, #8
 8007bbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	e853 3f00 	ldrex	r3, [r3]
 8007bc4:	613b      	str	r3, [r7, #16]
   return(result);
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	f023 0301 	bic.w	r3, r3, #1
 8007bcc:	66bb      	str	r3, [r7, #104]	; 0x68
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	3308      	adds	r3, #8
 8007bd4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007bd6:	623a      	str	r2, [r7, #32]
 8007bd8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bda:	69f9      	ldr	r1, [r7, #28]
 8007bdc:	6a3a      	ldr	r2, [r7, #32]
 8007bde:	e841 2300 	strex	r3, r2, [r1]
 8007be2:	61bb      	str	r3, [r7, #24]
   return(result);
 8007be4:	69bb      	ldr	r3, [r7, #24]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d1e5      	bne.n	8007bb6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2220      	movs	r2, #32
 8007bee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2220      	movs	r2, #32
 8007bf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2220      	movs	r2, #32
 8007bfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2200      	movs	r2, #0
 8007c04:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007c08:	2303      	movs	r3, #3
 8007c0a:	e010      	b.n	8007c2e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	69da      	ldr	r2, [r3, #28]
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	4013      	ands	r3, r2
 8007c16:	68ba      	ldr	r2, [r7, #8]
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	bf0c      	ite	eq
 8007c1c:	2301      	moveq	r3, #1
 8007c1e:	2300      	movne	r3, #0
 8007c20:	b2db      	uxtb	r3, r3
 8007c22:	461a      	mov	r2, r3
 8007c24:	79fb      	ldrb	r3, [r7, #7]
 8007c26:	429a      	cmp	r2, r3
 8007c28:	f43f af48 	beq.w	8007abc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c2c:	2300      	movs	r3, #0
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3770      	adds	r7, #112	; 0x70
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}
	...

08007c38 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b097      	sub	sp, #92	; 0x5c
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	60b9      	str	r1, [r7, #8]
 8007c42:	4613      	mov	r3, r2
 8007c44:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	68ba      	ldr	r2, [r7, #8]
 8007c4a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	88fa      	ldrh	r2, [r7, #6]
 8007c50:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	88fa      	ldrh	r2, [r7, #6]
 8007c58:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	689b      	ldr	r3, [r3, #8]
 8007c66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c6a:	d10e      	bne.n	8007c8a <UART_Start_Receive_IT+0x52>
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	691b      	ldr	r3, [r3, #16]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d105      	bne.n	8007c80 <UART_Start_Receive_IT+0x48>
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007c7a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c7e:	e02d      	b.n	8007cdc <UART_Start_Receive_IT+0xa4>
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	22ff      	movs	r2, #255	; 0xff
 8007c84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c88:	e028      	b.n	8007cdc <UART_Start_Receive_IT+0xa4>
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d10d      	bne.n	8007cae <UART_Start_Receive_IT+0x76>
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	691b      	ldr	r3, [r3, #16]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d104      	bne.n	8007ca4 <UART_Start_Receive_IT+0x6c>
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	22ff      	movs	r2, #255	; 0xff
 8007c9e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007ca2:	e01b      	b.n	8007cdc <UART_Start_Receive_IT+0xa4>
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	227f      	movs	r2, #127	; 0x7f
 8007ca8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007cac:	e016      	b.n	8007cdc <UART_Start_Receive_IT+0xa4>
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007cb6:	d10d      	bne.n	8007cd4 <UART_Start_Receive_IT+0x9c>
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	691b      	ldr	r3, [r3, #16]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d104      	bne.n	8007cca <UART_Start_Receive_IT+0x92>
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	227f      	movs	r2, #127	; 0x7f
 8007cc4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007cc8:	e008      	b.n	8007cdc <UART_Start_Receive_IT+0xa4>
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	223f      	movs	r2, #63	; 0x3f
 8007cce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007cd2:	e003      	b.n	8007cdc <UART_Start_Receive_IT+0xa4>
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2222      	movs	r2, #34	; 0x22
 8007ce8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	3308      	adds	r3, #8
 8007cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cf6:	e853 3f00 	ldrex	r3, [r3]
 8007cfa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cfe:	f043 0301 	orr.w	r3, r3, #1
 8007d02:	657b      	str	r3, [r7, #84]	; 0x54
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	3308      	adds	r3, #8
 8007d0a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007d0c:	64ba      	str	r2, [r7, #72]	; 0x48
 8007d0e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d10:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007d12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d14:	e841 2300 	strex	r3, r2, [r1]
 8007d18:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007d1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d1e5      	bne.n	8007cec <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d28:	d107      	bne.n	8007d3a <UART_Start_Receive_IT+0x102>
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	691b      	ldr	r3, [r3, #16]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d103      	bne.n	8007d3a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	4a21      	ldr	r2, [pc, #132]	; (8007dbc <UART_Start_Receive_IT+0x184>)
 8007d36:	669a      	str	r2, [r3, #104]	; 0x68
 8007d38:	e002      	b.n	8007d40 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	4a20      	ldr	r2, [pc, #128]	; (8007dc0 <UART_Start_Receive_IT+0x188>)
 8007d3e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	691b      	ldr	r3, [r3, #16]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d019      	beq.n	8007d7c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d50:	e853 3f00 	ldrex	r3, [r3]
 8007d54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d58:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007d5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	461a      	mov	r2, r3
 8007d64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d66:	637b      	str	r3, [r7, #52]	; 0x34
 8007d68:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d6e:	e841 2300 	strex	r3, r2, [r1]
 8007d72:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d1e6      	bne.n	8007d48 <UART_Start_Receive_IT+0x110>
 8007d7a:	e018      	b.n	8007dae <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	e853 3f00 	ldrex	r3, [r3]
 8007d88:	613b      	str	r3, [r7, #16]
   return(result);
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	f043 0320 	orr.w	r3, r3, #32
 8007d90:	653b      	str	r3, [r7, #80]	; 0x50
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	461a      	mov	r2, r3
 8007d98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d9a:	623b      	str	r3, [r7, #32]
 8007d9c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d9e:	69f9      	ldr	r1, [r7, #28]
 8007da0:	6a3a      	ldr	r2, [r7, #32]
 8007da2:	e841 2300 	strex	r3, r2, [r1]
 8007da6:	61bb      	str	r3, [r7, #24]
   return(result);
 8007da8:	69bb      	ldr	r3, [r7, #24]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d1e6      	bne.n	8007d7c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8007dae:	2300      	movs	r3, #0
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	375c      	adds	r7, #92	; 0x5c
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr
 8007dbc:	08008073 	.word	0x08008073
 8007dc0:	08007f0d 	.word	0x08007f0d

08007dc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b095      	sub	sp, #84	; 0x54
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dd4:	e853 3f00 	ldrex	r3, [r3]
 8007dd8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ddc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007de0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	461a      	mov	r2, r3
 8007de8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dea:	643b      	str	r3, [r7, #64]	; 0x40
 8007dec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007df0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007df2:	e841 2300 	strex	r3, r2, [r1]
 8007df6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d1e6      	bne.n	8007dcc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	3308      	adds	r3, #8
 8007e04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e06:	6a3b      	ldr	r3, [r7, #32]
 8007e08:	e853 3f00 	ldrex	r3, [r3]
 8007e0c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e0e:	69fb      	ldr	r3, [r7, #28]
 8007e10:	f023 0301 	bic.w	r3, r3, #1
 8007e14:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	3308      	adds	r3, #8
 8007e1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e20:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e26:	e841 2300 	strex	r3, r2, [r1]
 8007e2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d1e5      	bne.n	8007dfe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	d118      	bne.n	8007e6c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	e853 3f00 	ldrex	r3, [r3]
 8007e46:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	f023 0310 	bic.w	r3, r3, #16
 8007e4e:	647b      	str	r3, [r7, #68]	; 0x44
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	461a      	mov	r2, r3
 8007e56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e58:	61bb      	str	r3, [r7, #24]
 8007e5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e5c:	6979      	ldr	r1, [r7, #20]
 8007e5e:	69ba      	ldr	r2, [r7, #24]
 8007e60:	e841 2300 	strex	r3, r2, [r1]
 8007e64:	613b      	str	r3, [r7, #16]
   return(result);
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d1e6      	bne.n	8007e3a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2220      	movs	r2, #32
 8007e70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007e80:	bf00      	nop
 8007e82:	3754      	adds	r7, #84	; 0x54
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr

08007e8c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e98:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007eaa:	68f8      	ldr	r0, [r7, #12]
 8007eac:	f7ff faaa 	bl	8007404 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007eb0:	bf00      	nop
 8007eb2:	3710      	adds	r7, #16
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b088      	sub	sp, #32
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	e853 3f00 	ldrex	r3, [r3]
 8007ecc:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ed4:	61fb      	str	r3, [r7, #28]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	461a      	mov	r2, r3
 8007edc:	69fb      	ldr	r3, [r7, #28]
 8007ede:	61bb      	str	r3, [r7, #24]
 8007ee0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee2:	6979      	ldr	r1, [r7, #20]
 8007ee4:	69ba      	ldr	r2, [r7, #24]
 8007ee6:	e841 2300 	strex	r3, r2, [r1]
 8007eea:	613b      	str	r3, [r7, #16]
   return(result);
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d1e6      	bne.n	8007ec0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2220      	movs	r2, #32
 8007ef6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2200      	movs	r2, #0
 8007efc:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f7ff fa76 	bl	80073f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f04:	bf00      	nop
 8007f06:	3720      	adds	r7, #32
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b096      	sub	sp, #88	; 0x58
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007f1a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f24:	2b22      	cmp	r3, #34	; 0x22
 8007f26:	f040 8098 	bne.w	800805a <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f30:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007f34:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007f38:	b2d9      	uxtb	r1, r3
 8007f3a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007f3e:	b2da      	uxtb	r2, r3
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f44:	400a      	ands	r2, r1
 8007f46:	b2d2      	uxtb	r2, r2
 8007f48:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f4e:	1c5a      	adds	r2, r3, #1
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	3b01      	subs	r3, #1
 8007f5e:	b29a      	uxth	r2, r3
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d17b      	bne.n	800806a <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f7a:	e853 3f00 	ldrex	r3, [r3]
 8007f7e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f86:	653b      	str	r3, [r7, #80]	; 0x50
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f90:	647b      	str	r3, [r7, #68]	; 0x44
 8007f92:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f94:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007f96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f98:	e841 2300 	strex	r3, r2, [r1]
 8007f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d1e6      	bne.n	8007f72 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	3308      	adds	r3, #8
 8007faa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fae:	e853 3f00 	ldrex	r3, [r3]
 8007fb2:	623b      	str	r3, [r7, #32]
   return(result);
 8007fb4:	6a3b      	ldr	r3, [r7, #32]
 8007fb6:	f023 0301 	bic.w	r3, r3, #1
 8007fba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	3308      	adds	r3, #8
 8007fc2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007fc4:	633a      	str	r2, [r7, #48]	; 0x30
 8007fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007fca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fcc:	e841 2300 	strex	r3, r2, [r1]
 8007fd0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d1e5      	bne.n	8007fa4 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2220      	movs	r2, #32
 8007fdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d12e      	bne.n	8008052 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	e853 3f00 	ldrex	r3, [r3]
 8008006:	60fb      	str	r3, [r7, #12]
   return(result);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f023 0310 	bic.w	r3, r3, #16
 800800e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	461a      	mov	r2, r3
 8008016:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008018:	61fb      	str	r3, [r7, #28]
 800801a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800801c:	69b9      	ldr	r1, [r7, #24]
 800801e:	69fa      	ldr	r2, [r7, #28]
 8008020:	e841 2300 	strex	r3, r2, [r1]
 8008024:	617b      	str	r3, [r7, #20]
   return(result);
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d1e6      	bne.n	8007ffa <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	69db      	ldr	r3, [r3, #28]
 8008032:	f003 0310 	and.w	r3, r3, #16
 8008036:	2b10      	cmp	r3, #16
 8008038:	d103      	bne.n	8008042 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	2210      	movs	r2, #16
 8008040:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008048:	4619      	mov	r1, r3
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f7ff f9e4 	bl	8007418 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008050:	e00b      	b.n	800806a <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f7fa fbbe 	bl	80027d4 <HAL_UART_RxCpltCallback>
}
 8008058:	e007      	b.n	800806a <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	699a      	ldr	r2, [r3, #24]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f042 0208 	orr.w	r2, r2, #8
 8008068:	619a      	str	r2, [r3, #24]
}
 800806a:	bf00      	nop
 800806c:	3758      	adds	r7, #88	; 0x58
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}

08008072 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008072:	b580      	push	{r7, lr}
 8008074:	b096      	sub	sp, #88	; 0x58
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008080:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800808a:	2b22      	cmp	r3, #34	; 0x22
 800808c:	f040 8098 	bne.w	80081c0 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008096:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800809e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80080a0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80080a4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80080a8:	4013      	ands	r3, r2
 80080aa:	b29a      	uxth	r2, r3
 80080ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080ae:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080b4:	1c9a      	adds	r2, r3, #2
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	3b01      	subs	r3, #1
 80080c4:	b29a      	uxth	r2, r3
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d17b      	bne.n	80081d0 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080e0:	e853 3f00 	ldrex	r3, [r3]
 80080e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80080e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80080ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	461a      	mov	r2, r3
 80080f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080f6:	643b      	str	r3, [r7, #64]	; 0x40
 80080f8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80080fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80080fe:	e841 2300 	strex	r3, r2, [r1]
 8008102:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008106:	2b00      	cmp	r3, #0
 8008108:	d1e6      	bne.n	80080d8 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	3308      	adds	r3, #8
 8008110:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008112:	6a3b      	ldr	r3, [r7, #32]
 8008114:	e853 3f00 	ldrex	r3, [r3]
 8008118:	61fb      	str	r3, [r7, #28]
   return(result);
 800811a:	69fb      	ldr	r3, [r7, #28]
 800811c:	f023 0301 	bic.w	r3, r3, #1
 8008120:	64bb      	str	r3, [r7, #72]	; 0x48
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	3308      	adds	r3, #8
 8008128:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800812a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800812c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800812e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008130:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008132:	e841 2300 	strex	r3, r2, [r1]
 8008136:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813a:	2b00      	cmp	r3, #0
 800813c:	d1e5      	bne.n	800810a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2220      	movs	r2, #32
 8008142:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2200      	movs	r2, #0
 800814a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2200      	movs	r2, #0
 8008150:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008156:	2b01      	cmp	r3, #1
 8008158:	d12e      	bne.n	80081b8 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2200      	movs	r2, #0
 800815e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	e853 3f00 	ldrex	r3, [r3]
 800816c:	60bb      	str	r3, [r7, #8]
   return(result);
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	f023 0310 	bic.w	r3, r3, #16
 8008174:	647b      	str	r3, [r7, #68]	; 0x44
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	461a      	mov	r2, r3
 800817c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800817e:	61bb      	str	r3, [r7, #24]
 8008180:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008182:	6979      	ldr	r1, [r7, #20]
 8008184:	69ba      	ldr	r2, [r7, #24]
 8008186:	e841 2300 	strex	r3, r2, [r1]
 800818a:	613b      	str	r3, [r7, #16]
   return(result);
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d1e6      	bne.n	8008160 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	69db      	ldr	r3, [r3, #28]
 8008198:	f003 0310 	and.w	r3, r3, #16
 800819c:	2b10      	cmp	r3, #16
 800819e:	d103      	bne.n	80081a8 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	2210      	movs	r2, #16
 80081a6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80081ae:	4619      	mov	r1, r3
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f7ff f931 	bl	8007418 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80081b6:	e00b      	b.n	80081d0 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f7fa fb0b 	bl	80027d4 <HAL_UART_RxCpltCallback>
}
 80081be:	e007      	b.n	80081d0 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	699a      	ldr	r2, [r3, #24]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f042 0208 	orr.w	r2, r2, #8
 80081ce:	619a      	str	r2, [r3, #24]
}
 80081d0:	bf00      	nop
 80081d2:	3758      	adds	r7, #88	; 0x58
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <__cvt>:
 80081d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081dc:	ec55 4b10 	vmov	r4, r5, d0
 80081e0:	2d00      	cmp	r5, #0
 80081e2:	460e      	mov	r6, r1
 80081e4:	4619      	mov	r1, r3
 80081e6:	462b      	mov	r3, r5
 80081e8:	bfbb      	ittet	lt
 80081ea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80081ee:	461d      	movlt	r5, r3
 80081f0:	2300      	movge	r3, #0
 80081f2:	232d      	movlt	r3, #45	; 0x2d
 80081f4:	700b      	strb	r3, [r1, #0]
 80081f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081f8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80081fc:	4691      	mov	r9, r2
 80081fe:	f023 0820 	bic.w	r8, r3, #32
 8008202:	bfbc      	itt	lt
 8008204:	4622      	movlt	r2, r4
 8008206:	4614      	movlt	r4, r2
 8008208:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800820c:	d005      	beq.n	800821a <__cvt+0x42>
 800820e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008212:	d100      	bne.n	8008216 <__cvt+0x3e>
 8008214:	3601      	adds	r6, #1
 8008216:	2102      	movs	r1, #2
 8008218:	e000      	b.n	800821c <__cvt+0x44>
 800821a:	2103      	movs	r1, #3
 800821c:	ab03      	add	r3, sp, #12
 800821e:	9301      	str	r3, [sp, #4]
 8008220:	ab02      	add	r3, sp, #8
 8008222:	9300      	str	r3, [sp, #0]
 8008224:	ec45 4b10 	vmov	d0, r4, r5
 8008228:	4653      	mov	r3, sl
 800822a:	4632      	mov	r2, r6
 800822c:	f001 fed0 	bl	8009fd0 <_dtoa_r>
 8008230:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008234:	4607      	mov	r7, r0
 8008236:	d102      	bne.n	800823e <__cvt+0x66>
 8008238:	f019 0f01 	tst.w	r9, #1
 800823c:	d022      	beq.n	8008284 <__cvt+0xac>
 800823e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008242:	eb07 0906 	add.w	r9, r7, r6
 8008246:	d110      	bne.n	800826a <__cvt+0x92>
 8008248:	783b      	ldrb	r3, [r7, #0]
 800824a:	2b30      	cmp	r3, #48	; 0x30
 800824c:	d10a      	bne.n	8008264 <__cvt+0x8c>
 800824e:	2200      	movs	r2, #0
 8008250:	2300      	movs	r3, #0
 8008252:	4620      	mov	r0, r4
 8008254:	4629      	mov	r1, r5
 8008256:	f7f8 fc57 	bl	8000b08 <__aeabi_dcmpeq>
 800825a:	b918      	cbnz	r0, 8008264 <__cvt+0x8c>
 800825c:	f1c6 0601 	rsb	r6, r6, #1
 8008260:	f8ca 6000 	str.w	r6, [sl]
 8008264:	f8da 3000 	ldr.w	r3, [sl]
 8008268:	4499      	add	r9, r3
 800826a:	2200      	movs	r2, #0
 800826c:	2300      	movs	r3, #0
 800826e:	4620      	mov	r0, r4
 8008270:	4629      	mov	r1, r5
 8008272:	f7f8 fc49 	bl	8000b08 <__aeabi_dcmpeq>
 8008276:	b108      	cbz	r0, 800827c <__cvt+0xa4>
 8008278:	f8cd 900c 	str.w	r9, [sp, #12]
 800827c:	2230      	movs	r2, #48	; 0x30
 800827e:	9b03      	ldr	r3, [sp, #12]
 8008280:	454b      	cmp	r3, r9
 8008282:	d307      	bcc.n	8008294 <__cvt+0xbc>
 8008284:	9b03      	ldr	r3, [sp, #12]
 8008286:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008288:	1bdb      	subs	r3, r3, r7
 800828a:	4638      	mov	r0, r7
 800828c:	6013      	str	r3, [r2, #0]
 800828e:	b004      	add	sp, #16
 8008290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008294:	1c59      	adds	r1, r3, #1
 8008296:	9103      	str	r1, [sp, #12]
 8008298:	701a      	strb	r2, [r3, #0]
 800829a:	e7f0      	b.n	800827e <__cvt+0xa6>

0800829c <__exponent>:
 800829c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800829e:	4603      	mov	r3, r0
 80082a0:	2900      	cmp	r1, #0
 80082a2:	bfb8      	it	lt
 80082a4:	4249      	neglt	r1, r1
 80082a6:	f803 2b02 	strb.w	r2, [r3], #2
 80082aa:	bfb4      	ite	lt
 80082ac:	222d      	movlt	r2, #45	; 0x2d
 80082ae:	222b      	movge	r2, #43	; 0x2b
 80082b0:	2909      	cmp	r1, #9
 80082b2:	7042      	strb	r2, [r0, #1]
 80082b4:	dd2a      	ble.n	800830c <__exponent+0x70>
 80082b6:	f10d 0207 	add.w	r2, sp, #7
 80082ba:	4617      	mov	r7, r2
 80082bc:	260a      	movs	r6, #10
 80082be:	4694      	mov	ip, r2
 80082c0:	fb91 f5f6 	sdiv	r5, r1, r6
 80082c4:	fb06 1415 	mls	r4, r6, r5, r1
 80082c8:	3430      	adds	r4, #48	; 0x30
 80082ca:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80082ce:	460c      	mov	r4, r1
 80082d0:	2c63      	cmp	r4, #99	; 0x63
 80082d2:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80082d6:	4629      	mov	r1, r5
 80082d8:	dcf1      	bgt.n	80082be <__exponent+0x22>
 80082da:	3130      	adds	r1, #48	; 0x30
 80082dc:	f1ac 0402 	sub.w	r4, ip, #2
 80082e0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80082e4:	1c41      	adds	r1, r0, #1
 80082e6:	4622      	mov	r2, r4
 80082e8:	42ba      	cmp	r2, r7
 80082ea:	d30a      	bcc.n	8008302 <__exponent+0x66>
 80082ec:	f10d 0209 	add.w	r2, sp, #9
 80082f0:	eba2 020c 	sub.w	r2, r2, ip
 80082f4:	42bc      	cmp	r4, r7
 80082f6:	bf88      	it	hi
 80082f8:	2200      	movhi	r2, #0
 80082fa:	4413      	add	r3, r2
 80082fc:	1a18      	subs	r0, r3, r0
 80082fe:	b003      	add	sp, #12
 8008300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008302:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008306:	f801 5f01 	strb.w	r5, [r1, #1]!
 800830a:	e7ed      	b.n	80082e8 <__exponent+0x4c>
 800830c:	2330      	movs	r3, #48	; 0x30
 800830e:	3130      	adds	r1, #48	; 0x30
 8008310:	7083      	strb	r3, [r0, #2]
 8008312:	70c1      	strb	r1, [r0, #3]
 8008314:	1d03      	adds	r3, r0, #4
 8008316:	e7f1      	b.n	80082fc <__exponent+0x60>

08008318 <_printf_float>:
 8008318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800831c:	ed2d 8b02 	vpush	{d8}
 8008320:	b08d      	sub	sp, #52	; 0x34
 8008322:	460c      	mov	r4, r1
 8008324:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008328:	4616      	mov	r6, r2
 800832a:	461f      	mov	r7, r3
 800832c:	4605      	mov	r5, r0
 800832e:	f001 fd77 	bl	8009e20 <_localeconv_r>
 8008332:	f8d0 a000 	ldr.w	sl, [r0]
 8008336:	4650      	mov	r0, sl
 8008338:	f7f7 ffba 	bl	80002b0 <strlen>
 800833c:	2300      	movs	r3, #0
 800833e:	930a      	str	r3, [sp, #40]	; 0x28
 8008340:	6823      	ldr	r3, [r4, #0]
 8008342:	9305      	str	r3, [sp, #20]
 8008344:	f8d8 3000 	ldr.w	r3, [r8]
 8008348:	f894 b018 	ldrb.w	fp, [r4, #24]
 800834c:	3307      	adds	r3, #7
 800834e:	f023 0307 	bic.w	r3, r3, #7
 8008352:	f103 0208 	add.w	r2, r3, #8
 8008356:	f8c8 2000 	str.w	r2, [r8]
 800835a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800835e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008362:	9307      	str	r3, [sp, #28]
 8008364:	f8cd 8018 	str.w	r8, [sp, #24]
 8008368:	ee08 0a10 	vmov	s16, r0
 800836c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008370:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008374:	4b9e      	ldr	r3, [pc, #632]	; (80085f0 <_printf_float+0x2d8>)
 8008376:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800837a:	f7f8 fbf7 	bl	8000b6c <__aeabi_dcmpun>
 800837e:	bb88      	cbnz	r0, 80083e4 <_printf_float+0xcc>
 8008380:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008384:	4b9a      	ldr	r3, [pc, #616]	; (80085f0 <_printf_float+0x2d8>)
 8008386:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800838a:	f7f8 fbd1 	bl	8000b30 <__aeabi_dcmple>
 800838e:	bb48      	cbnz	r0, 80083e4 <_printf_float+0xcc>
 8008390:	2200      	movs	r2, #0
 8008392:	2300      	movs	r3, #0
 8008394:	4640      	mov	r0, r8
 8008396:	4649      	mov	r1, r9
 8008398:	f7f8 fbc0 	bl	8000b1c <__aeabi_dcmplt>
 800839c:	b110      	cbz	r0, 80083a4 <_printf_float+0x8c>
 800839e:	232d      	movs	r3, #45	; 0x2d
 80083a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083a4:	4a93      	ldr	r2, [pc, #588]	; (80085f4 <_printf_float+0x2dc>)
 80083a6:	4b94      	ldr	r3, [pc, #592]	; (80085f8 <_printf_float+0x2e0>)
 80083a8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80083ac:	bf94      	ite	ls
 80083ae:	4690      	movls	r8, r2
 80083b0:	4698      	movhi	r8, r3
 80083b2:	2303      	movs	r3, #3
 80083b4:	6123      	str	r3, [r4, #16]
 80083b6:	9b05      	ldr	r3, [sp, #20]
 80083b8:	f023 0304 	bic.w	r3, r3, #4
 80083bc:	6023      	str	r3, [r4, #0]
 80083be:	f04f 0900 	mov.w	r9, #0
 80083c2:	9700      	str	r7, [sp, #0]
 80083c4:	4633      	mov	r3, r6
 80083c6:	aa0b      	add	r2, sp, #44	; 0x2c
 80083c8:	4621      	mov	r1, r4
 80083ca:	4628      	mov	r0, r5
 80083cc:	f000 f9da 	bl	8008784 <_printf_common>
 80083d0:	3001      	adds	r0, #1
 80083d2:	f040 8090 	bne.w	80084f6 <_printf_float+0x1de>
 80083d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083da:	b00d      	add	sp, #52	; 0x34
 80083dc:	ecbd 8b02 	vpop	{d8}
 80083e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083e4:	4642      	mov	r2, r8
 80083e6:	464b      	mov	r3, r9
 80083e8:	4640      	mov	r0, r8
 80083ea:	4649      	mov	r1, r9
 80083ec:	f7f8 fbbe 	bl	8000b6c <__aeabi_dcmpun>
 80083f0:	b140      	cbz	r0, 8008404 <_printf_float+0xec>
 80083f2:	464b      	mov	r3, r9
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	bfbc      	itt	lt
 80083f8:	232d      	movlt	r3, #45	; 0x2d
 80083fa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80083fe:	4a7f      	ldr	r2, [pc, #508]	; (80085fc <_printf_float+0x2e4>)
 8008400:	4b7f      	ldr	r3, [pc, #508]	; (8008600 <_printf_float+0x2e8>)
 8008402:	e7d1      	b.n	80083a8 <_printf_float+0x90>
 8008404:	6863      	ldr	r3, [r4, #4]
 8008406:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800840a:	9206      	str	r2, [sp, #24]
 800840c:	1c5a      	adds	r2, r3, #1
 800840e:	d13f      	bne.n	8008490 <_printf_float+0x178>
 8008410:	2306      	movs	r3, #6
 8008412:	6063      	str	r3, [r4, #4]
 8008414:	9b05      	ldr	r3, [sp, #20]
 8008416:	6861      	ldr	r1, [r4, #4]
 8008418:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800841c:	2300      	movs	r3, #0
 800841e:	9303      	str	r3, [sp, #12]
 8008420:	ab0a      	add	r3, sp, #40	; 0x28
 8008422:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008426:	ab09      	add	r3, sp, #36	; 0x24
 8008428:	ec49 8b10 	vmov	d0, r8, r9
 800842c:	9300      	str	r3, [sp, #0]
 800842e:	6022      	str	r2, [r4, #0]
 8008430:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008434:	4628      	mov	r0, r5
 8008436:	f7ff fecf 	bl	80081d8 <__cvt>
 800843a:	9b06      	ldr	r3, [sp, #24]
 800843c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800843e:	2b47      	cmp	r3, #71	; 0x47
 8008440:	4680      	mov	r8, r0
 8008442:	d108      	bne.n	8008456 <_printf_float+0x13e>
 8008444:	1cc8      	adds	r0, r1, #3
 8008446:	db02      	blt.n	800844e <_printf_float+0x136>
 8008448:	6863      	ldr	r3, [r4, #4]
 800844a:	4299      	cmp	r1, r3
 800844c:	dd41      	ble.n	80084d2 <_printf_float+0x1ba>
 800844e:	f1ab 0302 	sub.w	r3, fp, #2
 8008452:	fa5f fb83 	uxtb.w	fp, r3
 8008456:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800845a:	d820      	bhi.n	800849e <_printf_float+0x186>
 800845c:	3901      	subs	r1, #1
 800845e:	465a      	mov	r2, fp
 8008460:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008464:	9109      	str	r1, [sp, #36]	; 0x24
 8008466:	f7ff ff19 	bl	800829c <__exponent>
 800846a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800846c:	1813      	adds	r3, r2, r0
 800846e:	2a01      	cmp	r2, #1
 8008470:	4681      	mov	r9, r0
 8008472:	6123      	str	r3, [r4, #16]
 8008474:	dc02      	bgt.n	800847c <_printf_float+0x164>
 8008476:	6822      	ldr	r2, [r4, #0]
 8008478:	07d2      	lsls	r2, r2, #31
 800847a:	d501      	bpl.n	8008480 <_printf_float+0x168>
 800847c:	3301      	adds	r3, #1
 800847e:	6123      	str	r3, [r4, #16]
 8008480:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008484:	2b00      	cmp	r3, #0
 8008486:	d09c      	beq.n	80083c2 <_printf_float+0xaa>
 8008488:	232d      	movs	r3, #45	; 0x2d
 800848a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800848e:	e798      	b.n	80083c2 <_printf_float+0xaa>
 8008490:	9a06      	ldr	r2, [sp, #24]
 8008492:	2a47      	cmp	r2, #71	; 0x47
 8008494:	d1be      	bne.n	8008414 <_printf_float+0xfc>
 8008496:	2b00      	cmp	r3, #0
 8008498:	d1bc      	bne.n	8008414 <_printf_float+0xfc>
 800849a:	2301      	movs	r3, #1
 800849c:	e7b9      	b.n	8008412 <_printf_float+0xfa>
 800849e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80084a2:	d118      	bne.n	80084d6 <_printf_float+0x1be>
 80084a4:	2900      	cmp	r1, #0
 80084a6:	6863      	ldr	r3, [r4, #4]
 80084a8:	dd0b      	ble.n	80084c2 <_printf_float+0x1aa>
 80084aa:	6121      	str	r1, [r4, #16]
 80084ac:	b913      	cbnz	r3, 80084b4 <_printf_float+0x19c>
 80084ae:	6822      	ldr	r2, [r4, #0]
 80084b0:	07d0      	lsls	r0, r2, #31
 80084b2:	d502      	bpl.n	80084ba <_printf_float+0x1a2>
 80084b4:	3301      	adds	r3, #1
 80084b6:	440b      	add	r3, r1
 80084b8:	6123      	str	r3, [r4, #16]
 80084ba:	65a1      	str	r1, [r4, #88]	; 0x58
 80084bc:	f04f 0900 	mov.w	r9, #0
 80084c0:	e7de      	b.n	8008480 <_printf_float+0x168>
 80084c2:	b913      	cbnz	r3, 80084ca <_printf_float+0x1b2>
 80084c4:	6822      	ldr	r2, [r4, #0]
 80084c6:	07d2      	lsls	r2, r2, #31
 80084c8:	d501      	bpl.n	80084ce <_printf_float+0x1b6>
 80084ca:	3302      	adds	r3, #2
 80084cc:	e7f4      	b.n	80084b8 <_printf_float+0x1a0>
 80084ce:	2301      	movs	r3, #1
 80084d0:	e7f2      	b.n	80084b8 <_printf_float+0x1a0>
 80084d2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80084d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084d8:	4299      	cmp	r1, r3
 80084da:	db05      	blt.n	80084e8 <_printf_float+0x1d0>
 80084dc:	6823      	ldr	r3, [r4, #0]
 80084de:	6121      	str	r1, [r4, #16]
 80084e0:	07d8      	lsls	r0, r3, #31
 80084e2:	d5ea      	bpl.n	80084ba <_printf_float+0x1a2>
 80084e4:	1c4b      	adds	r3, r1, #1
 80084e6:	e7e7      	b.n	80084b8 <_printf_float+0x1a0>
 80084e8:	2900      	cmp	r1, #0
 80084ea:	bfd4      	ite	le
 80084ec:	f1c1 0202 	rsble	r2, r1, #2
 80084f0:	2201      	movgt	r2, #1
 80084f2:	4413      	add	r3, r2
 80084f4:	e7e0      	b.n	80084b8 <_printf_float+0x1a0>
 80084f6:	6823      	ldr	r3, [r4, #0]
 80084f8:	055a      	lsls	r2, r3, #21
 80084fa:	d407      	bmi.n	800850c <_printf_float+0x1f4>
 80084fc:	6923      	ldr	r3, [r4, #16]
 80084fe:	4642      	mov	r2, r8
 8008500:	4631      	mov	r1, r6
 8008502:	4628      	mov	r0, r5
 8008504:	47b8      	blx	r7
 8008506:	3001      	adds	r0, #1
 8008508:	d12c      	bne.n	8008564 <_printf_float+0x24c>
 800850a:	e764      	b.n	80083d6 <_printf_float+0xbe>
 800850c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008510:	f240 80e0 	bls.w	80086d4 <_printf_float+0x3bc>
 8008514:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008518:	2200      	movs	r2, #0
 800851a:	2300      	movs	r3, #0
 800851c:	f7f8 faf4 	bl	8000b08 <__aeabi_dcmpeq>
 8008520:	2800      	cmp	r0, #0
 8008522:	d034      	beq.n	800858e <_printf_float+0x276>
 8008524:	4a37      	ldr	r2, [pc, #220]	; (8008604 <_printf_float+0x2ec>)
 8008526:	2301      	movs	r3, #1
 8008528:	4631      	mov	r1, r6
 800852a:	4628      	mov	r0, r5
 800852c:	47b8      	blx	r7
 800852e:	3001      	adds	r0, #1
 8008530:	f43f af51 	beq.w	80083d6 <_printf_float+0xbe>
 8008534:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008538:	429a      	cmp	r2, r3
 800853a:	db02      	blt.n	8008542 <_printf_float+0x22a>
 800853c:	6823      	ldr	r3, [r4, #0]
 800853e:	07d8      	lsls	r0, r3, #31
 8008540:	d510      	bpl.n	8008564 <_printf_float+0x24c>
 8008542:	ee18 3a10 	vmov	r3, s16
 8008546:	4652      	mov	r2, sl
 8008548:	4631      	mov	r1, r6
 800854a:	4628      	mov	r0, r5
 800854c:	47b8      	blx	r7
 800854e:	3001      	adds	r0, #1
 8008550:	f43f af41 	beq.w	80083d6 <_printf_float+0xbe>
 8008554:	f04f 0800 	mov.w	r8, #0
 8008558:	f104 091a 	add.w	r9, r4, #26
 800855c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800855e:	3b01      	subs	r3, #1
 8008560:	4543      	cmp	r3, r8
 8008562:	dc09      	bgt.n	8008578 <_printf_float+0x260>
 8008564:	6823      	ldr	r3, [r4, #0]
 8008566:	079b      	lsls	r3, r3, #30
 8008568:	f100 8107 	bmi.w	800877a <_printf_float+0x462>
 800856c:	68e0      	ldr	r0, [r4, #12]
 800856e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008570:	4298      	cmp	r0, r3
 8008572:	bfb8      	it	lt
 8008574:	4618      	movlt	r0, r3
 8008576:	e730      	b.n	80083da <_printf_float+0xc2>
 8008578:	2301      	movs	r3, #1
 800857a:	464a      	mov	r2, r9
 800857c:	4631      	mov	r1, r6
 800857e:	4628      	mov	r0, r5
 8008580:	47b8      	blx	r7
 8008582:	3001      	adds	r0, #1
 8008584:	f43f af27 	beq.w	80083d6 <_printf_float+0xbe>
 8008588:	f108 0801 	add.w	r8, r8, #1
 800858c:	e7e6      	b.n	800855c <_printf_float+0x244>
 800858e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008590:	2b00      	cmp	r3, #0
 8008592:	dc39      	bgt.n	8008608 <_printf_float+0x2f0>
 8008594:	4a1b      	ldr	r2, [pc, #108]	; (8008604 <_printf_float+0x2ec>)
 8008596:	2301      	movs	r3, #1
 8008598:	4631      	mov	r1, r6
 800859a:	4628      	mov	r0, r5
 800859c:	47b8      	blx	r7
 800859e:	3001      	adds	r0, #1
 80085a0:	f43f af19 	beq.w	80083d6 <_printf_float+0xbe>
 80085a4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80085a8:	4313      	orrs	r3, r2
 80085aa:	d102      	bne.n	80085b2 <_printf_float+0x29a>
 80085ac:	6823      	ldr	r3, [r4, #0]
 80085ae:	07d9      	lsls	r1, r3, #31
 80085b0:	d5d8      	bpl.n	8008564 <_printf_float+0x24c>
 80085b2:	ee18 3a10 	vmov	r3, s16
 80085b6:	4652      	mov	r2, sl
 80085b8:	4631      	mov	r1, r6
 80085ba:	4628      	mov	r0, r5
 80085bc:	47b8      	blx	r7
 80085be:	3001      	adds	r0, #1
 80085c0:	f43f af09 	beq.w	80083d6 <_printf_float+0xbe>
 80085c4:	f04f 0900 	mov.w	r9, #0
 80085c8:	f104 0a1a 	add.w	sl, r4, #26
 80085cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085ce:	425b      	negs	r3, r3
 80085d0:	454b      	cmp	r3, r9
 80085d2:	dc01      	bgt.n	80085d8 <_printf_float+0x2c0>
 80085d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085d6:	e792      	b.n	80084fe <_printf_float+0x1e6>
 80085d8:	2301      	movs	r3, #1
 80085da:	4652      	mov	r2, sl
 80085dc:	4631      	mov	r1, r6
 80085de:	4628      	mov	r0, r5
 80085e0:	47b8      	blx	r7
 80085e2:	3001      	adds	r0, #1
 80085e4:	f43f aef7 	beq.w	80083d6 <_printf_float+0xbe>
 80085e8:	f109 0901 	add.w	r9, r9, #1
 80085ec:	e7ee      	b.n	80085cc <_printf_float+0x2b4>
 80085ee:	bf00      	nop
 80085f0:	7fefffff 	.word	0x7fefffff
 80085f4:	0800ca7c 	.word	0x0800ca7c
 80085f8:	0800ca80 	.word	0x0800ca80
 80085fc:	0800ca84 	.word	0x0800ca84
 8008600:	0800ca88 	.word	0x0800ca88
 8008604:	0800ca8c 	.word	0x0800ca8c
 8008608:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800860a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800860c:	429a      	cmp	r2, r3
 800860e:	bfa8      	it	ge
 8008610:	461a      	movge	r2, r3
 8008612:	2a00      	cmp	r2, #0
 8008614:	4691      	mov	r9, r2
 8008616:	dc37      	bgt.n	8008688 <_printf_float+0x370>
 8008618:	f04f 0b00 	mov.w	fp, #0
 800861c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008620:	f104 021a 	add.w	r2, r4, #26
 8008624:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008626:	9305      	str	r3, [sp, #20]
 8008628:	eba3 0309 	sub.w	r3, r3, r9
 800862c:	455b      	cmp	r3, fp
 800862e:	dc33      	bgt.n	8008698 <_printf_float+0x380>
 8008630:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008634:	429a      	cmp	r2, r3
 8008636:	db3b      	blt.n	80086b0 <_printf_float+0x398>
 8008638:	6823      	ldr	r3, [r4, #0]
 800863a:	07da      	lsls	r2, r3, #31
 800863c:	d438      	bmi.n	80086b0 <_printf_float+0x398>
 800863e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008642:	eba2 0903 	sub.w	r9, r2, r3
 8008646:	9b05      	ldr	r3, [sp, #20]
 8008648:	1ad2      	subs	r2, r2, r3
 800864a:	4591      	cmp	r9, r2
 800864c:	bfa8      	it	ge
 800864e:	4691      	movge	r9, r2
 8008650:	f1b9 0f00 	cmp.w	r9, #0
 8008654:	dc35      	bgt.n	80086c2 <_printf_float+0x3aa>
 8008656:	f04f 0800 	mov.w	r8, #0
 800865a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800865e:	f104 0a1a 	add.w	sl, r4, #26
 8008662:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008666:	1a9b      	subs	r3, r3, r2
 8008668:	eba3 0309 	sub.w	r3, r3, r9
 800866c:	4543      	cmp	r3, r8
 800866e:	f77f af79 	ble.w	8008564 <_printf_float+0x24c>
 8008672:	2301      	movs	r3, #1
 8008674:	4652      	mov	r2, sl
 8008676:	4631      	mov	r1, r6
 8008678:	4628      	mov	r0, r5
 800867a:	47b8      	blx	r7
 800867c:	3001      	adds	r0, #1
 800867e:	f43f aeaa 	beq.w	80083d6 <_printf_float+0xbe>
 8008682:	f108 0801 	add.w	r8, r8, #1
 8008686:	e7ec      	b.n	8008662 <_printf_float+0x34a>
 8008688:	4613      	mov	r3, r2
 800868a:	4631      	mov	r1, r6
 800868c:	4642      	mov	r2, r8
 800868e:	4628      	mov	r0, r5
 8008690:	47b8      	blx	r7
 8008692:	3001      	adds	r0, #1
 8008694:	d1c0      	bne.n	8008618 <_printf_float+0x300>
 8008696:	e69e      	b.n	80083d6 <_printf_float+0xbe>
 8008698:	2301      	movs	r3, #1
 800869a:	4631      	mov	r1, r6
 800869c:	4628      	mov	r0, r5
 800869e:	9205      	str	r2, [sp, #20]
 80086a0:	47b8      	blx	r7
 80086a2:	3001      	adds	r0, #1
 80086a4:	f43f ae97 	beq.w	80083d6 <_printf_float+0xbe>
 80086a8:	9a05      	ldr	r2, [sp, #20]
 80086aa:	f10b 0b01 	add.w	fp, fp, #1
 80086ae:	e7b9      	b.n	8008624 <_printf_float+0x30c>
 80086b0:	ee18 3a10 	vmov	r3, s16
 80086b4:	4652      	mov	r2, sl
 80086b6:	4631      	mov	r1, r6
 80086b8:	4628      	mov	r0, r5
 80086ba:	47b8      	blx	r7
 80086bc:	3001      	adds	r0, #1
 80086be:	d1be      	bne.n	800863e <_printf_float+0x326>
 80086c0:	e689      	b.n	80083d6 <_printf_float+0xbe>
 80086c2:	9a05      	ldr	r2, [sp, #20]
 80086c4:	464b      	mov	r3, r9
 80086c6:	4442      	add	r2, r8
 80086c8:	4631      	mov	r1, r6
 80086ca:	4628      	mov	r0, r5
 80086cc:	47b8      	blx	r7
 80086ce:	3001      	adds	r0, #1
 80086d0:	d1c1      	bne.n	8008656 <_printf_float+0x33e>
 80086d2:	e680      	b.n	80083d6 <_printf_float+0xbe>
 80086d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086d6:	2a01      	cmp	r2, #1
 80086d8:	dc01      	bgt.n	80086de <_printf_float+0x3c6>
 80086da:	07db      	lsls	r3, r3, #31
 80086dc:	d53a      	bpl.n	8008754 <_printf_float+0x43c>
 80086de:	2301      	movs	r3, #1
 80086e0:	4642      	mov	r2, r8
 80086e2:	4631      	mov	r1, r6
 80086e4:	4628      	mov	r0, r5
 80086e6:	47b8      	blx	r7
 80086e8:	3001      	adds	r0, #1
 80086ea:	f43f ae74 	beq.w	80083d6 <_printf_float+0xbe>
 80086ee:	ee18 3a10 	vmov	r3, s16
 80086f2:	4652      	mov	r2, sl
 80086f4:	4631      	mov	r1, r6
 80086f6:	4628      	mov	r0, r5
 80086f8:	47b8      	blx	r7
 80086fa:	3001      	adds	r0, #1
 80086fc:	f43f ae6b 	beq.w	80083d6 <_printf_float+0xbe>
 8008700:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008704:	2200      	movs	r2, #0
 8008706:	2300      	movs	r3, #0
 8008708:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800870c:	f7f8 f9fc 	bl	8000b08 <__aeabi_dcmpeq>
 8008710:	b9d8      	cbnz	r0, 800874a <_printf_float+0x432>
 8008712:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8008716:	f108 0201 	add.w	r2, r8, #1
 800871a:	4631      	mov	r1, r6
 800871c:	4628      	mov	r0, r5
 800871e:	47b8      	blx	r7
 8008720:	3001      	adds	r0, #1
 8008722:	d10e      	bne.n	8008742 <_printf_float+0x42a>
 8008724:	e657      	b.n	80083d6 <_printf_float+0xbe>
 8008726:	2301      	movs	r3, #1
 8008728:	4652      	mov	r2, sl
 800872a:	4631      	mov	r1, r6
 800872c:	4628      	mov	r0, r5
 800872e:	47b8      	blx	r7
 8008730:	3001      	adds	r0, #1
 8008732:	f43f ae50 	beq.w	80083d6 <_printf_float+0xbe>
 8008736:	f108 0801 	add.w	r8, r8, #1
 800873a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800873c:	3b01      	subs	r3, #1
 800873e:	4543      	cmp	r3, r8
 8008740:	dcf1      	bgt.n	8008726 <_printf_float+0x40e>
 8008742:	464b      	mov	r3, r9
 8008744:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008748:	e6da      	b.n	8008500 <_printf_float+0x1e8>
 800874a:	f04f 0800 	mov.w	r8, #0
 800874e:	f104 0a1a 	add.w	sl, r4, #26
 8008752:	e7f2      	b.n	800873a <_printf_float+0x422>
 8008754:	2301      	movs	r3, #1
 8008756:	4642      	mov	r2, r8
 8008758:	e7df      	b.n	800871a <_printf_float+0x402>
 800875a:	2301      	movs	r3, #1
 800875c:	464a      	mov	r2, r9
 800875e:	4631      	mov	r1, r6
 8008760:	4628      	mov	r0, r5
 8008762:	47b8      	blx	r7
 8008764:	3001      	adds	r0, #1
 8008766:	f43f ae36 	beq.w	80083d6 <_printf_float+0xbe>
 800876a:	f108 0801 	add.w	r8, r8, #1
 800876e:	68e3      	ldr	r3, [r4, #12]
 8008770:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008772:	1a5b      	subs	r3, r3, r1
 8008774:	4543      	cmp	r3, r8
 8008776:	dcf0      	bgt.n	800875a <_printf_float+0x442>
 8008778:	e6f8      	b.n	800856c <_printf_float+0x254>
 800877a:	f04f 0800 	mov.w	r8, #0
 800877e:	f104 0919 	add.w	r9, r4, #25
 8008782:	e7f4      	b.n	800876e <_printf_float+0x456>

08008784 <_printf_common>:
 8008784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008788:	4616      	mov	r6, r2
 800878a:	4699      	mov	r9, r3
 800878c:	688a      	ldr	r2, [r1, #8]
 800878e:	690b      	ldr	r3, [r1, #16]
 8008790:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008794:	4293      	cmp	r3, r2
 8008796:	bfb8      	it	lt
 8008798:	4613      	movlt	r3, r2
 800879a:	6033      	str	r3, [r6, #0]
 800879c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80087a0:	4607      	mov	r7, r0
 80087a2:	460c      	mov	r4, r1
 80087a4:	b10a      	cbz	r2, 80087aa <_printf_common+0x26>
 80087a6:	3301      	adds	r3, #1
 80087a8:	6033      	str	r3, [r6, #0]
 80087aa:	6823      	ldr	r3, [r4, #0]
 80087ac:	0699      	lsls	r1, r3, #26
 80087ae:	bf42      	ittt	mi
 80087b0:	6833      	ldrmi	r3, [r6, #0]
 80087b2:	3302      	addmi	r3, #2
 80087b4:	6033      	strmi	r3, [r6, #0]
 80087b6:	6825      	ldr	r5, [r4, #0]
 80087b8:	f015 0506 	ands.w	r5, r5, #6
 80087bc:	d106      	bne.n	80087cc <_printf_common+0x48>
 80087be:	f104 0a19 	add.w	sl, r4, #25
 80087c2:	68e3      	ldr	r3, [r4, #12]
 80087c4:	6832      	ldr	r2, [r6, #0]
 80087c6:	1a9b      	subs	r3, r3, r2
 80087c8:	42ab      	cmp	r3, r5
 80087ca:	dc26      	bgt.n	800881a <_printf_common+0x96>
 80087cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80087d0:	1e13      	subs	r3, r2, #0
 80087d2:	6822      	ldr	r2, [r4, #0]
 80087d4:	bf18      	it	ne
 80087d6:	2301      	movne	r3, #1
 80087d8:	0692      	lsls	r2, r2, #26
 80087da:	d42b      	bmi.n	8008834 <_printf_common+0xb0>
 80087dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80087e0:	4649      	mov	r1, r9
 80087e2:	4638      	mov	r0, r7
 80087e4:	47c0      	blx	r8
 80087e6:	3001      	adds	r0, #1
 80087e8:	d01e      	beq.n	8008828 <_printf_common+0xa4>
 80087ea:	6823      	ldr	r3, [r4, #0]
 80087ec:	6922      	ldr	r2, [r4, #16]
 80087ee:	f003 0306 	and.w	r3, r3, #6
 80087f2:	2b04      	cmp	r3, #4
 80087f4:	bf02      	ittt	eq
 80087f6:	68e5      	ldreq	r5, [r4, #12]
 80087f8:	6833      	ldreq	r3, [r6, #0]
 80087fa:	1aed      	subeq	r5, r5, r3
 80087fc:	68a3      	ldr	r3, [r4, #8]
 80087fe:	bf0c      	ite	eq
 8008800:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008804:	2500      	movne	r5, #0
 8008806:	4293      	cmp	r3, r2
 8008808:	bfc4      	itt	gt
 800880a:	1a9b      	subgt	r3, r3, r2
 800880c:	18ed      	addgt	r5, r5, r3
 800880e:	2600      	movs	r6, #0
 8008810:	341a      	adds	r4, #26
 8008812:	42b5      	cmp	r5, r6
 8008814:	d11a      	bne.n	800884c <_printf_common+0xc8>
 8008816:	2000      	movs	r0, #0
 8008818:	e008      	b.n	800882c <_printf_common+0xa8>
 800881a:	2301      	movs	r3, #1
 800881c:	4652      	mov	r2, sl
 800881e:	4649      	mov	r1, r9
 8008820:	4638      	mov	r0, r7
 8008822:	47c0      	blx	r8
 8008824:	3001      	adds	r0, #1
 8008826:	d103      	bne.n	8008830 <_printf_common+0xac>
 8008828:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800882c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008830:	3501      	adds	r5, #1
 8008832:	e7c6      	b.n	80087c2 <_printf_common+0x3e>
 8008834:	18e1      	adds	r1, r4, r3
 8008836:	1c5a      	adds	r2, r3, #1
 8008838:	2030      	movs	r0, #48	; 0x30
 800883a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800883e:	4422      	add	r2, r4
 8008840:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008844:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008848:	3302      	adds	r3, #2
 800884a:	e7c7      	b.n	80087dc <_printf_common+0x58>
 800884c:	2301      	movs	r3, #1
 800884e:	4622      	mov	r2, r4
 8008850:	4649      	mov	r1, r9
 8008852:	4638      	mov	r0, r7
 8008854:	47c0      	blx	r8
 8008856:	3001      	adds	r0, #1
 8008858:	d0e6      	beq.n	8008828 <_printf_common+0xa4>
 800885a:	3601      	adds	r6, #1
 800885c:	e7d9      	b.n	8008812 <_printf_common+0x8e>
	...

08008860 <_printf_i>:
 8008860:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008864:	7e0f      	ldrb	r7, [r1, #24]
 8008866:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008868:	2f78      	cmp	r7, #120	; 0x78
 800886a:	4691      	mov	r9, r2
 800886c:	4680      	mov	r8, r0
 800886e:	460c      	mov	r4, r1
 8008870:	469a      	mov	sl, r3
 8008872:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008876:	d807      	bhi.n	8008888 <_printf_i+0x28>
 8008878:	2f62      	cmp	r7, #98	; 0x62
 800887a:	d80a      	bhi.n	8008892 <_printf_i+0x32>
 800887c:	2f00      	cmp	r7, #0
 800887e:	f000 80d4 	beq.w	8008a2a <_printf_i+0x1ca>
 8008882:	2f58      	cmp	r7, #88	; 0x58
 8008884:	f000 80c0 	beq.w	8008a08 <_printf_i+0x1a8>
 8008888:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800888c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008890:	e03a      	b.n	8008908 <_printf_i+0xa8>
 8008892:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008896:	2b15      	cmp	r3, #21
 8008898:	d8f6      	bhi.n	8008888 <_printf_i+0x28>
 800889a:	a101      	add	r1, pc, #4	; (adr r1, 80088a0 <_printf_i+0x40>)
 800889c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80088a0:	080088f9 	.word	0x080088f9
 80088a4:	0800890d 	.word	0x0800890d
 80088a8:	08008889 	.word	0x08008889
 80088ac:	08008889 	.word	0x08008889
 80088b0:	08008889 	.word	0x08008889
 80088b4:	08008889 	.word	0x08008889
 80088b8:	0800890d 	.word	0x0800890d
 80088bc:	08008889 	.word	0x08008889
 80088c0:	08008889 	.word	0x08008889
 80088c4:	08008889 	.word	0x08008889
 80088c8:	08008889 	.word	0x08008889
 80088cc:	08008a11 	.word	0x08008a11
 80088d0:	08008939 	.word	0x08008939
 80088d4:	080089cb 	.word	0x080089cb
 80088d8:	08008889 	.word	0x08008889
 80088dc:	08008889 	.word	0x08008889
 80088e0:	08008a33 	.word	0x08008a33
 80088e4:	08008889 	.word	0x08008889
 80088e8:	08008939 	.word	0x08008939
 80088ec:	08008889 	.word	0x08008889
 80088f0:	08008889 	.word	0x08008889
 80088f4:	080089d3 	.word	0x080089d3
 80088f8:	682b      	ldr	r3, [r5, #0]
 80088fa:	1d1a      	adds	r2, r3, #4
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	602a      	str	r2, [r5, #0]
 8008900:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008904:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008908:	2301      	movs	r3, #1
 800890a:	e09f      	b.n	8008a4c <_printf_i+0x1ec>
 800890c:	6820      	ldr	r0, [r4, #0]
 800890e:	682b      	ldr	r3, [r5, #0]
 8008910:	0607      	lsls	r7, r0, #24
 8008912:	f103 0104 	add.w	r1, r3, #4
 8008916:	6029      	str	r1, [r5, #0]
 8008918:	d501      	bpl.n	800891e <_printf_i+0xbe>
 800891a:	681e      	ldr	r6, [r3, #0]
 800891c:	e003      	b.n	8008926 <_printf_i+0xc6>
 800891e:	0646      	lsls	r6, r0, #25
 8008920:	d5fb      	bpl.n	800891a <_printf_i+0xba>
 8008922:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008926:	2e00      	cmp	r6, #0
 8008928:	da03      	bge.n	8008932 <_printf_i+0xd2>
 800892a:	232d      	movs	r3, #45	; 0x2d
 800892c:	4276      	negs	r6, r6
 800892e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008932:	485a      	ldr	r0, [pc, #360]	; (8008a9c <_printf_i+0x23c>)
 8008934:	230a      	movs	r3, #10
 8008936:	e012      	b.n	800895e <_printf_i+0xfe>
 8008938:	682b      	ldr	r3, [r5, #0]
 800893a:	6820      	ldr	r0, [r4, #0]
 800893c:	1d19      	adds	r1, r3, #4
 800893e:	6029      	str	r1, [r5, #0]
 8008940:	0605      	lsls	r5, r0, #24
 8008942:	d501      	bpl.n	8008948 <_printf_i+0xe8>
 8008944:	681e      	ldr	r6, [r3, #0]
 8008946:	e002      	b.n	800894e <_printf_i+0xee>
 8008948:	0641      	lsls	r1, r0, #25
 800894a:	d5fb      	bpl.n	8008944 <_printf_i+0xe4>
 800894c:	881e      	ldrh	r6, [r3, #0]
 800894e:	4853      	ldr	r0, [pc, #332]	; (8008a9c <_printf_i+0x23c>)
 8008950:	2f6f      	cmp	r7, #111	; 0x6f
 8008952:	bf0c      	ite	eq
 8008954:	2308      	moveq	r3, #8
 8008956:	230a      	movne	r3, #10
 8008958:	2100      	movs	r1, #0
 800895a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800895e:	6865      	ldr	r5, [r4, #4]
 8008960:	60a5      	str	r5, [r4, #8]
 8008962:	2d00      	cmp	r5, #0
 8008964:	bfa2      	ittt	ge
 8008966:	6821      	ldrge	r1, [r4, #0]
 8008968:	f021 0104 	bicge.w	r1, r1, #4
 800896c:	6021      	strge	r1, [r4, #0]
 800896e:	b90e      	cbnz	r6, 8008974 <_printf_i+0x114>
 8008970:	2d00      	cmp	r5, #0
 8008972:	d04b      	beq.n	8008a0c <_printf_i+0x1ac>
 8008974:	4615      	mov	r5, r2
 8008976:	fbb6 f1f3 	udiv	r1, r6, r3
 800897a:	fb03 6711 	mls	r7, r3, r1, r6
 800897e:	5dc7      	ldrb	r7, [r0, r7]
 8008980:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008984:	4637      	mov	r7, r6
 8008986:	42bb      	cmp	r3, r7
 8008988:	460e      	mov	r6, r1
 800898a:	d9f4      	bls.n	8008976 <_printf_i+0x116>
 800898c:	2b08      	cmp	r3, #8
 800898e:	d10b      	bne.n	80089a8 <_printf_i+0x148>
 8008990:	6823      	ldr	r3, [r4, #0]
 8008992:	07de      	lsls	r6, r3, #31
 8008994:	d508      	bpl.n	80089a8 <_printf_i+0x148>
 8008996:	6923      	ldr	r3, [r4, #16]
 8008998:	6861      	ldr	r1, [r4, #4]
 800899a:	4299      	cmp	r1, r3
 800899c:	bfde      	ittt	le
 800899e:	2330      	movle	r3, #48	; 0x30
 80089a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80089a4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80089a8:	1b52      	subs	r2, r2, r5
 80089aa:	6122      	str	r2, [r4, #16]
 80089ac:	f8cd a000 	str.w	sl, [sp]
 80089b0:	464b      	mov	r3, r9
 80089b2:	aa03      	add	r2, sp, #12
 80089b4:	4621      	mov	r1, r4
 80089b6:	4640      	mov	r0, r8
 80089b8:	f7ff fee4 	bl	8008784 <_printf_common>
 80089bc:	3001      	adds	r0, #1
 80089be:	d14a      	bne.n	8008a56 <_printf_i+0x1f6>
 80089c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089c4:	b004      	add	sp, #16
 80089c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089ca:	6823      	ldr	r3, [r4, #0]
 80089cc:	f043 0320 	orr.w	r3, r3, #32
 80089d0:	6023      	str	r3, [r4, #0]
 80089d2:	4833      	ldr	r0, [pc, #204]	; (8008aa0 <_printf_i+0x240>)
 80089d4:	2778      	movs	r7, #120	; 0x78
 80089d6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80089da:	6823      	ldr	r3, [r4, #0]
 80089dc:	6829      	ldr	r1, [r5, #0]
 80089de:	061f      	lsls	r7, r3, #24
 80089e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80089e4:	d402      	bmi.n	80089ec <_printf_i+0x18c>
 80089e6:	065f      	lsls	r7, r3, #25
 80089e8:	bf48      	it	mi
 80089ea:	b2b6      	uxthmi	r6, r6
 80089ec:	07df      	lsls	r7, r3, #31
 80089ee:	bf48      	it	mi
 80089f0:	f043 0320 	orrmi.w	r3, r3, #32
 80089f4:	6029      	str	r1, [r5, #0]
 80089f6:	bf48      	it	mi
 80089f8:	6023      	strmi	r3, [r4, #0]
 80089fa:	b91e      	cbnz	r6, 8008a04 <_printf_i+0x1a4>
 80089fc:	6823      	ldr	r3, [r4, #0]
 80089fe:	f023 0320 	bic.w	r3, r3, #32
 8008a02:	6023      	str	r3, [r4, #0]
 8008a04:	2310      	movs	r3, #16
 8008a06:	e7a7      	b.n	8008958 <_printf_i+0xf8>
 8008a08:	4824      	ldr	r0, [pc, #144]	; (8008a9c <_printf_i+0x23c>)
 8008a0a:	e7e4      	b.n	80089d6 <_printf_i+0x176>
 8008a0c:	4615      	mov	r5, r2
 8008a0e:	e7bd      	b.n	800898c <_printf_i+0x12c>
 8008a10:	682b      	ldr	r3, [r5, #0]
 8008a12:	6826      	ldr	r6, [r4, #0]
 8008a14:	6961      	ldr	r1, [r4, #20]
 8008a16:	1d18      	adds	r0, r3, #4
 8008a18:	6028      	str	r0, [r5, #0]
 8008a1a:	0635      	lsls	r5, r6, #24
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	d501      	bpl.n	8008a24 <_printf_i+0x1c4>
 8008a20:	6019      	str	r1, [r3, #0]
 8008a22:	e002      	b.n	8008a2a <_printf_i+0x1ca>
 8008a24:	0670      	lsls	r0, r6, #25
 8008a26:	d5fb      	bpl.n	8008a20 <_printf_i+0x1c0>
 8008a28:	8019      	strh	r1, [r3, #0]
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	6123      	str	r3, [r4, #16]
 8008a2e:	4615      	mov	r5, r2
 8008a30:	e7bc      	b.n	80089ac <_printf_i+0x14c>
 8008a32:	682b      	ldr	r3, [r5, #0]
 8008a34:	1d1a      	adds	r2, r3, #4
 8008a36:	602a      	str	r2, [r5, #0]
 8008a38:	681d      	ldr	r5, [r3, #0]
 8008a3a:	6862      	ldr	r2, [r4, #4]
 8008a3c:	2100      	movs	r1, #0
 8008a3e:	4628      	mov	r0, r5
 8008a40:	f7f7 fbe6 	bl	8000210 <memchr>
 8008a44:	b108      	cbz	r0, 8008a4a <_printf_i+0x1ea>
 8008a46:	1b40      	subs	r0, r0, r5
 8008a48:	6060      	str	r0, [r4, #4]
 8008a4a:	6863      	ldr	r3, [r4, #4]
 8008a4c:	6123      	str	r3, [r4, #16]
 8008a4e:	2300      	movs	r3, #0
 8008a50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a54:	e7aa      	b.n	80089ac <_printf_i+0x14c>
 8008a56:	6923      	ldr	r3, [r4, #16]
 8008a58:	462a      	mov	r2, r5
 8008a5a:	4649      	mov	r1, r9
 8008a5c:	4640      	mov	r0, r8
 8008a5e:	47d0      	blx	sl
 8008a60:	3001      	adds	r0, #1
 8008a62:	d0ad      	beq.n	80089c0 <_printf_i+0x160>
 8008a64:	6823      	ldr	r3, [r4, #0]
 8008a66:	079b      	lsls	r3, r3, #30
 8008a68:	d413      	bmi.n	8008a92 <_printf_i+0x232>
 8008a6a:	68e0      	ldr	r0, [r4, #12]
 8008a6c:	9b03      	ldr	r3, [sp, #12]
 8008a6e:	4298      	cmp	r0, r3
 8008a70:	bfb8      	it	lt
 8008a72:	4618      	movlt	r0, r3
 8008a74:	e7a6      	b.n	80089c4 <_printf_i+0x164>
 8008a76:	2301      	movs	r3, #1
 8008a78:	4632      	mov	r2, r6
 8008a7a:	4649      	mov	r1, r9
 8008a7c:	4640      	mov	r0, r8
 8008a7e:	47d0      	blx	sl
 8008a80:	3001      	adds	r0, #1
 8008a82:	d09d      	beq.n	80089c0 <_printf_i+0x160>
 8008a84:	3501      	adds	r5, #1
 8008a86:	68e3      	ldr	r3, [r4, #12]
 8008a88:	9903      	ldr	r1, [sp, #12]
 8008a8a:	1a5b      	subs	r3, r3, r1
 8008a8c:	42ab      	cmp	r3, r5
 8008a8e:	dcf2      	bgt.n	8008a76 <_printf_i+0x216>
 8008a90:	e7eb      	b.n	8008a6a <_printf_i+0x20a>
 8008a92:	2500      	movs	r5, #0
 8008a94:	f104 0619 	add.w	r6, r4, #25
 8008a98:	e7f5      	b.n	8008a86 <_printf_i+0x226>
 8008a9a:	bf00      	nop
 8008a9c:	0800ca8e 	.word	0x0800ca8e
 8008aa0:	0800ca9f 	.word	0x0800ca9f

08008aa4 <_scanf_float>:
 8008aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aa8:	b087      	sub	sp, #28
 8008aaa:	4617      	mov	r7, r2
 8008aac:	9303      	str	r3, [sp, #12]
 8008aae:	688b      	ldr	r3, [r1, #8]
 8008ab0:	1e5a      	subs	r2, r3, #1
 8008ab2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008ab6:	bf83      	ittte	hi
 8008ab8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008abc:	195b      	addhi	r3, r3, r5
 8008abe:	9302      	strhi	r3, [sp, #8]
 8008ac0:	2300      	movls	r3, #0
 8008ac2:	bf86      	itte	hi
 8008ac4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008ac8:	608b      	strhi	r3, [r1, #8]
 8008aca:	9302      	strls	r3, [sp, #8]
 8008acc:	680b      	ldr	r3, [r1, #0]
 8008ace:	468b      	mov	fp, r1
 8008ad0:	2500      	movs	r5, #0
 8008ad2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008ad6:	f84b 3b1c 	str.w	r3, [fp], #28
 8008ada:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008ade:	4680      	mov	r8, r0
 8008ae0:	460c      	mov	r4, r1
 8008ae2:	465e      	mov	r6, fp
 8008ae4:	46aa      	mov	sl, r5
 8008ae6:	46a9      	mov	r9, r5
 8008ae8:	9501      	str	r5, [sp, #4]
 8008aea:	68a2      	ldr	r2, [r4, #8]
 8008aec:	b152      	cbz	r2, 8008b04 <_scanf_float+0x60>
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	781b      	ldrb	r3, [r3, #0]
 8008af2:	2b4e      	cmp	r3, #78	; 0x4e
 8008af4:	d864      	bhi.n	8008bc0 <_scanf_float+0x11c>
 8008af6:	2b40      	cmp	r3, #64	; 0x40
 8008af8:	d83c      	bhi.n	8008b74 <_scanf_float+0xd0>
 8008afa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008afe:	b2c8      	uxtb	r0, r1
 8008b00:	280e      	cmp	r0, #14
 8008b02:	d93a      	bls.n	8008b7a <_scanf_float+0xd6>
 8008b04:	f1b9 0f00 	cmp.w	r9, #0
 8008b08:	d003      	beq.n	8008b12 <_scanf_float+0x6e>
 8008b0a:	6823      	ldr	r3, [r4, #0]
 8008b0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b10:	6023      	str	r3, [r4, #0]
 8008b12:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008b16:	f1ba 0f01 	cmp.w	sl, #1
 8008b1a:	f200 8113 	bhi.w	8008d44 <_scanf_float+0x2a0>
 8008b1e:	455e      	cmp	r6, fp
 8008b20:	f200 8105 	bhi.w	8008d2e <_scanf_float+0x28a>
 8008b24:	2501      	movs	r5, #1
 8008b26:	4628      	mov	r0, r5
 8008b28:	b007      	add	sp, #28
 8008b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b2e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008b32:	2a0d      	cmp	r2, #13
 8008b34:	d8e6      	bhi.n	8008b04 <_scanf_float+0x60>
 8008b36:	a101      	add	r1, pc, #4	; (adr r1, 8008b3c <_scanf_float+0x98>)
 8008b38:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008b3c:	08008c7b 	.word	0x08008c7b
 8008b40:	08008b05 	.word	0x08008b05
 8008b44:	08008b05 	.word	0x08008b05
 8008b48:	08008b05 	.word	0x08008b05
 8008b4c:	08008cdb 	.word	0x08008cdb
 8008b50:	08008cb3 	.word	0x08008cb3
 8008b54:	08008b05 	.word	0x08008b05
 8008b58:	08008b05 	.word	0x08008b05
 8008b5c:	08008c89 	.word	0x08008c89
 8008b60:	08008b05 	.word	0x08008b05
 8008b64:	08008b05 	.word	0x08008b05
 8008b68:	08008b05 	.word	0x08008b05
 8008b6c:	08008b05 	.word	0x08008b05
 8008b70:	08008c41 	.word	0x08008c41
 8008b74:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008b78:	e7db      	b.n	8008b32 <_scanf_float+0x8e>
 8008b7a:	290e      	cmp	r1, #14
 8008b7c:	d8c2      	bhi.n	8008b04 <_scanf_float+0x60>
 8008b7e:	a001      	add	r0, pc, #4	; (adr r0, 8008b84 <_scanf_float+0xe0>)
 8008b80:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008b84:	08008c33 	.word	0x08008c33
 8008b88:	08008b05 	.word	0x08008b05
 8008b8c:	08008c33 	.word	0x08008c33
 8008b90:	08008cc7 	.word	0x08008cc7
 8008b94:	08008b05 	.word	0x08008b05
 8008b98:	08008be1 	.word	0x08008be1
 8008b9c:	08008c1d 	.word	0x08008c1d
 8008ba0:	08008c1d 	.word	0x08008c1d
 8008ba4:	08008c1d 	.word	0x08008c1d
 8008ba8:	08008c1d 	.word	0x08008c1d
 8008bac:	08008c1d 	.word	0x08008c1d
 8008bb0:	08008c1d 	.word	0x08008c1d
 8008bb4:	08008c1d 	.word	0x08008c1d
 8008bb8:	08008c1d 	.word	0x08008c1d
 8008bbc:	08008c1d 	.word	0x08008c1d
 8008bc0:	2b6e      	cmp	r3, #110	; 0x6e
 8008bc2:	d809      	bhi.n	8008bd8 <_scanf_float+0x134>
 8008bc4:	2b60      	cmp	r3, #96	; 0x60
 8008bc6:	d8b2      	bhi.n	8008b2e <_scanf_float+0x8a>
 8008bc8:	2b54      	cmp	r3, #84	; 0x54
 8008bca:	d077      	beq.n	8008cbc <_scanf_float+0x218>
 8008bcc:	2b59      	cmp	r3, #89	; 0x59
 8008bce:	d199      	bne.n	8008b04 <_scanf_float+0x60>
 8008bd0:	2d07      	cmp	r5, #7
 8008bd2:	d197      	bne.n	8008b04 <_scanf_float+0x60>
 8008bd4:	2508      	movs	r5, #8
 8008bd6:	e029      	b.n	8008c2c <_scanf_float+0x188>
 8008bd8:	2b74      	cmp	r3, #116	; 0x74
 8008bda:	d06f      	beq.n	8008cbc <_scanf_float+0x218>
 8008bdc:	2b79      	cmp	r3, #121	; 0x79
 8008bde:	e7f6      	b.n	8008bce <_scanf_float+0x12a>
 8008be0:	6821      	ldr	r1, [r4, #0]
 8008be2:	05c8      	lsls	r0, r1, #23
 8008be4:	d51a      	bpl.n	8008c1c <_scanf_float+0x178>
 8008be6:	9b02      	ldr	r3, [sp, #8]
 8008be8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008bec:	6021      	str	r1, [r4, #0]
 8008bee:	f109 0901 	add.w	r9, r9, #1
 8008bf2:	b11b      	cbz	r3, 8008bfc <_scanf_float+0x158>
 8008bf4:	3b01      	subs	r3, #1
 8008bf6:	3201      	adds	r2, #1
 8008bf8:	9302      	str	r3, [sp, #8]
 8008bfa:	60a2      	str	r2, [r4, #8]
 8008bfc:	68a3      	ldr	r3, [r4, #8]
 8008bfe:	3b01      	subs	r3, #1
 8008c00:	60a3      	str	r3, [r4, #8]
 8008c02:	6923      	ldr	r3, [r4, #16]
 8008c04:	3301      	adds	r3, #1
 8008c06:	6123      	str	r3, [r4, #16]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	3b01      	subs	r3, #1
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	607b      	str	r3, [r7, #4]
 8008c10:	f340 8084 	ble.w	8008d1c <_scanf_float+0x278>
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	3301      	adds	r3, #1
 8008c18:	603b      	str	r3, [r7, #0]
 8008c1a:	e766      	b.n	8008aea <_scanf_float+0x46>
 8008c1c:	eb1a 0f05 	cmn.w	sl, r5
 8008c20:	f47f af70 	bne.w	8008b04 <_scanf_float+0x60>
 8008c24:	6822      	ldr	r2, [r4, #0]
 8008c26:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008c2a:	6022      	str	r2, [r4, #0]
 8008c2c:	f806 3b01 	strb.w	r3, [r6], #1
 8008c30:	e7e4      	b.n	8008bfc <_scanf_float+0x158>
 8008c32:	6822      	ldr	r2, [r4, #0]
 8008c34:	0610      	lsls	r0, r2, #24
 8008c36:	f57f af65 	bpl.w	8008b04 <_scanf_float+0x60>
 8008c3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008c3e:	e7f4      	b.n	8008c2a <_scanf_float+0x186>
 8008c40:	f1ba 0f00 	cmp.w	sl, #0
 8008c44:	d10e      	bne.n	8008c64 <_scanf_float+0x1c0>
 8008c46:	f1b9 0f00 	cmp.w	r9, #0
 8008c4a:	d10e      	bne.n	8008c6a <_scanf_float+0x1c6>
 8008c4c:	6822      	ldr	r2, [r4, #0]
 8008c4e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008c52:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008c56:	d108      	bne.n	8008c6a <_scanf_float+0x1c6>
 8008c58:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008c5c:	6022      	str	r2, [r4, #0]
 8008c5e:	f04f 0a01 	mov.w	sl, #1
 8008c62:	e7e3      	b.n	8008c2c <_scanf_float+0x188>
 8008c64:	f1ba 0f02 	cmp.w	sl, #2
 8008c68:	d055      	beq.n	8008d16 <_scanf_float+0x272>
 8008c6a:	2d01      	cmp	r5, #1
 8008c6c:	d002      	beq.n	8008c74 <_scanf_float+0x1d0>
 8008c6e:	2d04      	cmp	r5, #4
 8008c70:	f47f af48 	bne.w	8008b04 <_scanf_float+0x60>
 8008c74:	3501      	adds	r5, #1
 8008c76:	b2ed      	uxtb	r5, r5
 8008c78:	e7d8      	b.n	8008c2c <_scanf_float+0x188>
 8008c7a:	f1ba 0f01 	cmp.w	sl, #1
 8008c7e:	f47f af41 	bne.w	8008b04 <_scanf_float+0x60>
 8008c82:	f04f 0a02 	mov.w	sl, #2
 8008c86:	e7d1      	b.n	8008c2c <_scanf_float+0x188>
 8008c88:	b97d      	cbnz	r5, 8008caa <_scanf_float+0x206>
 8008c8a:	f1b9 0f00 	cmp.w	r9, #0
 8008c8e:	f47f af3c 	bne.w	8008b0a <_scanf_float+0x66>
 8008c92:	6822      	ldr	r2, [r4, #0]
 8008c94:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008c98:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008c9c:	f47f af39 	bne.w	8008b12 <_scanf_float+0x6e>
 8008ca0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008ca4:	6022      	str	r2, [r4, #0]
 8008ca6:	2501      	movs	r5, #1
 8008ca8:	e7c0      	b.n	8008c2c <_scanf_float+0x188>
 8008caa:	2d03      	cmp	r5, #3
 8008cac:	d0e2      	beq.n	8008c74 <_scanf_float+0x1d0>
 8008cae:	2d05      	cmp	r5, #5
 8008cb0:	e7de      	b.n	8008c70 <_scanf_float+0x1cc>
 8008cb2:	2d02      	cmp	r5, #2
 8008cb4:	f47f af26 	bne.w	8008b04 <_scanf_float+0x60>
 8008cb8:	2503      	movs	r5, #3
 8008cba:	e7b7      	b.n	8008c2c <_scanf_float+0x188>
 8008cbc:	2d06      	cmp	r5, #6
 8008cbe:	f47f af21 	bne.w	8008b04 <_scanf_float+0x60>
 8008cc2:	2507      	movs	r5, #7
 8008cc4:	e7b2      	b.n	8008c2c <_scanf_float+0x188>
 8008cc6:	6822      	ldr	r2, [r4, #0]
 8008cc8:	0591      	lsls	r1, r2, #22
 8008cca:	f57f af1b 	bpl.w	8008b04 <_scanf_float+0x60>
 8008cce:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008cd2:	6022      	str	r2, [r4, #0]
 8008cd4:	f8cd 9004 	str.w	r9, [sp, #4]
 8008cd8:	e7a8      	b.n	8008c2c <_scanf_float+0x188>
 8008cda:	6822      	ldr	r2, [r4, #0]
 8008cdc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008ce0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008ce4:	d006      	beq.n	8008cf4 <_scanf_float+0x250>
 8008ce6:	0550      	lsls	r0, r2, #21
 8008ce8:	f57f af0c 	bpl.w	8008b04 <_scanf_float+0x60>
 8008cec:	f1b9 0f00 	cmp.w	r9, #0
 8008cf0:	f43f af0f 	beq.w	8008b12 <_scanf_float+0x6e>
 8008cf4:	0591      	lsls	r1, r2, #22
 8008cf6:	bf58      	it	pl
 8008cf8:	9901      	ldrpl	r1, [sp, #4]
 8008cfa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008cfe:	bf58      	it	pl
 8008d00:	eba9 0101 	subpl.w	r1, r9, r1
 8008d04:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008d08:	bf58      	it	pl
 8008d0a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008d0e:	6022      	str	r2, [r4, #0]
 8008d10:	f04f 0900 	mov.w	r9, #0
 8008d14:	e78a      	b.n	8008c2c <_scanf_float+0x188>
 8008d16:	f04f 0a03 	mov.w	sl, #3
 8008d1a:	e787      	b.n	8008c2c <_scanf_float+0x188>
 8008d1c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008d20:	4639      	mov	r1, r7
 8008d22:	4640      	mov	r0, r8
 8008d24:	4798      	blx	r3
 8008d26:	2800      	cmp	r0, #0
 8008d28:	f43f aedf 	beq.w	8008aea <_scanf_float+0x46>
 8008d2c:	e6ea      	b.n	8008b04 <_scanf_float+0x60>
 8008d2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008d32:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008d36:	463a      	mov	r2, r7
 8008d38:	4640      	mov	r0, r8
 8008d3a:	4798      	blx	r3
 8008d3c:	6923      	ldr	r3, [r4, #16]
 8008d3e:	3b01      	subs	r3, #1
 8008d40:	6123      	str	r3, [r4, #16]
 8008d42:	e6ec      	b.n	8008b1e <_scanf_float+0x7a>
 8008d44:	1e6b      	subs	r3, r5, #1
 8008d46:	2b06      	cmp	r3, #6
 8008d48:	d825      	bhi.n	8008d96 <_scanf_float+0x2f2>
 8008d4a:	2d02      	cmp	r5, #2
 8008d4c:	d836      	bhi.n	8008dbc <_scanf_float+0x318>
 8008d4e:	455e      	cmp	r6, fp
 8008d50:	f67f aee8 	bls.w	8008b24 <_scanf_float+0x80>
 8008d54:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008d58:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008d5c:	463a      	mov	r2, r7
 8008d5e:	4640      	mov	r0, r8
 8008d60:	4798      	blx	r3
 8008d62:	6923      	ldr	r3, [r4, #16]
 8008d64:	3b01      	subs	r3, #1
 8008d66:	6123      	str	r3, [r4, #16]
 8008d68:	e7f1      	b.n	8008d4e <_scanf_float+0x2aa>
 8008d6a:	9802      	ldr	r0, [sp, #8]
 8008d6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008d70:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008d74:	9002      	str	r0, [sp, #8]
 8008d76:	463a      	mov	r2, r7
 8008d78:	4640      	mov	r0, r8
 8008d7a:	4798      	blx	r3
 8008d7c:	6923      	ldr	r3, [r4, #16]
 8008d7e:	3b01      	subs	r3, #1
 8008d80:	6123      	str	r3, [r4, #16]
 8008d82:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008d86:	fa5f fa8a 	uxtb.w	sl, sl
 8008d8a:	f1ba 0f02 	cmp.w	sl, #2
 8008d8e:	d1ec      	bne.n	8008d6a <_scanf_float+0x2c6>
 8008d90:	3d03      	subs	r5, #3
 8008d92:	b2ed      	uxtb	r5, r5
 8008d94:	1b76      	subs	r6, r6, r5
 8008d96:	6823      	ldr	r3, [r4, #0]
 8008d98:	05da      	lsls	r2, r3, #23
 8008d9a:	d52f      	bpl.n	8008dfc <_scanf_float+0x358>
 8008d9c:	055b      	lsls	r3, r3, #21
 8008d9e:	d510      	bpl.n	8008dc2 <_scanf_float+0x31e>
 8008da0:	455e      	cmp	r6, fp
 8008da2:	f67f aebf 	bls.w	8008b24 <_scanf_float+0x80>
 8008da6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008daa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008dae:	463a      	mov	r2, r7
 8008db0:	4640      	mov	r0, r8
 8008db2:	4798      	blx	r3
 8008db4:	6923      	ldr	r3, [r4, #16]
 8008db6:	3b01      	subs	r3, #1
 8008db8:	6123      	str	r3, [r4, #16]
 8008dba:	e7f1      	b.n	8008da0 <_scanf_float+0x2fc>
 8008dbc:	46aa      	mov	sl, r5
 8008dbe:	9602      	str	r6, [sp, #8]
 8008dc0:	e7df      	b.n	8008d82 <_scanf_float+0x2de>
 8008dc2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008dc6:	6923      	ldr	r3, [r4, #16]
 8008dc8:	2965      	cmp	r1, #101	; 0x65
 8008dca:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8008dce:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8008dd2:	6123      	str	r3, [r4, #16]
 8008dd4:	d00c      	beq.n	8008df0 <_scanf_float+0x34c>
 8008dd6:	2945      	cmp	r1, #69	; 0x45
 8008dd8:	d00a      	beq.n	8008df0 <_scanf_float+0x34c>
 8008dda:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008dde:	463a      	mov	r2, r7
 8008de0:	4640      	mov	r0, r8
 8008de2:	4798      	blx	r3
 8008de4:	6923      	ldr	r3, [r4, #16]
 8008de6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008dea:	3b01      	subs	r3, #1
 8008dec:	1eb5      	subs	r5, r6, #2
 8008dee:	6123      	str	r3, [r4, #16]
 8008df0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008df4:	463a      	mov	r2, r7
 8008df6:	4640      	mov	r0, r8
 8008df8:	4798      	blx	r3
 8008dfa:	462e      	mov	r6, r5
 8008dfc:	6825      	ldr	r5, [r4, #0]
 8008dfe:	f015 0510 	ands.w	r5, r5, #16
 8008e02:	d158      	bne.n	8008eb6 <_scanf_float+0x412>
 8008e04:	7035      	strb	r5, [r6, #0]
 8008e06:	6823      	ldr	r3, [r4, #0]
 8008e08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008e0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e10:	d11c      	bne.n	8008e4c <_scanf_float+0x3a8>
 8008e12:	9b01      	ldr	r3, [sp, #4]
 8008e14:	454b      	cmp	r3, r9
 8008e16:	eba3 0209 	sub.w	r2, r3, r9
 8008e1a:	d124      	bne.n	8008e66 <_scanf_float+0x3c2>
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	4659      	mov	r1, fp
 8008e20:	4640      	mov	r0, r8
 8008e22:	f000 ff21 	bl	8009c68 <_strtod_r>
 8008e26:	9b03      	ldr	r3, [sp, #12]
 8008e28:	6821      	ldr	r1, [r4, #0]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f011 0f02 	tst.w	r1, #2
 8008e30:	ec57 6b10 	vmov	r6, r7, d0
 8008e34:	f103 0204 	add.w	r2, r3, #4
 8008e38:	d020      	beq.n	8008e7c <_scanf_float+0x3d8>
 8008e3a:	9903      	ldr	r1, [sp, #12]
 8008e3c:	600a      	str	r2, [r1, #0]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	e9c3 6700 	strd	r6, r7, [r3]
 8008e44:	68e3      	ldr	r3, [r4, #12]
 8008e46:	3301      	adds	r3, #1
 8008e48:	60e3      	str	r3, [r4, #12]
 8008e4a:	e66c      	b.n	8008b26 <_scanf_float+0x82>
 8008e4c:	9b04      	ldr	r3, [sp, #16]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d0e4      	beq.n	8008e1c <_scanf_float+0x378>
 8008e52:	9905      	ldr	r1, [sp, #20]
 8008e54:	230a      	movs	r3, #10
 8008e56:	462a      	mov	r2, r5
 8008e58:	3101      	adds	r1, #1
 8008e5a:	4640      	mov	r0, r8
 8008e5c:	f000 ff98 	bl	8009d90 <_strtol_r>
 8008e60:	9b04      	ldr	r3, [sp, #16]
 8008e62:	9e05      	ldr	r6, [sp, #20]
 8008e64:	1ac2      	subs	r2, r0, r3
 8008e66:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008e6a:	429e      	cmp	r6, r3
 8008e6c:	bf28      	it	cs
 8008e6e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008e72:	4912      	ldr	r1, [pc, #72]	; (8008ebc <_scanf_float+0x418>)
 8008e74:	4630      	mov	r0, r6
 8008e76:	f000 f825 	bl	8008ec4 <siprintf>
 8008e7a:	e7cf      	b.n	8008e1c <_scanf_float+0x378>
 8008e7c:	f011 0f04 	tst.w	r1, #4
 8008e80:	9903      	ldr	r1, [sp, #12]
 8008e82:	600a      	str	r2, [r1, #0]
 8008e84:	d1db      	bne.n	8008e3e <_scanf_float+0x39a>
 8008e86:	f8d3 8000 	ldr.w	r8, [r3]
 8008e8a:	ee10 2a10 	vmov	r2, s0
 8008e8e:	ee10 0a10 	vmov	r0, s0
 8008e92:	463b      	mov	r3, r7
 8008e94:	4639      	mov	r1, r7
 8008e96:	f7f7 fe69 	bl	8000b6c <__aeabi_dcmpun>
 8008e9a:	b128      	cbz	r0, 8008ea8 <_scanf_float+0x404>
 8008e9c:	4808      	ldr	r0, [pc, #32]	; (8008ec0 <_scanf_float+0x41c>)
 8008e9e:	f001 f807 	bl	8009eb0 <nanf>
 8008ea2:	ed88 0a00 	vstr	s0, [r8]
 8008ea6:	e7cd      	b.n	8008e44 <_scanf_float+0x3a0>
 8008ea8:	4630      	mov	r0, r6
 8008eaa:	4639      	mov	r1, r7
 8008eac:	f7f7 febc 	bl	8000c28 <__aeabi_d2f>
 8008eb0:	f8c8 0000 	str.w	r0, [r8]
 8008eb4:	e7c6      	b.n	8008e44 <_scanf_float+0x3a0>
 8008eb6:	2500      	movs	r5, #0
 8008eb8:	e635      	b.n	8008b26 <_scanf_float+0x82>
 8008eba:	bf00      	nop
 8008ebc:	0800cab0 	.word	0x0800cab0
 8008ec0:	0800ce9f 	.word	0x0800ce9f

08008ec4 <siprintf>:
 8008ec4:	b40e      	push	{r1, r2, r3}
 8008ec6:	b500      	push	{lr}
 8008ec8:	b09c      	sub	sp, #112	; 0x70
 8008eca:	ab1d      	add	r3, sp, #116	; 0x74
 8008ecc:	9002      	str	r0, [sp, #8]
 8008ece:	9006      	str	r0, [sp, #24]
 8008ed0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008ed4:	4809      	ldr	r0, [pc, #36]	; (8008efc <siprintf+0x38>)
 8008ed6:	9107      	str	r1, [sp, #28]
 8008ed8:	9104      	str	r1, [sp, #16]
 8008eda:	4909      	ldr	r1, [pc, #36]	; (8008f00 <siprintf+0x3c>)
 8008edc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ee0:	9105      	str	r1, [sp, #20]
 8008ee2:	6800      	ldr	r0, [r0, #0]
 8008ee4:	9301      	str	r3, [sp, #4]
 8008ee6:	a902      	add	r1, sp, #8
 8008ee8:	f002 fa16 	bl	800b318 <_svfiprintf_r>
 8008eec:	9b02      	ldr	r3, [sp, #8]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	701a      	strb	r2, [r3, #0]
 8008ef2:	b01c      	add	sp, #112	; 0x70
 8008ef4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ef8:	b003      	add	sp, #12
 8008efa:	4770      	bx	lr
 8008efc:	20000224 	.word	0x20000224
 8008f00:	ffff0208 	.word	0xffff0208

08008f04 <std>:
 8008f04:	2300      	movs	r3, #0
 8008f06:	b510      	push	{r4, lr}
 8008f08:	4604      	mov	r4, r0
 8008f0a:	e9c0 3300 	strd	r3, r3, [r0]
 8008f0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008f12:	6083      	str	r3, [r0, #8]
 8008f14:	8181      	strh	r1, [r0, #12]
 8008f16:	6643      	str	r3, [r0, #100]	; 0x64
 8008f18:	81c2      	strh	r2, [r0, #14]
 8008f1a:	6183      	str	r3, [r0, #24]
 8008f1c:	4619      	mov	r1, r3
 8008f1e:	2208      	movs	r2, #8
 8008f20:	305c      	adds	r0, #92	; 0x5c
 8008f22:	f000 ff74 	bl	8009e0e <memset>
 8008f26:	4b0d      	ldr	r3, [pc, #52]	; (8008f5c <std+0x58>)
 8008f28:	6263      	str	r3, [r4, #36]	; 0x24
 8008f2a:	4b0d      	ldr	r3, [pc, #52]	; (8008f60 <std+0x5c>)
 8008f2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8008f2e:	4b0d      	ldr	r3, [pc, #52]	; (8008f64 <std+0x60>)
 8008f30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008f32:	4b0d      	ldr	r3, [pc, #52]	; (8008f68 <std+0x64>)
 8008f34:	6323      	str	r3, [r4, #48]	; 0x30
 8008f36:	4b0d      	ldr	r3, [pc, #52]	; (8008f6c <std+0x68>)
 8008f38:	6224      	str	r4, [r4, #32]
 8008f3a:	429c      	cmp	r4, r3
 8008f3c:	d006      	beq.n	8008f4c <std+0x48>
 8008f3e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008f42:	4294      	cmp	r4, r2
 8008f44:	d002      	beq.n	8008f4c <std+0x48>
 8008f46:	33d0      	adds	r3, #208	; 0xd0
 8008f48:	429c      	cmp	r4, r3
 8008f4a:	d105      	bne.n	8008f58 <std+0x54>
 8008f4c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008f50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f54:	f000 bf92 	b.w	8009e7c <__retarget_lock_init_recursive>
 8008f58:	bd10      	pop	{r4, pc}
 8008f5a:	bf00      	nop
 8008f5c:	0800c157 	.word	0x0800c157
 8008f60:	0800c179 	.word	0x0800c179
 8008f64:	0800c1b1 	.word	0x0800c1b1
 8008f68:	0800c1d5 	.word	0x0800c1d5
 8008f6c:	20000478 	.word	0x20000478

08008f70 <stdio_exit_handler>:
 8008f70:	4a02      	ldr	r2, [pc, #8]	; (8008f7c <stdio_exit_handler+0xc>)
 8008f72:	4903      	ldr	r1, [pc, #12]	; (8008f80 <stdio_exit_handler+0x10>)
 8008f74:	4803      	ldr	r0, [pc, #12]	; (8008f84 <stdio_exit_handler+0x14>)
 8008f76:	f000 bf0d 	b.w	8009d94 <_fwalk_sglue>
 8008f7a:	bf00      	nop
 8008f7c:	20000060 	.word	0x20000060
 8008f80:	0800b795 	.word	0x0800b795
 8008f84:	200001d8 	.word	0x200001d8

08008f88 <cleanup_stdio>:
 8008f88:	6841      	ldr	r1, [r0, #4]
 8008f8a:	4b0c      	ldr	r3, [pc, #48]	; (8008fbc <cleanup_stdio+0x34>)
 8008f8c:	4299      	cmp	r1, r3
 8008f8e:	b510      	push	{r4, lr}
 8008f90:	4604      	mov	r4, r0
 8008f92:	d001      	beq.n	8008f98 <cleanup_stdio+0x10>
 8008f94:	f002 fbfe 	bl	800b794 <_fflush_r>
 8008f98:	68a1      	ldr	r1, [r4, #8]
 8008f9a:	4b09      	ldr	r3, [pc, #36]	; (8008fc0 <cleanup_stdio+0x38>)
 8008f9c:	4299      	cmp	r1, r3
 8008f9e:	d002      	beq.n	8008fa6 <cleanup_stdio+0x1e>
 8008fa0:	4620      	mov	r0, r4
 8008fa2:	f002 fbf7 	bl	800b794 <_fflush_r>
 8008fa6:	68e1      	ldr	r1, [r4, #12]
 8008fa8:	4b06      	ldr	r3, [pc, #24]	; (8008fc4 <cleanup_stdio+0x3c>)
 8008faa:	4299      	cmp	r1, r3
 8008fac:	d004      	beq.n	8008fb8 <cleanup_stdio+0x30>
 8008fae:	4620      	mov	r0, r4
 8008fb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fb4:	f002 bbee 	b.w	800b794 <_fflush_r>
 8008fb8:	bd10      	pop	{r4, pc}
 8008fba:	bf00      	nop
 8008fbc:	20000478 	.word	0x20000478
 8008fc0:	200004e0 	.word	0x200004e0
 8008fc4:	20000548 	.word	0x20000548

08008fc8 <global_stdio_init.part.0>:
 8008fc8:	b510      	push	{r4, lr}
 8008fca:	4b0b      	ldr	r3, [pc, #44]	; (8008ff8 <global_stdio_init.part.0+0x30>)
 8008fcc:	4c0b      	ldr	r4, [pc, #44]	; (8008ffc <global_stdio_init.part.0+0x34>)
 8008fce:	4a0c      	ldr	r2, [pc, #48]	; (8009000 <global_stdio_init.part.0+0x38>)
 8008fd0:	601a      	str	r2, [r3, #0]
 8008fd2:	4620      	mov	r0, r4
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	2104      	movs	r1, #4
 8008fd8:	f7ff ff94 	bl	8008f04 <std>
 8008fdc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008fe0:	2201      	movs	r2, #1
 8008fe2:	2109      	movs	r1, #9
 8008fe4:	f7ff ff8e 	bl	8008f04 <std>
 8008fe8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008fec:	2202      	movs	r2, #2
 8008fee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ff2:	2112      	movs	r1, #18
 8008ff4:	f7ff bf86 	b.w	8008f04 <std>
 8008ff8:	200005b0 	.word	0x200005b0
 8008ffc:	20000478 	.word	0x20000478
 8009000:	08008f71 	.word	0x08008f71

08009004 <__sfp_lock_acquire>:
 8009004:	4801      	ldr	r0, [pc, #4]	; (800900c <__sfp_lock_acquire+0x8>)
 8009006:	f000 bf3a 	b.w	8009e7e <__retarget_lock_acquire_recursive>
 800900a:	bf00      	nop
 800900c:	200005b5 	.word	0x200005b5

08009010 <__sfp_lock_release>:
 8009010:	4801      	ldr	r0, [pc, #4]	; (8009018 <__sfp_lock_release+0x8>)
 8009012:	f000 bf35 	b.w	8009e80 <__retarget_lock_release_recursive>
 8009016:	bf00      	nop
 8009018:	200005b5 	.word	0x200005b5

0800901c <__sinit>:
 800901c:	b510      	push	{r4, lr}
 800901e:	4604      	mov	r4, r0
 8009020:	f7ff fff0 	bl	8009004 <__sfp_lock_acquire>
 8009024:	6a23      	ldr	r3, [r4, #32]
 8009026:	b11b      	cbz	r3, 8009030 <__sinit+0x14>
 8009028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800902c:	f7ff bff0 	b.w	8009010 <__sfp_lock_release>
 8009030:	4b04      	ldr	r3, [pc, #16]	; (8009044 <__sinit+0x28>)
 8009032:	6223      	str	r3, [r4, #32]
 8009034:	4b04      	ldr	r3, [pc, #16]	; (8009048 <__sinit+0x2c>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d1f5      	bne.n	8009028 <__sinit+0xc>
 800903c:	f7ff ffc4 	bl	8008fc8 <global_stdio_init.part.0>
 8009040:	e7f2      	b.n	8009028 <__sinit+0xc>
 8009042:	bf00      	nop
 8009044:	08008f89 	.word	0x08008f89
 8009048:	200005b0 	.word	0x200005b0

0800904c <sulp>:
 800904c:	b570      	push	{r4, r5, r6, lr}
 800904e:	4604      	mov	r4, r0
 8009050:	460d      	mov	r5, r1
 8009052:	ec45 4b10 	vmov	d0, r4, r5
 8009056:	4616      	mov	r6, r2
 8009058:	f002 ff3c 	bl	800bed4 <__ulp>
 800905c:	ec51 0b10 	vmov	r0, r1, d0
 8009060:	b17e      	cbz	r6, 8009082 <sulp+0x36>
 8009062:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009066:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800906a:	2b00      	cmp	r3, #0
 800906c:	dd09      	ble.n	8009082 <sulp+0x36>
 800906e:	051b      	lsls	r3, r3, #20
 8009070:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009074:	2400      	movs	r4, #0
 8009076:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800907a:	4622      	mov	r2, r4
 800907c:	462b      	mov	r3, r5
 800907e:	f7f7 fadb 	bl	8000638 <__aeabi_dmul>
 8009082:	bd70      	pop	{r4, r5, r6, pc}
 8009084:	0000      	movs	r0, r0
	...

08009088 <_strtod_l>:
 8009088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800908c:	ed2d 8b02 	vpush	{d8}
 8009090:	b09b      	sub	sp, #108	; 0x6c
 8009092:	4604      	mov	r4, r0
 8009094:	9213      	str	r2, [sp, #76]	; 0x4c
 8009096:	2200      	movs	r2, #0
 8009098:	9216      	str	r2, [sp, #88]	; 0x58
 800909a:	460d      	mov	r5, r1
 800909c:	f04f 0800 	mov.w	r8, #0
 80090a0:	f04f 0900 	mov.w	r9, #0
 80090a4:	460a      	mov	r2, r1
 80090a6:	9215      	str	r2, [sp, #84]	; 0x54
 80090a8:	7811      	ldrb	r1, [r2, #0]
 80090aa:	292b      	cmp	r1, #43	; 0x2b
 80090ac:	d04c      	beq.n	8009148 <_strtod_l+0xc0>
 80090ae:	d83a      	bhi.n	8009126 <_strtod_l+0x9e>
 80090b0:	290d      	cmp	r1, #13
 80090b2:	d834      	bhi.n	800911e <_strtod_l+0x96>
 80090b4:	2908      	cmp	r1, #8
 80090b6:	d834      	bhi.n	8009122 <_strtod_l+0x9a>
 80090b8:	2900      	cmp	r1, #0
 80090ba:	d03d      	beq.n	8009138 <_strtod_l+0xb0>
 80090bc:	2200      	movs	r2, #0
 80090be:	920a      	str	r2, [sp, #40]	; 0x28
 80090c0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80090c2:	7832      	ldrb	r2, [r6, #0]
 80090c4:	2a30      	cmp	r2, #48	; 0x30
 80090c6:	f040 80b4 	bne.w	8009232 <_strtod_l+0x1aa>
 80090ca:	7872      	ldrb	r2, [r6, #1]
 80090cc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80090d0:	2a58      	cmp	r2, #88	; 0x58
 80090d2:	d170      	bne.n	80091b6 <_strtod_l+0x12e>
 80090d4:	9302      	str	r3, [sp, #8]
 80090d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090d8:	9301      	str	r3, [sp, #4]
 80090da:	ab16      	add	r3, sp, #88	; 0x58
 80090dc:	9300      	str	r3, [sp, #0]
 80090de:	4a8e      	ldr	r2, [pc, #568]	; (8009318 <_strtod_l+0x290>)
 80090e0:	ab17      	add	r3, sp, #92	; 0x5c
 80090e2:	a915      	add	r1, sp, #84	; 0x54
 80090e4:	4620      	mov	r0, r4
 80090e6:	f001 fdcd 	bl	800ac84 <__gethex>
 80090ea:	f010 070f 	ands.w	r7, r0, #15
 80090ee:	4605      	mov	r5, r0
 80090f0:	d005      	beq.n	80090fe <_strtod_l+0x76>
 80090f2:	2f06      	cmp	r7, #6
 80090f4:	d12a      	bne.n	800914c <_strtod_l+0xc4>
 80090f6:	3601      	adds	r6, #1
 80090f8:	2300      	movs	r3, #0
 80090fa:	9615      	str	r6, [sp, #84]	; 0x54
 80090fc:	930a      	str	r3, [sp, #40]	; 0x28
 80090fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009100:	2b00      	cmp	r3, #0
 8009102:	f040 857f 	bne.w	8009c04 <_strtod_l+0xb7c>
 8009106:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009108:	b1db      	cbz	r3, 8009142 <_strtod_l+0xba>
 800910a:	4642      	mov	r2, r8
 800910c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009110:	ec43 2b10 	vmov	d0, r2, r3
 8009114:	b01b      	add	sp, #108	; 0x6c
 8009116:	ecbd 8b02 	vpop	{d8}
 800911a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800911e:	2920      	cmp	r1, #32
 8009120:	d1cc      	bne.n	80090bc <_strtod_l+0x34>
 8009122:	3201      	adds	r2, #1
 8009124:	e7bf      	b.n	80090a6 <_strtod_l+0x1e>
 8009126:	292d      	cmp	r1, #45	; 0x2d
 8009128:	d1c8      	bne.n	80090bc <_strtod_l+0x34>
 800912a:	2101      	movs	r1, #1
 800912c:	910a      	str	r1, [sp, #40]	; 0x28
 800912e:	1c51      	adds	r1, r2, #1
 8009130:	9115      	str	r1, [sp, #84]	; 0x54
 8009132:	7852      	ldrb	r2, [r2, #1]
 8009134:	2a00      	cmp	r2, #0
 8009136:	d1c3      	bne.n	80090c0 <_strtod_l+0x38>
 8009138:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800913a:	9515      	str	r5, [sp, #84]	; 0x54
 800913c:	2b00      	cmp	r3, #0
 800913e:	f040 855f 	bne.w	8009c00 <_strtod_l+0xb78>
 8009142:	4642      	mov	r2, r8
 8009144:	464b      	mov	r3, r9
 8009146:	e7e3      	b.n	8009110 <_strtod_l+0x88>
 8009148:	2100      	movs	r1, #0
 800914a:	e7ef      	b.n	800912c <_strtod_l+0xa4>
 800914c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800914e:	b13a      	cbz	r2, 8009160 <_strtod_l+0xd8>
 8009150:	2135      	movs	r1, #53	; 0x35
 8009152:	a818      	add	r0, sp, #96	; 0x60
 8009154:	f002 ffbb 	bl	800c0ce <__copybits>
 8009158:	9916      	ldr	r1, [sp, #88]	; 0x58
 800915a:	4620      	mov	r0, r4
 800915c:	f002 fb8e 	bl	800b87c <_Bfree>
 8009160:	3f01      	subs	r7, #1
 8009162:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009164:	2f04      	cmp	r7, #4
 8009166:	d806      	bhi.n	8009176 <_strtod_l+0xee>
 8009168:	e8df f007 	tbb	[pc, r7]
 800916c:	201d0314 	.word	0x201d0314
 8009170:	14          	.byte	0x14
 8009171:	00          	.byte	0x00
 8009172:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8009176:	05e9      	lsls	r1, r5, #23
 8009178:	bf48      	it	mi
 800917a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800917e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009182:	0d1b      	lsrs	r3, r3, #20
 8009184:	051b      	lsls	r3, r3, #20
 8009186:	2b00      	cmp	r3, #0
 8009188:	d1b9      	bne.n	80090fe <_strtod_l+0x76>
 800918a:	f000 fe4d 	bl	8009e28 <__errno>
 800918e:	2322      	movs	r3, #34	; 0x22
 8009190:	6003      	str	r3, [r0, #0]
 8009192:	e7b4      	b.n	80090fe <_strtod_l+0x76>
 8009194:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8009198:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800919c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80091a0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80091a4:	e7e7      	b.n	8009176 <_strtod_l+0xee>
 80091a6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009320 <_strtod_l+0x298>
 80091aa:	e7e4      	b.n	8009176 <_strtod_l+0xee>
 80091ac:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80091b0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80091b4:	e7df      	b.n	8009176 <_strtod_l+0xee>
 80091b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80091b8:	1c5a      	adds	r2, r3, #1
 80091ba:	9215      	str	r2, [sp, #84]	; 0x54
 80091bc:	785b      	ldrb	r3, [r3, #1]
 80091be:	2b30      	cmp	r3, #48	; 0x30
 80091c0:	d0f9      	beq.n	80091b6 <_strtod_l+0x12e>
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d09b      	beq.n	80090fe <_strtod_l+0x76>
 80091c6:	2301      	movs	r3, #1
 80091c8:	f04f 0a00 	mov.w	sl, #0
 80091cc:	9304      	str	r3, [sp, #16]
 80091ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80091d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80091d2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80091d6:	46d3      	mov	fp, sl
 80091d8:	220a      	movs	r2, #10
 80091da:	9815      	ldr	r0, [sp, #84]	; 0x54
 80091dc:	7806      	ldrb	r6, [r0, #0]
 80091de:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80091e2:	b2d9      	uxtb	r1, r3
 80091e4:	2909      	cmp	r1, #9
 80091e6:	d926      	bls.n	8009236 <_strtod_l+0x1ae>
 80091e8:	494c      	ldr	r1, [pc, #304]	; (800931c <_strtod_l+0x294>)
 80091ea:	2201      	movs	r2, #1
 80091ec:	f000 fdfd 	bl	8009dea <strncmp>
 80091f0:	2800      	cmp	r0, #0
 80091f2:	d030      	beq.n	8009256 <_strtod_l+0x1ce>
 80091f4:	2000      	movs	r0, #0
 80091f6:	4632      	mov	r2, r6
 80091f8:	9005      	str	r0, [sp, #20]
 80091fa:	465e      	mov	r6, fp
 80091fc:	4603      	mov	r3, r0
 80091fe:	2a65      	cmp	r2, #101	; 0x65
 8009200:	d001      	beq.n	8009206 <_strtod_l+0x17e>
 8009202:	2a45      	cmp	r2, #69	; 0x45
 8009204:	d113      	bne.n	800922e <_strtod_l+0x1a6>
 8009206:	b91e      	cbnz	r6, 8009210 <_strtod_l+0x188>
 8009208:	9a04      	ldr	r2, [sp, #16]
 800920a:	4302      	orrs	r2, r0
 800920c:	d094      	beq.n	8009138 <_strtod_l+0xb0>
 800920e:	2600      	movs	r6, #0
 8009210:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8009212:	1c6a      	adds	r2, r5, #1
 8009214:	9215      	str	r2, [sp, #84]	; 0x54
 8009216:	786a      	ldrb	r2, [r5, #1]
 8009218:	2a2b      	cmp	r2, #43	; 0x2b
 800921a:	d074      	beq.n	8009306 <_strtod_l+0x27e>
 800921c:	2a2d      	cmp	r2, #45	; 0x2d
 800921e:	d078      	beq.n	8009312 <_strtod_l+0x28a>
 8009220:	f04f 0c00 	mov.w	ip, #0
 8009224:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009228:	2909      	cmp	r1, #9
 800922a:	d97f      	bls.n	800932c <_strtod_l+0x2a4>
 800922c:	9515      	str	r5, [sp, #84]	; 0x54
 800922e:	2700      	movs	r7, #0
 8009230:	e09e      	b.n	8009370 <_strtod_l+0x2e8>
 8009232:	2300      	movs	r3, #0
 8009234:	e7c8      	b.n	80091c8 <_strtod_l+0x140>
 8009236:	f1bb 0f08 	cmp.w	fp, #8
 800923a:	bfd8      	it	le
 800923c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800923e:	f100 0001 	add.w	r0, r0, #1
 8009242:	bfda      	itte	le
 8009244:	fb02 3301 	mlale	r3, r2, r1, r3
 8009248:	9309      	strle	r3, [sp, #36]	; 0x24
 800924a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800924e:	f10b 0b01 	add.w	fp, fp, #1
 8009252:	9015      	str	r0, [sp, #84]	; 0x54
 8009254:	e7c1      	b.n	80091da <_strtod_l+0x152>
 8009256:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009258:	1c5a      	adds	r2, r3, #1
 800925a:	9215      	str	r2, [sp, #84]	; 0x54
 800925c:	785a      	ldrb	r2, [r3, #1]
 800925e:	f1bb 0f00 	cmp.w	fp, #0
 8009262:	d037      	beq.n	80092d4 <_strtod_l+0x24c>
 8009264:	9005      	str	r0, [sp, #20]
 8009266:	465e      	mov	r6, fp
 8009268:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800926c:	2b09      	cmp	r3, #9
 800926e:	d912      	bls.n	8009296 <_strtod_l+0x20e>
 8009270:	2301      	movs	r3, #1
 8009272:	e7c4      	b.n	80091fe <_strtod_l+0x176>
 8009274:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009276:	1c5a      	adds	r2, r3, #1
 8009278:	9215      	str	r2, [sp, #84]	; 0x54
 800927a:	785a      	ldrb	r2, [r3, #1]
 800927c:	3001      	adds	r0, #1
 800927e:	2a30      	cmp	r2, #48	; 0x30
 8009280:	d0f8      	beq.n	8009274 <_strtod_l+0x1ec>
 8009282:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009286:	2b08      	cmp	r3, #8
 8009288:	f200 84c1 	bhi.w	8009c0e <_strtod_l+0xb86>
 800928c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800928e:	9005      	str	r0, [sp, #20]
 8009290:	2000      	movs	r0, #0
 8009292:	930b      	str	r3, [sp, #44]	; 0x2c
 8009294:	4606      	mov	r6, r0
 8009296:	3a30      	subs	r2, #48	; 0x30
 8009298:	f100 0301 	add.w	r3, r0, #1
 800929c:	d014      	beq.n	80092c8 <_strtod_l+0x240>
 800929e:	9905      	ldr	r1, [sp, #20]
 80092a0:	4419      	add	r1, r3
 80092a2:	9105      	str	r1, [sp, #20]
 80092a4:	4633      	mov	r3, r6
 80092a6:	eb00 0c06 	add.w	ip, r0, r6
 80092aa:	210a      	movs	r1, #10
 80092ac:	4563      	cmp	r3, ip
 80092ae:	d113      	bne.n	80092d8 <_strtod_l+0x250>
 80092b0:	1833      	adds	r3, r6, r0
 80092b2:	2b08      	cmp	r3, #8
 80092b4:	f106 0601 	add.w	r6, r6, #1
 80092b8:	4406      	add	r6, r0
 80092ba:	dc1a      	bgt.n	80092f2 <_strtod_l+0x26a>
 80092bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80092be:	230a      	movs	r3, #10
 80092c0:	fb03 2301 	mla	r3, r3, r1, r2
 80092c4:	9309      	str	r3, [sp, #36]	; 0x24
 80092c6:	2300      	movs	r3, #0
 80092c8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80092ca:	1c51      	adds	r1, r2, #1
 80092cc:	9115      	str	r1, [sp, #84]	; 0x54
 80092ce:	7852      	ldrb	r2, [r2, #1]
 80092d0:	4618      	mov	r0, r3
 80092d2:	e7c9      	b.n	8009268 <_strtod_l+0x1e0>
 80092d4:	4658      	mov	r0, fp
 80092d6:	e7d2      	b.n	800927e <_strtod_l+0x1f6>
 80092d8:	2b08      	cmp	r3, #8
 80092da:	f103 0301 	add.w	r3, r3, #1
 80092de:	dc03      	bgt.n	80092e8 <_strtod_l+0x260>
 80092e0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80092e2:	434f      	muls	r7, r1
 80092e4:	9709      	str	r7, [sp, #36]	; 0x24
 80092e6:	e7e1      	b.n	80092ac <_strtod_l+0x224>
 80092e8:	2b10      	cmp	r3, #16
 80092ea:	bfd8      	it	le
 80092ec:	fb01 fa0a 	mulle.w	sl, r1, sl
 80092f0:	e7dc      	b.n	80092ac <_strtod_l+0x224>
 80092f2:	2e10      	cmp	r6, #16
 80092f4:	bfdc      	itt	le
 80092f6:	230a      	movle	r3, #10
 80092f8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80092fc:	e7e3      	b.n	80092c6 <_strtod_l+0x23e>
 80092fe:	2300      	movs	r3, #0
 8009300:	9305      	str	r3, [sp, #20]
 8009302:	2301      	movs	r3, #1
 8009304:	e780      	b.n	8009208 <_strtod_l+0x180>
 8009306:	f04f 0c00 	mov.w	ip, #0
 800930a:	1caa      	adds	r2, r5, #2
 800930c:	9215      	str	r2, [sp, #84]	; 0x54
 800930e:	78aa      	ldrb	r2, [r5, #2]
 8009310:	e788      	b.n	8009224 <_strtod_l+0x19c>
 8009312:	f04f 0c01 	mov.w	ip, #1
 8009316:	e7f8      	b.n	800930a <_strtod_l+0x282>
 8009318:	0800cab8 	.word	0x0800cab8
 800931c:	0800cab5 	.word	0x0800cab5
 8009320:	7ff00000 	.word	0x7ff00000
 8009324:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009326:	1c51      	adds	r1, r2, #1
 8009328:	9115      	str	r1, [sp, #84]	; 0x54
 800932a:	7852      	ldrb	r2, [r2, #1]
 800932c:	2a30      	cmp	r2, #48	; 0x30
 800932e:	d0f9      	beq.n	8009324 <_strtod_l+0x29c>
 8009330:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009334:	2908      	cmp	r1, #8
 8009336:	f63f af7a 	bhi.w	800922e <_strtod_l+0x1a6>
 800933a:	3a30      	subs	r2, #48	; 0x30
 800933c:	9208      	str	r2, [sp, #32]
 800933e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009340:	920c      	str	r2, [sp, #48]	; 0x30
 8009342:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009344:	1c57      	adds	r7, r2, #1
 8009346:	9715      	str	r7, [sp, #84]	; 0x54
 8009348:	7852      	ldrb	r2, [r2, #1]
 800934a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800934e:	f1be 0f09 	cmp.w	lr, #9
 8009352:	d938      	bls.n	80093c6 <_strtod_l+0x33e>
 8009354:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009356:	1a7f      	subs	r7, r7, r1
 8009358:	2f08      	cmp	r7, #8
 800935a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800935e:	dc03      	bgt.n	8009368 <_strtod_l+0x2e0>
 8009360:	9908      	ldr	r1, [sp, #32]
 8009362:	428f      	cmp	r7, r1
 8009364:	bfa8      	it	ge
 8009366:	460f      	movge	r7, r1
 8009368:	f1bc 0f00 	cmp.w	ip, #0
 800936c:	d000      	beq.n	8009370 <_strtod_l+0x2e8>
 800936e:	427f      	negs	r7, r7
 8009370:	2e00      	cmp	r6, #0
 8009372:	d14f      	bne.n	8009414 <_strtod_l+0x38c>
 8009374:	9904      	ldr	r1, [sp, #16]
 8009376:	4301      	orrs	r1, r0
 8009378:	f47f aec1 	bne.w	80090fe <_strtod_l+0x76>
 800937c:	2b00      	cmp	r3, #0
 800937e:	f47f aedb 	bne.w	8009138 <_strtod_l+0xb0>
 8009382:	2a69      	cmp	r2, #105	; 0x69
 8009384:	d029      	beq.n	80093da <_strtod_l+0x352>
 8009386:	dc26      	bgt.n	80093d6 <_strtod_l+0x34e>
 8009388:	2a49      	cmp	r2, #73	; 0x49
 800938a:	d026      	beq.n	80093da <_strtod_l+0x352>
 800938c:	2a4e      	cmp	r2, #78	; 0x4e
 800938e:	f47f aed3 	bne.w	8009138 <_strtod_l+0xb0>
 8009392:	499b      	ldr	r1, [pc, #620]	; (8009600 <_strtod_l+0x578>)
 8009394:	a815      	add	r0, sp, #84	; 0x54
 8009396:	f001 feb5 	bl	800b104 <__match>
 800939a:	2800      	cmp	r0, #0
 800939c:	f43f aecc 	beq.w	8009138 <_strtod_l+0xb0>
 80093a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80093a2:	781b      	ldrb	r3, [r3, #0]
 80093a4:	2b28      	cmp	r3, #40	; 0x28
 80093a6:	d12f      	bne.n	8009408 <_strtod_l+0x380>
 80093a8:	4996      	ldr	r1, [pc, #600]	; (8009604 <_strtod_l+0x57c>)
 80093aa:	aa18      	add	r2, sp, #96	; 0x60
 80093ac:	a815      	add	r0, sp, #84	; 0x54
 80093ae:	f001 febd 	bl	800b12c <__hexnan>
 80093b2:	2805      	cmp	r0, #5
 80093b4:	d128      	bne.n	8009408 <_strtod_l+0x380>
 80093b6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80093b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80093bc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80093c0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80093c4:	e69b      	b.n	80090fe <_strtod_l+0x76>
 80093c6:	9f08      	ldr	r7, [sp, #32]
 80093c8:	210a      	movs	r1, #10
 80093ca:	fb01 2107 	mla	r1, r1, r7, r2
 80093ce:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80093d2:	9208      	str	r2, [sp, #32]
 80093d4:	e7b5      	b.n	8009342 <_strtod_l+0x2ba>
 80093d6:	2a6e      	cmp	r2, #110	; 0x6e
 80093d8:	e7d9      	b.n	800938e <_strtod_l+0x306>
 80093da:	498b      	ldr	r1, [pc, #556]	; (8009608 <_strtod_l+0x580>)
 80093dc:	a815      	add	r0, sp, #84	; 0x54
 80093de:	f001 fe91 	bl	800b104 <__match>
 80093e2:	2800      	cmp	r0, #0
 80093e4:	f43f aea8 	beq.w	8009138 <_strtod_l+0xb0>
 80093e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80093ea:	4988      	ldr	r1, [pc, #544]	; (800960c <_strtod_l+0x584>)
 80093ec:	3b01      	subs	r3, #1
 80093ee:	a815      	add	r0, sp, #84	; 0x54
 80093f0:	9315      	str	r3, [sp, #84]	; 0x54
 80093f2:	f001 fe87 	bl	800b104 <__match>
 80093f6:	b910      	cbnz	r0, 80093fe <_strtod_l+0x376>
 80093f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80093fa:	3301      	adds	r3, #1
 80093fc:	9315      	str	r3, [sp, #84]	; 0x54
 80093fe:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800961c <_strtod_l+0x594>
 8009402:	f04f 0800 	mov.w	r8, #0
 8009406:	e67a      	b.n	80090fe <_strtod_l+0x76>
 8009408:	4881      	ldr	r0, [pc, #516]	; (8009610 <_strtod_l+0x588>)
 800940a:	f000 fd49 	bl	8009ea0 <nan>
 800940e:	ec59 8b10 	vmov	r8, r9, d0
 8009412:	e674      	b.n	80090fe <_strtod_l+0x76>
 8009414:	9b05      	ldr	r3, [sp, #20]
 8009416:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009418:	1afb      	subs	r3, r7, r3
 800941a:	f1bb 0f00 	cmp.w	fp, #0
 800941e:	bf08      	it	eq
 8009420:	46b3      	moveq	fp, r6
 8009422:	2e10      	cmp	r6, #16
 8009424:	9308      	str	r3, [sp, #32]
 8009426:	4635      	mov	r5, r6
 8009428:	bfa8      	it	ge
 800942a:	2510      	movge	r5, #16
 800942c:	f7f7 f88a 	bl	8000544 <__aeabi_ui2d>
 8009430:	2e09      	cmp	r6, #9
 8009432:	4680      	mov	r8, r0
 8009434:	4689      	mov	r9, r1
 8009436:	dd13      	ble.n	8009460 <_strtod_l+0x3d8>
 8009438:	4b76      	ldr	r3, [pc, #472]	; (8009614 <_strtod_l+0x58c>)
 800943a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800943e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009442:	f7f7 f8f9 	bl	8000638 <__aeabi_dmul>
 8009446:	4680      	mov	r8, r0
 8009448:	4650      	mov	r0, sl
 800944a:	4689      	mov	r9, r1
 800944c:	f7f7 f87a 	bl	8000544 <__aeabi_ui2d>
 8009450:	4602      	mov	r2, r0
 8009452:	460b      	mov	r3, r1
 8009454:	4640      	mov	r0, r8
 8009456:	4649      	mov	r1, r9
 8009458:	f7f6 ff38 	bl	80002cc <__adddf3>
 800945c:	4680      	mov	r8, r0
 800945e:	4689      	mov	r9, r1
 8009460:	2e0f      	cmp	r6, #15
 8009462:	dc38      	bgt.n	80094d6 <_strtod_l+0x44e>
 8009464:	9b08      	ldr	r3, [sp, #32]
 8009466:	2b00      	cmp	r3, #0
 8009468:	f43f ae49 	beq.w	80090fe <_strtod_l+0x76>
 800946c:	dd24      	ble.n	80094b8 <_strtod_l+0x430>
 800946e:	2b16      	cmp	r3, #22
 8009470:	dc0b      	bgt.n	800948a <_strtod_l+0x402>
 8009472:	4968      	ldr	r1, [pc, #416]	; (8009614 <_strtod_l+0x58c>)
 8009474:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009478:	e9d1 0100 	ldrd	r0, r1, [r1]
 800947c:	4642      	mov	r2, r8
 800947e:	464b      	mov	r3, r9
 8009480:	f7f7 f8da 	bl	8000638 <__aeabi_dmul>
 8009484:	4680      	mov	r8, r0
 8009486:	4689      	mov	r9, r1
 8009488:	e639      	b.n	80090fe <_strtod_l+0x76>
 800948a:	9a08      	ldr	r2, [sp, #32]
 800948c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8009490:	4293      	cmp	r3, r2
 8009492:	db20      	blt.n	80094d6 <_strtod_l+0x44e>
 8009494:	4c5f      	ldr	r4, [pc, #380]	; (8009614 <_strtod_l+0x58c>)
 8009496:	f1c6 060f 	rsb	r6, r6, #15
 800949a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800949e:	4642      	mov	r2, r8
 80094a0:	464b      	mov	r3, r9
 80094a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094a6:	f7f7 f8c7 	bl	8000638 <__aeabi_dmul>
 80094aa:	9b08      	ldr	r3, [sp, #32]
 80094ac:	1b9e      	subs	r6, r3, r6
 80094ae:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80094b2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80094b6:	e7e3      	b.n	8009480 <_strtod_l+0x3f8>
 80094b8:	9b08      	ldr	r3, [sp, #32]
 80094ba:	3316      	adds	r3, #22
 80094bc:	db0b      	blt.n	80094d6 <_strtod_l+0x44e>
 80094be:	9b05      	ldr	r3, [sp, #20]
 80094c0:	1bdf      	subs	r7, r3, r7
 80094c2:	4b54      	ldr	r3, [pc, #336]	; (8009614 <_strtod_l+0x58c>)
 80094c4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80094c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094cc:	4640      	mov	r0, r8
 80094ce:	4649      	mov	r1, r9
 80094d0:	f7f7 f9dc 	bl	800088c <__aeabi_ddiv>
 80094d4:	e7d6      	b.n	8009484 <_strtod_l+0x3fc>
 80094d6:	9b08      	ldr	r3, [sp, #32]
 80094d8:	1b75      	subs	r5, r6, r5
 80094da:	441d      	add	r5, r3
 80094dc:	2d00      	cmp	r5, #0
 80094de:	dd70      	ble.n	80095c2 <_strtod_l+0x53a>
 80094e0:	f015 030f 	ands.w	r3, r5, #15
 80094e4:	d00a      	beq.n	80094fc <_strtod_l+0x474>
 80094e6:	494b      	ldr	r1, [pc, #300]	; (8009614 <_strtod_l+0x58c>)
 80094e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80094ec:	4642      	mov	r2, r8
 80094ee:	464b      	mov	r3, r9
 80094f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094f4:	f7f7 f8a0 	bl	8000638 <__aeabi_dmul>
 80094f8:	4680      	mov	r8, r0
 80094fa:	4689      	mov	r9, r1
 80094fc:	f035 050f 	bics.w	r5, r5, #15
 8009500:	d04d      	beq.n	800959e <_strtod_l+0x516>
 8009502:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8009506:	dd22      	ble.n	800954e <_strtod_l+0x4c6>
 8009508:	2500      	movs	r5, #0
 800950a:	46ab      	mov	fp, r5
 800950c:	9509      	str	r5, [sp, #36]	; 0x24
 800950e:	9505      	str	r5, [sp, #20]
 8009510:	2322      	movs	r3, #34	; 0x22
 8009512:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800961c <_strtod_l+0x594>
 8009516:	6023      	str	r3, [r4, #0]
 8009518:	f04f 0800 	mov.w	r8, #0
 800951c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800951e:	2b00      	cmp	r3, #0
 8009520:	f43f aded 	beq.w	80090fe <_strtod_l+0x76>
 8009524:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009526:	4620      	mov	r0, r4
 8009528:	f002 f9a8 	bl	800b87c <_Bfree>
 800952c:	9905      	ldr	r1, [sp, #20]
 800952e:	4620      	mov	r0, r4
 8009530:	f002 f9a4 	bl	800b87c <_Bfree>
 8009534:	4659      	mov	r1, fp
 8009536:	4620      	mov	r0, r4
 8009538:	f002 f9a0 	bl	800b87c <_Bfree>
 800953c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800953e:	4620      	mov	r0, r4
 8009540:	f002 f99c 	bl	800b87c <_Bfree>
 8009544:	4629      	mov	r1, r5
 8009546:	4620      	mov	r0, r4
 8009548:	f002 f998 	bl	800b87c <_Bfree>
 800954c:	e5d7      	b.n	80090fe <_strtod_l+0x76>
 800954e:	4b32      	ldr	r3, [pc, #200]	; (8009618 <_strtod_l+0x590>)
 8009550:	9304      	str	r3, [sp, #16]
 8009552:	2300      	movs	r3, #0
 8009554:	112d      	asrs	r5, r5, #4
 8009556:	4640      	mov	r0, r8
 8009558:	4649      	mov	r1, r9
 800955a:	469a      	mov	sl, r3
 800955c:	2d01      	cmp	r5, #1
 800955e:	dc21      	bgt.n	80095a4 <_strtod_l+0x51c>
 8009560:	b10b      	cbz	r3, 8009566 <_strtod_l+0x4de>
 8009562:	4680      	mov	r8, r0
 8009564:	4689      	mov	r9, r1
 8009566:	492c      	ldr	r1, [pc, #176]	; (8009618 <_strtod_l+0x590>)
 8009568:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800956c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009570:	4642      	mov	r2, r8
 8009572:	464b      	mov	r3, r9
 8009574:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009578:	f7f7 f85e 	bl	8000638 <__aeabi_dmul>
 800957c:	4b27      	ldr	r3, [pc, #156]	; (800961c <_strtod_l+0x594>)
 800957e:	460a      	mov	r2, r1
 8009580:	400b      	ands	r3, r1
 8009582:	4927      	ldr	r1, [pc, #156]	; (8009620 <_strtod_l+0x598>)
 8009584:	428b      	cmp	r3, r1
 8009586:	4680      	mov	r8, r0
 8009588:	d8be      	bhi.n	8009508 <_strtod_l+0x480>
 800958a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800958e:	428b      	cmp	r3, r1
 8009590:	bf86      	itte	hi
 8009592:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8009624 <_strtod_l+0x59c>
 8009596:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 800959a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800959e:	2300      	movs	r3, #0
 80095a0:	9304      	str	r3, [sp, #16]
 80095a2:	e07b      	b.n	800969c <_strtod_l+0x614>
 80095a4:	07ea      	lsls	r2, r5, #31
 80095a6:	d505      	bpl.n	80095b4 <_strtod_l+0x52c>
 80095a8:	9b04      	ldr	r3, [sp, #16]
 80095aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ae:	f7f7 f843 	bl	8000638 <__aeabi_dmul>
 80095b2:	2301      	movs	r3, #1
 80095b4:	9a04      	ldr	r2, [sp, #16]
 80095b6:	3208      	adds	r2, #8
 80095b8:	f10a 0a01 	add.w	sl, sl, #1
 80095bc:	106d      	asrs	r5, r5, #1
 80095be:	9204      	str	r2, [sp, #16]
 80095c0:	e7cc      	b.n	800955c <_strtod_l+0x4d4>
 80095c2:	d0ec      	beq.n	800959e <_strtod_l+0x516>
 80095c4:	426d      	negs	r5, r5
 80095c6:	f015 020f 	ands.w	r2, r5, #15
 80095ca:	d00a      	beq.n	80095e2 <_strtod_l+0x55a>
 80095cc:	4b11      	ldr	r3, [pc, #68]	; (8009614 <_strtod_l+0x58c>)
 80095ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80095d2:	4640      	mov	r0, r8
 80095d4:	4649      	mov	r1, r9
 80095d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095da:	f7f7 f957 	bl	800088c <__aeabi_ddiv>
 80095de:	4680      	mov	r8, r0
 80095e0:	4689      	mov	r9, r1
 80095e2:	112d      	asrs	r5, r5, #4
 80095e4:	d0db      	beq.n	800959e <_strtod_l+0x516>
 80095e6:	2d1f      	cmp	r5, #31
 80095e8:	dd1e      	ble.n	8009628 <_strtod_l+0x5a0>
 80095ea:	2500      	movs	r5, #0
 80095ec:	46ab      	mov	fp, r5
 80095ee:	9509      	str	r5, [sp, #36]	; 0x24
 80095f0:	9505      	str	r5, [sp, #20]
 80095f2:	2322      	movs	r3, #34	; 0x22
 80095f4:	f04f 0800 	mov.w	r8, #0
 80095f8:	f04f 0900 	mov.w	r9, #0
 80095fc:	6023      	str	r3, [r4, #0]
 80095fe:	e78d      	b.n	800951c <_strtod_l+0x494>
 8009600:	0800ca89 	.word	0x0800ca89
 8009604:	0800cacc 	.word	0x0800cacc
 8009608:	0800ca81 	.word	0x0800ca81
 800960c:	0800cc14 	.word	0x0800cc14
 8009610:	0800ce9f 	.word	0x0800ce9f
 8009614:	0800cd90 	.word	0x0800cd90
 8009618:	0800cd68 	.word	0x0800cd68
 800961c:	7ff00000 	.word	0x7ff00000
 8009620:	7ca00000 	.word	0x7ca00000
 8009624:	7fefffff 	.word	0x7fefffff
 8009628:	f015 0310 	ands.w	r3, r5, #16
 800962c:	bf18      	it	ne
 800962e:	236a      	movne	r3, #106	; 0x6a
 8009630:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80099d4 <_strtod_l+0x94c>
 8009634:	9304      	str	r3, [sp, #16]
 8009636:	4640      	mov	r0, r8
 8009638:	4649      	mov	r1, r9
 800963a:	2300      	movs	r3, #0
 800963c:	07ea      	lsls	r2, r5, #31
 800963e:	d504      	bpl.n	800964a <_strtod_l+0x5c2>
 8009640:	e9da 2300 	ldrd	r2, r3, [sl]
 8009644:	f7f6 fff8 	bl	8000638 <__aeabi_dmul>
 8009648:	2301      	movs	r3, #1
 800964a:	106d      	asrs	r5, r5, #1
 800964c:	f10a 0a08 	add.w	sl, sl, #8
 8009650:	d1f4      	bne.n	800963c <_strtod_l+0x5b4>
 8009652:	b10b      	cbz	r3, 8009658 <_strtod_l+0x5d0>
 8009654:	4680      	mov	r8, r0
 8009656:	4689      	mov	r9, r1
 8009658:	9b04      	ldr	r3, [sp, #16]
 800965a:	b1bb      	cbz	r3, 800968c <_strtod_l+0x604>
 800965c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8009660:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009664:	2b00      	cmp	r3, #0
 8009666:	4649      	mov	r1, r9
 8009668:	dd10      	ble.n	800968c <_strtod_l+0x604>
 800966a:	2b1f      	cmp	r3, #31
 800966c:	f340 811e 	ble.w	80098ac <_strtod_l+0x824>
 8009670:	2b34      	cmp	r3, #52	; 0x34
 8009672:	bfde      	ittt	le
 8009674:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8009678:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800967c:	4093      	lslle	r3, r2
 800967e:	f04f 0800 	mov.w	r8, #0
 8009682:	bfcc      	ite	gt
 8009684:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009688:	ea03 0901 	andle.w	r9, r3, r1
 800968c:	2200      	movs	r2, #0
 800968e:	2300      	movs	r3, #0
 8009690:	4640      	mov	r0, r8
 8009692:	4649      	mov	r1, r9
 8009694:	f7f7 fa38 	bl	8000b08 <__aeabi_dcmpeq>
 8009698:	2800      	cmp	r0, #0
 800969a:	d1a6      	bne.n	80095ea <_strtod_l+0x562>
 800969c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800969e:	9300      	str	r3, [sp, #0]
 80096a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80096a2:	4633      	mov	r3, r6
 80096a4:	465a      	mov	r2, fp
 80096a6:	4620      	mov	r0, r4
 80096a8:	f002 f950 	bl	800b94c <__s2b>
 80096ac:	9009      	str	r0, [sp, #36]	; 0x24
 80096ae:	2800      	cmp	r0, #0
 80096b0:	f43f af2a 	beq.w	8009508 <_strtod_l+0x480>
 80096b4:	9a08      	ldr	r2, [sp, #32]
 80096b6:	9b05      	ldr	r3, [sp, #20]
 80096b8:	2a00      	cmp	r2, #0
 80096ba:	eba3 0307 	sub.w	r3, r3, r7
 80096be:	bfa8      	it	ge
 80096c0:	2300      	movge	r3, #0
 80096c2:	930c      	str	r3, [sp, #48]	; 0x30
 80096c4:	2500      	movs	r5, #0
 80096c6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80096ca:	9312      	str	r3, [sp, #72]	; 0x48
 80096cc:	46ab      	mov	fp, r5
 80096ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096d0:	4620      	mov	r0, r4
 80096d2:	6859      	ldr	r1, [r3, #4]
 80096d4:	f002 f892 	bl	800b7fc <_Balloc>
 80096d8:	9005      	str	r0, [sp, #20]
 80096da:	2800      	cmp	r0, #0
 80096dc:	f43f af18 	beq.w	8009510 <_strtod_l+0x488>
 80096e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096e2:	691a      	ldr	r2, [r3, #16]
 80096e4:	3202      	adds	r2, #2
 80096e6:	f103 010c 	add.w	r1, r3, #12
 80096ea:	0092      	lsls	r2, r2, #2
 80096ec:	300c      	adds	r0, #12
 80096ee:	f000 fbc8 	bl	8009e82 <memcpy>
 80096f2:	ec49 8b10 	vmov	d0, r8, r9
 80096f6:	aa18      	add	r2, sp, #96	; 0x60
 80096f8:	a917      	add	r1, sp, #92	; 0x5c
 80096fa:	4620      	mov	r0, r4
 80096fc:	f002 fc5a 	bl	800bfb4 <__d2b>
 8009700:	ec49 8b18 	vmov	d8, r8, r9
 8009704:	9016      	str	r0, [sp, #88]	; 0x58
 8009706:	2800      	cmp	r0, #0
 8009708:	f43f af02 	beq.w	8009510 <_strtod_l+0x488>
 800970c:	2101      	movs	r1, #1
 800970e:	4620      	mov	r0, r4
 8009710:	f002 f9b4 	bl	800ba7c <__i2b>
 8009714:	4683      	mov	fp, r0
 8009716:	2800      	cmp	r0, #0
 8009718:	f43f aefa 	beq.w	8009510 <_strtod_l+0x488>
 800971c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800971e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009720:	2e00      	cmp	r6, #0
 8009722:	bfab      	itete	ge
 8009724:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8009726:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8009728:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800972a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800972e:	bfac      	ite	ge
 8009730:	eb06 0a03 	addge.w	sl, r6, r3
 8009734:	1b9f      	sublt	r7, r3, r6
 8009736:	9b04      	ldr	r3, [sp, #16]
 8009738:	1af6      	subs	r6, r6, r3
 800973a:	4416      	add	r6, r2
 800973c:	4ba0      	ldr	r3, [pc, #640]	; (80099c0 <_strtod_l+0x938>)
 800973e:	3e01      	subs	r6, #1
 8009740:	429e      	cmp	r6, r3
 8009742:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009746:	f280 80c4 	bge.w	80098d2 <_strtod_l+0x84a>
 800974a:	1b9b      	subs	r3, r3, r6
 800974c:	2b1f      	cmp	r3, #31
 800974e:	eba2 0203 	sub.w	r2, r2, r3
 8009752:	f04f 0101 	mov.w	r1, #1
 8009756:	f300 80b0 	bgt.w	80098ba <_strtod_l+0x832>
 800975a:	fa01 f303 	lsl.w	r3, r1, r3
 800975e:	930e      	str	r3, [sp, #56]	; 0x38
 8009760:	2300      	movs	r3, #0
 8009762:	930d      	str	r3, [sp, #52]	; 0x34
 8009764:	eb0a 0602 	add.w	r6, sl, r2
 8009768:	9b04      	ldr	r3, [sp, #16]
 800976a:	45b2      	cmp	sl, r6
 800976c:	4417      	add	r7, r2
 800976e:	441f      	add	r7, r3
 8009770:	4653      	mov	r3, sl
 8009772:	bfa8      	it	ge
 8009774:	4633      	movge	r3, r6
 8009776:	42bb      	cmp	r3, r7
 8009778:	bfa8      	it	ge
 800977a:	463b      	movge	r3, r7
 800977c:	2b00      	cmp	r3, #0
 800977e:	bfc2      	ittt	gt
 8009780:	1af6      	subgt	r6, r6, r3
 8009782:	1aff      	subgt	r7, r7, r3
 8009784:	ebaa 0a03 	subgt.w	sl, sl, r3
 8009788:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800978a:	2b00      	cmp	r3, #0
 800978c:	dd17      	ble.n	80097be <_strtod_l+0x736>
 800978e:	4659      	mov	r1, fp
 8009790:	461a      	mov	r2, r3
 8009792:	4620      	mov	r0, r4
 8009794:	f002 fa32 	bl	800bbfc <__pow5mult>
 8009798:	4683      	mov	fp, r0
 800979a:	2800      	cmp	r0, #0
 800979c:	f43f aeb8 	beq.w	8009510 <_strtod_l+0x488>
 80097a0:	4601      	mov	r1, r0
 80097a2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80097a4:	4620      	mov	r0, r4
 80097a6:	f002 f97f 	bl	800baa8 <__multiply>
 80097aa:	900b      	str	r0, [sp, #44]	; 0x2c
 80097ac:	2800      	cmp	r0, #0
 80097ae:	f43f aeaf 	beq.w	8009510 <_strtod_l+0x488>
 80097b2:	9916      	ldr	r1, [sp, #88]	; 0x58
 80097b4:	4620      	mov	r0, r4
 80097b6:	f002 f861 	bl	800b87c <_Bfree>
 80097ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097bc:	9316      	str	r3, [sp, #88]	; 0x58
 80097be:	2e00      	cmp	r6, #0
 80097c0:	f300 808c 	bgt.w	80098dc <_strtod_l+0x854>
 80097c4:	9b08      	ldr	r3, [sp, #32]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	dd08      	ble.n	80097dc <_strtod_l+0x754>
 80097ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80097cc:	9905      	ldr	r1, [sp, #20]
 80097ce:	4620      	mov	r0, r4
 80097d0:	f002 fa14 	bl	800bbfc <__pow5mult>
 80097d4:	9005      	str	r0, [sp, #20]
 80097d6:	2800      	cmp	r0, #0
 80097d8:	f43f ae9a 	beq.w	8009510 <_strtod_l+0x488>
 80097dc:	2f00      	cmp	r7, #0
 80097de:	dd08      	ble.n	80097f2 <_strtod_l+0x76a>
 80097e0:	9905      	ldr	r1, [sp, #20]
 80097e2:	463a      	mov	r2, r7
 80097e4:	4620      	mov	r0, r4
 80097e6:	f002 fa63 	bl	800bcb0 <__lshift>
 80097ea:	9005      	str	r0, [sp, #20]
 80097ec:	2800      	cmp	r0, #0
 80097ee:	f43f ae8f 	beq.w	8009510 <_strtod_l+0x488>
 80097f2:	f1ba 0f00 	cmp.w	sl, #0
 80097f6:	dd08      	ble.n	800980a <_strtod_l+0x782>
 80097f8:	4659      	mov	r1, fp
 80097fa:	4652      	mov	r2, sl
 80097fc:	4620      	mov	r0, r4
 80097fe:	f002 fa57 	bl	800bcb0 <__lshift>
 8009802:	4683      	mov	fp, r0
 8009804:	2800      	cmp	r0, #0
 8009806:	f43f ae83 	beq.w	8009510 <_strtod_l+0x488>
 800980a:	9a05      	ldr	r2, [sp, #20]
 800980c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800980e:	4620      	mov	r0, r4
 8009810:	f002 fad6 	bl	800bdc0 <__mdiff>
 8009814:	4605      	mov	r5, r0
 8009816:	2800      	cmp	r0, #0
 8009818:	f43f ae7a 	beq.w	8009510 <_strtod_l+0x488>
 800981c:	68c3      	ldr	r3, [r0, #12]
 800981e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009820:	2300      	movs	r3, #0
 8009822:	60c3      	str	r3, [r0, #12]
 8009824:	4659      	mov	r1, fp
 8009826:	f002 faaf 	bl	800bd88 <__mcmp>
 800982a:	2800      	cmp	r0, #0
 800982c:	da60      	bge.n	80098f0 <_strtod_l+0x868>
 800982e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009830:	ea53 0308 	orrs.w	r3, r3, r8
 8009834:	f040 8084 	bne.w	8009940 <_strtod_l+0x8b8>
 8009838:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800983c:	2b00      	cmp	r3, #0
 800983e:	d17f      	bne.n	8009940 <_strtod_l+0x8b8>
 8009840:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009844:	0d1b      	lsrs	r3, r3, #20
 8009846:	051b      	lsls	r3, r3, #20
 8009848:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800984c:	d978      	bls.n	8009940 <_strtod_l+0x8b8>
 800984e:	696b      	ldr	r3, [r5, #20]
 8009850:	b913      	cbnz	r3, 8009858 <_strtod_l+0x7d0>
 8009852:	692b      	ldr	r3, [r5, #16]
 8009854:	2b01      	cmp	r3, #1
 8009856:	dd73      	ble.n	8009940 <_strtod_l+0x8b8>
 8009858:	4629      	mov	r1, r5
 800985a:	2201      	movs	r2, #1
 800985c:	4620      	mov	r0, r4
 800985e:	f002 fa27 	bl	800bcb0 <__lshift>
 8009862:	4659      	mov	r1, fp
 8009864:	4605      	mov	r5, r0
 8009866:	f002 fa8f 	bl	800bd88 <__mcmp>
 800986a:	2800      	cmp	r0, #0
 800986c:	dd68      	ble.n	8009940 <_strtod_l+0x8b8>
 800986e:	9904      	ldr	r1, [sp, #16]
 8009870:	4a54      	ldr	r2, [pc, #336]	; (80099c4 <_strtod_l+0x93c>)
 8009872:	464b      	mov	r3, r9
 8009874:	2900      	cmp	r1, #0
 8009876:	f000 8084 	beq.w	8009982 <_strtod_l+0x8fa>
 800987a:	ea02 0109 	and.w	r1, r2, r9
 800987e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009882:	dc7e      	bgt.n	8009982 <_strtod_l+0x8fa>
 8009884:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009888:	f77f aeb3 	ble.w	80095f2 <_strtod_l+0x56a>
 800988c:	4b4e      	ldr	r3, [pc, #312]	; (80099c8 <_strtod_l+0x940>)
 800988e:	4640      	mov	r0, r8
 8009890:	4649      	mov	r1, r9
 8009892:	2200      	movs	r2, #0
 8009894:	f7f6 fed0 	bl	8000638 <__aeabi_dmul>
 8009898:	4b4a      	ldr	r3, [pc, #296]	; (80099c4 <_strtod_l+0x93c>)
 800989a:	400b      	ands	r3, r1
 800989c:	4680      	mov	r8, r0
 800989e:	4689      	mov	r9, r1
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	f47f ae3f 	bne.w	8009524 <_strtod_l+0x49c>
 80098a6:	2322      	movs	r3, #34	; 0x22
 80098a8:	6023      	str	r3, [r4, #0]
 80098aa:	e63b      	b.n	8009524 <_strtod_l+0x49c>
 80098ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80098b0:	fa02 f303 	lsl.w	r3, r2, r3
 80098b4:	ea03 0808 	and.w	r8, r3, r8
 80098b8:	e6e8      	b.n	800968c <_strtod_l+0x604>
 80098ba:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80098be:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80098c2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80098c6:	36e2      	adds	r6, #226	; 0xe2
 80098c8:	fa01 f306 	lsl.w	r3, r1, r6
 80098cc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80098d0:	e748      	b.n	8009764 <_strtod_l+0x6dc>
 80098d2:	2100      	movs	r1, #0
 80098d4:	2301      	movs	r3, #1
 80098d6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80098da:	e743      	b.n	8009764 <_strtod_l+0x6dc>
 80098dc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80098de:	4632      	mov	r2, r6
 80098e0:	4620      	mov	r0, r4
 80098e2:	f002 f9e5 	bl	800bcb0 <__lshift>
 80098e6:	9016      	str	r0, [sp, #88]	; 0x58
 80098e8:	2800      	cmp	r0, #0
 80098ea:	f47f af6b 	bne.w	80097c4 <_strtod_l+0x73c>
 80098ee:	e60f      	b.n	8009510 <_strtod_l+0x488>
 80098f0:	46ca      	mov	sl, r9
 80098f2:	d171      	bne.n	80099d8 <_strtod_l+0x950>
 80098f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80098f6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80098fa:	b352      	cbz	r2, 8009952 <_strtod_l+0x8ca>
 80098fc:	4a33      	ldr	r2, [pc, #204]	; (80099cc <_strtod_l+0x944>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d12a      	bne.n	8009958 <_strtod_l+0x8d0>
 8009902:	9b04      	ldr	r3, [sp, #16]
 8009904:	4641      	mov	r1, r8
 8009906:	b1fb      	cbz	r3, 8009948 <_strtod_l+0x8c0>
 8009908:	4b2e      	ldr	r3, [pc, #184]	; (80099c4 <_strtod_l+0x93c>)
 800990a:	ea09 0303 	and.w	r3, r9, r3
 800990e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009912:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009916:	d81a      	bhi.n	800994e <_strtod_l+0x8c6>
 8009918:	0d1b      	lsrs	r3, r3, #20
 800991a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800991e:	fa02 f303 	lsl.w	r3, r2, r3
 8009922:	4299      	cmp	r1, r3
 8009924:	d118      	bne.n	8009958 <_strtod_l+0x8d0>
 8009926:	4b2a      	ldr	r3, [pc, #168]	; (80099d0 <_strtod_l+0x948>)
 8009928:	459a      	cmp	sl, r3
 800992a:	d102      	bne.n	8009932 <_strtod_l+0x8aa>
 800992c:	3101      	adds	r1, #1
 800992e:	f43f adef 	beq.w	8009510 <_strtod_l+0x488>
 8009932:	4b24      	ldr	r3, [pc, #144]	; (80099c4 <_strtod_l+0x93c>)
 8009934:	ea0a 0303 	and.w	r3, sl, r3
 8009938:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800993c:	f04f 0800 	mov.w	r8, #0
 8009940:	9b04      	ldr	r3, [sp, #16]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d1a2      	bne.n	800988c <_strtod_l+0x804>
 8009946:	e5ed      	b.n	8009524 <_strtod_l+0x49c>
 8009948:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800994c:	e7e9      	b.n	8009922 <_strtod_l+0x89a>
 800994e:	4613      	mov	r3, r2
 8009950:	e7e7      	b.n	8009922 <_strtod_l+0x89a>
 8009952:	ea53 0308 	orrs.w	r3, r3, r8
 8009956:	d08a      	beq.n	800986e <_strtod_l+0x7e6>
 8009958:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800995a:	b1e3      	cbz	r3, 8009996 <_strtod_l+0x90e>
 800995c:	ea13 0f0a 	tst.w	r3, sl
 8009960:	d0ee      	beq.n	8009940 <_strtod_l+0x8b8>
 8009962:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009964:	9a04      	ldr	r2, [sp, #16]
 8009966:	4640      	mov	r0, r8
 8009968:	4649      	mov	r1, r9
 800996a:	b1c3      	cbz	r3, 800999e <_strtod_l+0x916>
 800996c:	f7ff fb6e 	bl	800904c <sulp>
 8009970:	4602      	mov	r2, r0
 8009972:	460b      	mov	r3, r1
 8009974:	ec51 0b18 	vmov	r0, r1, d8
 8009978:	f7f6 fca8 	bl	80002cc <__adddf3>
 800997c:	4680      	mov	r8, r0
 800997e:	4689      	mov	r9, r1
 8009980:	e7de      	b.n	8009940 <_strtod_l+0x8b8>
 8009982:	4013      	ands	r3, r2
 8009984:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009988:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800998c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009990:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8009994:	e7d4      	b.n	8009940 <_strtod_l+0x8b8>
 8009996:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009998:	ea13 0f08 	tst.w	r3, r8
 800999c:	e7e0      	b.n	8009960 <_strtod_l+0x8d8>
 800999e:	f7ff fb55 	bl	800904c <sulp>
 80099a2:	4602      	mov	r2, r0
 80099a4:	460b      	mov	r3, r1
 80099a6:	ec51 0b18 	vmov	r0, r1, d8
 80099aa:	f7f6 fc8d 	bl	80002c8 <__aeabi_dsub>
 80099ae:	2200      	movs	r2, #0
 80099b0:	2300      	movs	r3, #0
 80099b2:	4680      	mov	r8, r0
 80099b4:	4689      	mov	r9, r1
 80099b6:	f7f7 f8a7 	bl	8000b08 <__aeabi_dcmpeq>
 80099ba:	2800      	cmp	r0, #0
 80099bc:	d0c0      	beq.n	8009940 <_strtod_l+0x8b8>
 80099be:	e618      	b.n	80095f2 <_strtod_l+0x56a>
 80099c0:	fffffc02 	.word	0xfffffc02
 80099c4:	7ff00000 	.word	0x7ff00000
 80099c8:	39500000 	.word	0x39500000
 80099cc:	000fffff 	.word	0x000fffff
 80099d0:	7fefffff 	.word	0x7fefffff
 80099d4:	0800cae0 	.word	0x0800cae0
 80099d8:	4659      	mov	r1, fp
 80099da:	4628      	mov	r0, r5
 80099dc:	f002 fb44 	bl	800c068 <__ratio>
 80099e0:	ec57 6b10 	vmov	r6, r7, d0
 80099e4:	ee10 0a10 	vmov	r0, s0
 80099e8:	2200      	movs	r2, #0
 80099ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80099ee:	4639      	mov	r1, r7
 80099f0:	f7f7 f89e 	bl	8000b30 <__aeabi_dcmple>
 80099f4:	2800      	cmp	r0, #0
 80099f6:	d071      	beq.n	8009adc <_strtod_l+0xa54>
 80099f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d17c      	bne.n	8009af8 <_strtod_l+0xa70>
 80099fe:	f1b8 0f00 	cmp.w	r8, #0
 8009a02:	d15a      	bne.n	8009aba <_strtod_l+0xa32>
 8009a04:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d15d      	bne.n	8009ac8 <_strtod_l+0xa40>
 8009a0c:	4b90      	ldr	r3, [pc, #576]	; (8009c50 <_strtod_l+0xbc8>)
 8009a0e:	2200      	movs	r2, #0
 8009a10:	4630      	mov	r0, r6
 8009a12:	4639      	mov	r1, r7
 8009a14:	f7f7 f882 	bl	8000b1c <__aeabi_dcmplt>
 8009a18:	2800      	cmp	r0, #0
 8009a1a:	d15c      	bne.n	8009ad6 <_strtod_l+0xa4e>
 8009a1c:	4630      	mov	r0, r6
 8009a1e:	4639      	mov	r1, r7
 8009a20:	4b8c      	ldr	r3, [pc, #560]	; (8009c54 <_strtod_l+0xbcc>)
 8009a22:	2200      	movs	r2, #0
 8009a24:	f7f6 fe08 	bl	8000638 <__aeabi_dmul>
 8009a28:	4606      	mov	r6, r0
 8009a2a:	460f      	mov	r7, r1
 8009a2c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009a30:	9606      	str	r6, [sp, #24]
 8009a32:	9307      	str	r3, [sp, #28]
 8009a34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009a38:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009a3c:	4b86      	ldr	r3, [pc, #536]	; (8009c58 <_strtod_l+0xbd0>)
 8009a3e:	ea0a 0303 	and.w	r3, sl, r3
 8009a42:	930d      	str	r3, [sp, #52]	; 0x34
 8009a44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a46:	4b85      	ldr	r3, [pc, #532]	; (8009c5c <_strtod_l+0xbd4>)
 8009a48:	429a      	cmp	r2, r3
 8009a4a:	f040 8090 	bne.w	8009b6e <_strtod_l+0xae6>
 8009a4e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8009a52:	ec49 8b10 	vmov	d0, r8, r9
 8009a56:	f002 fa3d 	bl	800bed4 <__ulp>
 8009a5a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009a5e:	ec51 0b10 	vmov	r0, r1, d0
 8009a62:	f7f6 fde9 	bl	8000638 <__aeabi_dmul>
 8009a66:	4642      	mov	r2, r8
 8009a68:	464b      	mov	r3, r9
 8009a6a:	f7f6 fc2f 	bl	80002cc <__adddf3>
 8009a6e:	460b      	mov	r3, r1
 8009a70:	4979      	ldr	r1, [pc, #484]	; (8009c58 <_strtod_l+0xbd0>)
 8009a72:	4a7b      	ldr	r2, [pc, #492]	; (8009c60 <_strtod_l+0xbd8>)
 8009a74:	4019      	ands	r1, r3
 8009a76:	4291      	cmp	r1, r2
 8009a78:	4680      	mov	r8, r0
 8009a7a:	d944      	bls.n	8009b06 <_strtod_l+0xa7e>
 8009a7c:	ee18 2a90 	vmov	r2, s17
 8009a80:	4b78      	ldr	r3, [pc, #480]	; (8009c64 <_strtod_l+0xbdc>)
 8009a82:	429a      	cmp	r2, r3
 8009a84:	d104      	bne.n	8009a90 <_strtod_l+0xa08>
 8009a86:	ee18 3a10 	vmov	r3, s16
 8009a8a:	3301      	adds	r3, #1
 8009a8c:	f43f ad40 	beq.w	8009510 <_strtod_l+0x488>
 8009a90:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8009c64 <_strtod_l+0xbdc>
 8009a94:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8009a98:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009a9a:	4620      	mov	r0, r4
 8009a9c:	f001 feee 	bl	800b87c <_Bfree>
 8009aa0:	9905      	ldr	r1, [sp, #20]
 8009aa2:	4620      	mov	r0, r4
 8009aa4:	f001 feea 	bl	800b87c <_Bfree>
 8009aa8:	4659      	mov	r1, fp
 8009aaa:	4620      	mov	r0, r4
 8009aac:	f001 fee6 	bl	800b87c <_Bfree>
 8009ab0:	4629      	mov	r1, r5
 8009ab2:	4620      	mov	r0, r4
 8009ab4:	f001 fee2 	bl	800b87c <_Bfree>
 8009ab8:	e609      	b.n	80096ce <_strtod_l+0x646>
 8009aba:	f1b8 0f01 	cmp.w	r8, #1
 8009abe:	d103      	bne.n	8009ac8 <_strtod_l+0xa40>
 8009ac0:	f1b9 0f00 	cmp.w	r9, #0
 8009ac4:	f43f ad95 	beq.w	80095f2 <_strtod_l+0x56a>
 8009ac8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8009c20 <_strtod_l+0xb98>
 8009acc:	4f60      	ldr	r7, [pc, #384]	; (8009c50 <_strtod_l+0xbc8>)
 8009ace:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009ad2:	2600      	movs	r6, #0
 8009ad4:	e7ae      	b.n	8009a34 <_strtod_l+0x9ac>
 8009ad6:	4f5f      	ldr	r7, [pc, #380]	; (8009c54 <_strtod_l+0xbcc>)
 8009ad8:	2600      	movs	r6, #0
 8009ada:	e7a7      	b.n	8009a2c <_strtod_l+0x9a4>
 8009adc:	4b5d      	ldr	r3, [pc, #372]	; (8009c54 <_strtod_l+0xbcc>)
 8009ade:	4630      	mov	r0, r6
 8009ae0:	4639      	mov	r1, r7
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	f7f6 fda8 	bl	8000638 <__aeabi_dmul>
 8009ae8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009aea:	4606      	mov	r6, r0
 8009aec:	460f      	mov	r7, r1
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d09c      	beq.n	8009a2c <_strtod_l+0x9a4>
 8009af2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009af6:	e79d      	b.n	8009a34 <_strtod_l+0x9ac>
 8009af8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8009c28 <_strtod_l+0xba0>
 8009afc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009b00:	ec57 6b17 	vmov	r6, r7, d7
 8009b04:	e796      	b.n	8009a34 <_strtod_l+0x9ac>
 8009b06:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009b0a:	9b04      	ldr	r3, [sp, #16]
 8009b0c:	46ca      	mov	sl, r9
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d1c2      	bne.n	8009a98 <_strtod_l+0xa10>
 8009b12:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009b16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009b18:	0d1b      	lsrs	r3, r3, #20
 8009b1a:	051b      	lsls	r3, r3, #20
 8009b1c:	429a      	cmp	r2, r3
 8009b1e:	d1bb      	bne.n	8009a98 <_strtod_l+0xa10>
 8009b20:	4630      	mov	r0, r6
 8009b22:	4639      	mov	r1, r7
 8009b24:	f7f7 f8e8 	bl	8000cf8 <__aeabi_d2lz>
 8009b28:	f7f6 fd58 	bl	80005dc <__aeabi_l2d>
 8009b2c:	4602      	mov	r2, r0
 8009b2e:	460b      	mov	r3, r1
 8009b30:	4630      	mov	r0, r6
 8009b32:	4639      	mov	r1, r7
 8009b34:	f7f6 fbc8 	bl	80002c8 <__aeabi_dsub>
 8009b38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009b3a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009b3e:	ea43 0308 	orr.w	r3, r3, r8
 8009b42:	4313      	orrs	r3, r2
 8009b44:	4606      	mov	r6, r0
 8009b46:	460f      	mov	r7, r1
 8009b48:	d054      	beq.n	8009bf4 <_strtod_l+0xb6c>
 8009b4a:	a339      	add	r3, pc, #228	; (adr r3, 8009c30 <_strtod_l+0xba8>)
 8009b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b50:	f7f6 ffe4 	bl	8000b1c <__aeabi_dcmplt>
 8009b54:	2800      	cmp	r0, #0
 8009b56:	f47f ace5 	bne.w	8009524 <_strtod_l+0x49c>
 8009b5a:	a337      	add	r3, pc, #220	; (adr r3, 8009c38 <_strtod_l+0xbb0>)
 8009b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b60:	4630      	mov	r0, r6
 8009b62:	4639      	mov	r1, r7
 8009b64:	f7f6 fff8 	bl	8000b58 <__aeabi_dcmpgt>
 8009b68:	2800      	cmp	r0, #0
 8009b6a:	d095      	beq.n	8009a98 <_strtod_l+0xa10>
 8009b6c:	e4da      	b.n	8009524 <_strtod_l+0x49c>
 8009b6e:	9b04      	ldr	r3, [sp, #16]
 8009b70:	b333      	cbz	r3, 8009bc0 <_strtod_l+0xb38>
 8009b72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b74:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009b78:	d822      	bhi.n	8009bc0 <_strtod_l+0xb38>
 8009b7a:	a331      	add	r3, pc, #196	; (adr r3, 8009c40 <_strtod_l+0xbb8>)
 8009b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b80:	4630      	mov	r0, r6
 8009b82:	4639      	mov	r1, r7
 8009b84:	f7f6 ffd4 	bl	8000b30 <__aeabi_dcmple>
 8009b88:	b1a0      	cbz	r0, 8009bb4 <_strtod_l+0xb2c>
 8009b8a:	4639      	mov	r1, r7
 8009b8c:	4630      	mov	r0, r6
 8009b8e:	f7f7 f82b 	bl	8000be8 <__aeabi_d2uiz>
 8009b92:	2801      	cmp	r0, #1
 8009b94:	bf38      	it	cc
 8009b96:	2001      	movcc	r0, #1
 8009b98:	f7f6 fcd4 	bl	8000544 <__aeabi_ui2d>
 8009b9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b9e:	4606      	mov	r6, r0
 8009ba0:	460f      	mov	r7, r1
 8009ba2:	bb23      	cbnz	r3, 8009bee <_strtod_l+0xb66>
 8009ba4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009ba8:	9010      	str	r0, [sp, #64]	; 0x40
 8009baa:	9311      	str	r3, [sp, #68]	; 0x44
 8009bac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009bb0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009bb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009bb6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009bb8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009bbc:	1a9b      	subs	r3, r3, r2
 8009bbe:	930f      	str	r3, [sp, #60]	; 0x3c
 8009bc0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009bc4:	eeb0 0a48 	vmov.f32	s0, s16
 8009bc8:	eef0 0a68 	vmov.f32	s1, s17
 8009bcc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009bd0:	f002 f980 	bl	800bed4 <__ulp>
 8009bd4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009bd8:	ec53 2b10 	vmov	r2, r3, d0
 8009bdc:	f7f6 fd2c 	bl	8000638 <__aeabi_dmul>
 8009be0:	ec53 2b18 	vmov	r2, r3, d8
 8009be4:	f7f6 fb72 	bl	80002cc <__adddf3>
 8009be8:	4680      	mov	r8, r0
 8009bea:	4689      	mov	r9, r1
 8009bec:	e78d      	b.n	8009b0a <_strtod_l+0xa82>
 8009bee:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8009bf2:	e7db      	b.n	8009bac <_strtod_l+0xb24>
 8009bf4:	a314      	add	r3, pc, #80	; (adr r3, 8009c48 <_strtod_l+0xbc0>)
 8009bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bfa:	f7f6 ff8f 	bl	8000b1c <__aeabi_dcmplt>
 8009bfe:	e7b3      	b.n	8009b68 <_strtod_l+0xae0>
 8009c00:	2300      	movs	r3, #0
 8009c02:	930a      	str	r3, [sp, #40]	; 0x28
 8009c04:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009c06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c08:	6013      	str	r3, [r2, #0]
 8009c0a:	f7ff ba7c 	b.w	8009106 <_strtod_l+0x7e>
 8009c0e:	2a65      	cmp	r2, #101	; 0x65
 8009c10:	f43f ab75 	beq.w	80092fe <_strtod_l+0x276>
 8009c14:	2a45      	cmp	r2, #69	; 0x45
 8009c16:	f43f ab72 	beq.w	80092fe <_strtod_l+0x276>
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	f7ff bbaa 	b.w	8009374 <_strtod_l+0x2ec>
 8009c20:	00000000 	.word	0x00000000
 8009c24:	bff00000 	.word	0xbff00000
 8009c28:	00000000 	.word	0x00000000
 8009c2c:	3ff00000 	.word	0x3ff00000
 8009c30:	94a03595 	.word	0x94a03595
 8009c34:	3fdfffff 	.word	0x3fdfffff
 8009c38:	35afe535 	.word	0x35afe535
 8009c3c:	3fe00000 	.word	0x3fe00000
 8009c40:	ffc00000 	.word	0xffc00000
 8009c44:	41dfffff 	.word	0x41dfffff
 8009c48:	94a03595 	.word	0x94a03595
 8009c4c:	3fcfffff 	.word	0x3fcfffff
 8009c50:	3ff00000 	.word	0x3ff00000
 8009c54:	3fe00000 	.word	0x3fe00000
 8009c58:	7ff00000 	.word	0x7ff00000
 8009c5c:	7fe00000 	.word	0x7fe00000
 8009c60:	7c9fffff 	.word	0x7c9fffff
 8009c64:	7fefffff 	.word	0x7fefffff

08009c68 <_strtod_r>:
 8009c68:	4b01      	ldr	r3, [pc, #4]	; (8009c70 <_strtod_r+0x8>)
 8009c6a:	f7ff ba0d 	b.w	8009088 <_strtod_l>
 8009c6e:	bf00      	nop
 8009c70:	2000006c 	.word	0x2000006c

08009c74 <strtod>:
 8009c74:	460a      	mov	r2, r1
 8009c76:	4601      	mov	r1, r0
 8009c78:	4802      	ldr	r0, [pc, #8]	; (8009c84 <strtod+0x10>)
 8009c7a:	4b03      	ldr	r3, [pc, #12]	; (8009c88 <strtod+0x14>)
 8009c7c:	6800      	ldr	r0, [r0, #0]
 8009c7e:	f7ff ba03 	b.w	8009088 <_strtod_l>
 8009c82:	bf00      	nop
 8009c84:	20000224 	.word	0x20000224
 8009c88:	2000006c 	.word	0x2000006c

08009c8c <_strtol_l.constprop.0>:
 8009c8c:	2b01      	cmp	r3, #1
 8009c8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c92:	d001      	beq.n	8009c98 <_strtol_l.constprop.0+0xc>
 8009c94:	2b24      	cmp	r3, #36	; 0x24
 8009c96:	d906      	bls.n	8009ca6 <_strtol_l.constprop.0+0x1a>
 8009c98:	f000 f8c6 	bl	8009e28 <__errno>
 8009c9c:	2316      	movs	r3, #22
 8009c9e:	6003      	str	r3, [r0, #0]
 8009ca0:	2000      	movs	r0, #0
 8009ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ca6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009d8c <_strtol_l.constprop.0+0x100>
 8009caa:	460d      	mov	r5, r1
 8009cac:	462e      	mov	r6, r5
 8009cae:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009cb2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8009cb6:	f017 0708 	ands.w	r7, r7, #8
 8009cba:	d1f7      	bne.n	8009cac <_strtol_l.constprop.0+0x20>
 8009cbc:	2c2d      	cmp	r4, #45	; 0x2d
 8009cbe:	d132      	bne.n	8009d26 <_strtol_l.constprop.0+0x9a>
 8009cc0:	782c      	ldrb	r4, [r5, #0]
 8009cc2:	2701      	movs	r7, #1
 8009cc4:	1cb5      	adds	r5, r6, #2
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d05b      	beq.n	8009d82 <_strtol_l.constprop.0+0xf6>
 8009cca:	2b10      	cmp	r3, #16
 8009ccc:	d109      	bne.n	8009ce2 <_strtol_l.constprop.0+0x56>
 8009cce:	2c30      	cmp	r4, #48	; 0x30
 8009cd0:	d107      	bne.n	8009ce2 <_strtol_l.constprop.0+0x56>
 8009cd2:	782c      	ldrb	r4, [r5, #0]
 8009cd4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009cd8:	2c58      	cmp	r4, #88	; 0x58
 8009cda:	d14d      	bne.n	8009d78 <_strtol_l.constprop.0+0xec>
 8009cdc:	786c      	ldrb	r4, [r5, #1]
 8009cde:	2310      	movs	r3, #16
 8009ce0:	3502      	adds	r5, #2
 8009ce2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009ce6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8009cea:	f04f 0e00 	mov.w	lr, #0
 8009cee:	fbb8 f9f3 	udiv	r9, r8, r3
 8009cf2:	4676      	mov	r6, lr
 8009cf4:	fb03 8a19 	mls	sl, r3, r9, r8
 8009cf8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009cfc:	f1bc 0f09 	cmp.w	ip, #9
 8009d00:	d816      	bhi.n	8009d30 <_strtol_l.constprop.0+0xa4>
 8009d02:	4664      	mov	r4, ip
 8009d04:	42a3      	cmp	r3, r4
 8009d06:	dd24      	ble.n	8009d52 <_strtol_l.constprop.0+0xc6>
 8009d08:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8009d0c:	d008      	beq.n	8009d20 <_strtol_l.constprop.0+0x94>
 8009d0e:	45b1      	cmp	r9, r6
 8009d10:	d31c      	bcc.n	8009d4c <_strtol_l.constprop.0+0xc0>
 8009d12:	d101      	bne.n	8009d18 <_strtol_l.constprop.0+0x8c>
 8009d14:	45a2      	cmp	sl, r4
 8009d16:	db19      	blt.n	8009d4c <_strtol_l.constprop.0+0xc0>
 8009d18:	fb06 4603 	mla	r6, r6, r3, r4
 8009d1c:	f04f 0e01 	mov.w	lr, #1
 8009d20:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009d24:	e7e8      	b.n	8009cf8 <_strtol_l.constprop.0+0x6c>
 8009d26:	2c2b      	cmp	r4, #43	; 0x2b
 8009d28:	bf04      	itt	eq
 8009d2a:	782c      	ldrbeq	r4, [r5, #0]
 8009d2c:	1cb5      	addeq	r5, r6, #2
 8009d2e:	e7ca      	b.n	8009cc6 <_strtol_l.constprop.0+0x3a>
 8009d30:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009d34:	f1bc 0f19 	cmp.w	ip, #25
 8009d38:	d801      	bhi.n	8009d3e <_strtol_l.constprop.0+0xb2>
 8009d3a:	3c37      	subs	r4, #55	; 0x37
 8009d3c:	e7e2      	b.n	8009d04 <_strtol_l.constprop.0+0x78>
 8009d3e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009d42:	f1bc 0f19 	cmp.w	ip, #25
 8009d46:	d804      	bhi.n	8009d52 <_strtol_l.constprop.0+0xc6>
 8009d48:	3c57      	subs	r4, #87	; 0x57
 8009d4a:	e7db      	b.n	8009d04 <_strtol_l.constprop.0+0x78>
 8009d4c:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8009d50:	e7e6      	b.n	8009d20 <_strtol_l.constprop.0+0x94>
 8009d52:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8009d56:	d105      	bne.n	8009d64 <_strtol_l.constprop.0+0xd8>
 8009d58:	2322      	movs	r3, #34	; 0x22
 8009d5a:	6003      	str	r3, [r0, #0]
 8009d5c:	4646      	mov	r6, r8
 8009d5e:	b942      	cbnz	r2, 8009d72 <_strtol_l.constprop.0+0xe6>
 8009d60:	4630      	mov	r0, r6
 8009d62:	e79e      	b.n	8009ca2 <_strtol_l.constprop.0+0x16>
 8009d64:	b107      	cbz	r7, 8009d68 <_strtol_l.constprop.0+0xdc>
 8009d66:	4276      	negs	r6, r6
 8009d68:	2a00      	cmp	r2, #0
 8009d6a:	d0f9      	beq.n	8009d60 <_strtol_l.constprop.0+0xd4>
 8009d6c:	f1be 0f00 	cmp.w	lr, #0
 8009d70:	d000      	beq.n	8009d74 <_strtol_l.constprop.0+0xe8>
 8009d72:	1e69      	subs	r1, r5, #1
 8009d74:	6011      	str	r1, [r2, #0]
 8009d76:	e7f3      	b.n	8009d60 <_strtol_l.constprop.0+0xd4>
 8009d78:	2430      	movs	r4, #48	; 0x30
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d1b1      	bne.n	8009ce2 <_strtol_l.constprop.0+0x56>
 8009d7e:	2308      	movs	r3, #8
 8009d80:	e7af      	b.n	8009ce2 <_strtol_l.constprop.0+0x56>
 8009d82:	2c30      	cmp	r4, #48	; 0x30
 8009d84:	d0a5      	beq.n	8009cd2 <_strtol_l.constprop.0+0x46>
 8009d86:	230a      	movs	r3, #10
 8009d88:	e7ab      	b.n	8009ce2 <_strtol_l.constprop.0+0x56>
 8009d8a:	bf00      	nop
 8009d8c:	0800cb11 	.word	0x0800cb11

08009d90 <_strtol_r>:
 8009d90:	f7ff bf7c 	b.w	8009c8c <_strtol_l.constprop.0>

08009d94 <_fwalk_sglue>:
 8009d94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d98:	4607      	mov	r7, r0
 8009d9a:	4688      	mov	r8, r1
 8009d9c:	4614      	mov	r4, r2
 8009d9e:	2600      	movs	r6, #0
 8009da0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009da4:	f1b9 0901 	subs.w	r9, r9, #1
 8009da8:	d505      	bpl.n	8009db6 <_fwalk_sglue+0x22>
 8009daa:	6824      	ldr	r4, [r4, #0]
 8009dac:	2c00      	cmp	r4, #0
 8009dae:	d1f7      	bne.n	8009da0 <_fwalk_sglue+0xc>
 8009db0:	4630      	mov	r0, r6
 8009db2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009db6:	89ab      	ldrh	r3, [r5, #12]
 8009db8:	2b01      	cmp	r3, #1
 8009dba:	d907      	bls.n	8009dcc <_fwalk_sglue+0x38>
 8009dbc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009dc0:	3301      	adds	r3, #1
 8009dc2:	d003      	beq.n	8009dcc <_fwalk_sglue+0x38>
 8009dc4:	4629      	mov	r1, r5
 8009dc6:	4638      	mov	r0, r7
 8009dc8:	47c0      	blx	r8
 8009dca:	4306      	orrs	r6, r0
 8009dcc:	3568      	adds	r5, #104	; 0x68
 8009dce:	e7e9      	b.n	8009da4 <_fwalk_sglue+0x10>

08009dd0 <strchr>:
 8009dd0:	b2c9      	uxtb	r1, r1
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009dd8:	b11a      	cbz	r2, 8009de2 <strchr+0x12>
 8009dda:	428a      	cmp	r2, r1
 8009ddc:	d1f9      	bne.n	8009dd2 <strchr+0x2>
 8009dde:	4618      	mov	r0, r3
 8009de0:	4770      	bx	lr
 8009de2:	2900      	cmp	r1, #0
 8009de4:	bf18      	it	ne
 8009de6:	2300      	movne	r3, #0
 8009de8:	e7f9      	b.n	8009dde <strchr+0xe>

08009dea <strncmp>:
 8009dea:	b510      	push	{r4, lr}
 8009dec:	b16a      	cbz	r2, 8009e0a <strncmp+0x20>
 8009dee:	3901      	subs	r1, #1
 8009df0:	1884      	adds	r4, r0, r2
 8009df2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009df6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009dfa:	429a      	cmp	r2, r3
 8009dfc:	d103      	bne.n	8009e06 <strncmp+0x1c>
 8009dfe:	42a0      	cmp	r0, r4
 8009e00:	d001      	beq.n	8009e06 <strncmp+0x1c>
 8009e02:	2a00      	cmp	r2, #0
 8009e04:	d1f5      	bne.n	8009df2 <strncmp+0x8>
 8009e06:	1ad0      	subs	r0, r2, r3
 8009e08:	bd10      	pop	{r4, pc}
 8009e0a:	4610      	mov	r0, r2
 8009e0c:	e7fc      	b.n	8009e08 <strncmp+0x1e>

08009e0e <memset>:
 8009e0e:	4402      	add	r2, r0
 8009e10:	4603      	mov	r3, r0
 8009e12:	4293      	cmp	r3, r2
 8009e14:	d100      	bne.n	8009e18 <memset+0xa>
 8009e16:	4770      	bx	lr
 8009e18:	f803 1b01 	strb.w	r1, [r3], #1
 8009e1c:	e7f9      	b.n	8009e12 <memset+0x4>
	...

08009e20 <_localeconv_r>:
 8009e20:	4800      	ldr	r0, [pc, #0]	; (8009e24 <_localeconv_r+0x4>)
 8009e22:	4770      	bx	lr
 8009e24:	2000015c 	.word	0x2000015c

08009e28 <__errno>:
 8009e28:	4b01      	ldr	r3, [pc, #4]	; (8009e30 <__errno+0x8>)
 8009e2a:	6818      	ldr	r0, [r3, #0]
 8009e2c:	4770      	bx	lr
 8009e2e:	bf00      	nop
 8009e30:	20000224 	.word	0x20000224

08009e34 <__libc_init_array>:
 8009e34:	b570      	push	{r4, r5, r6, lr}
 8009e36:	4d0d      	ldr	r5, [pc, #52]	; (8009e6c <__libc_init_array+0x38>)
 8009e38:	4c0d      	ldr	r4, [pc, #52]	; (8009e70 <__libc_init_array+0x3c>)
 8009e3a:	1b64      	subs	r4, r4, r5
 8009e3c:	10a4      	asrs	r4, r4, #2
 8009e3e:	2600      	movs	r6, #0
 8009e40:	42a6      	cmp	r6, r4
 8009e42:	d109      	bne.n	8009e58 <__libc_init_array+0x24>
 8009e44:	4d0b      	ldr	r5, [pc, #44]	; (8009e74 <__libc_init_array+0x40>)
 8009e46:	4c0c      	ldr	r4, [pc, #48]	; (8009e78 <__libc_init_array+0x44>)
 8009e48:	f002 fdb6 	bl	800c9b8 <_init>
 8009e4c:	1b64      	subs	r4, r4, r5
 8009e4e:	10a4      	asrs	r4, r4, #2
 8009e50:	2600      	movs	r6, #0
 8009e52:	42a6      	cmp	r6, r4
 8009e54:	d105      	bne.n	8009e62 <__libc_init_array+0x2e>
 8009e56:	bd70      	pop	{r4, r5, r6, pc}
 8009e58:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e5c:	4798      	blx	r3
 8009e5e:	3601      	adds	r6, #1
 8009e60:	e7ee      	b.n	8009e40 <__libc_init_array+0xc>
 8009e62:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e66:	4798      	blx	r3
 8009e68:	3601      	adds	r6, #1
 8009e6a:	e7f2      	b.n	8009e52 <__libc_init_array+0x1e>
 8009e6c:	0800cea8 	.word	0x0800cea8
 8009e70:	0800cea8 	.word	0x0800cea8
 8009e74:	0800cea8 	.word	0x0800cea8
 8009e78:	0800ceac 	.word	0x0800ceac

08009e7c <__retarget_lock_init_recursive>:
 8009e7c:	4770      	bx	lr

08009e7e <__retarget_lock_acquire_recursive>:
 8009e7e:	4770      	bx	lr

08009e80 <__retarget_lock_release_recursive>:
 8009e80:	4770      	bx	lr

08009e82 <memcpy>:
 8009e82:	440a      	add	r2, r1
 8009e84:	4291      	cmp	r1, r2
 8009e86:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009e8a:	d100      	bne.n	8009e8e <memcpy+0xc>
 8009e8c:	4770      	bx	lr
 8009e8e:	b510      	push	{r4, lr}
 8009e90:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e98:	4291      	cmp	r1, r2
 8009e9a:	d1f9      	bne.n	8009e90 <memcpy+0xe>
 8009e9c:	bd10      	pop	{r4, pc}
	...

08009ea0 <nan>:
 8009ea0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009ea8 <nan+0x8>
 8009ea4:	4770      	bx	lr
 8009ea6:	bf00      	nop
 8009ea8:	00000000 	.word	0x00000000
 8009eac:	7ff80000 	.word	0x7ff80000

08009eb0 <nanf>:
 8009eb0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009eb8 <nanf+0x8>
 8009eb4:	4770      	bx	lr
 8009eb6:	bf00      	nop
 8009eb8:	7fc00000 	.word	0x7fc00000

08009ebc <quorem>:
 8009ebc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ec0:	6903      	ldr	r3, [r0, #16]
 8009ec2:	690c      	ldr	r4, [r1, #16]
 8009ec4:	42a3      	cmp	r3, r4
 8009ec6:	4607      	mov	r7, r0
 8009ec8:	db7e      	blt.n	8009fc8 <quorem+0x10c>
 8009eca:	3c01      	subs	r4, #1
 8009ecc:	f101 0814 	add.w	r8, r1, #20
 8009ed0:	f100 0514 	add.w	r5, r0, #20
 8009ed4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009ed8:	9301      	str	r3, [sp, #4]
 8009eda:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009ede:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009eea:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009eee:	fbb2 f6f3 	udiv	r6, r2, r3
 8009ef2:	d331      	bcc.n	8009f58 <quorem+0x9c>
 8009ef4:	f04f 0e00 	mov.w	lr, #0
 8009ef8:	4640      	mov	r0, r8
 8009efa:	46ac      	mov	ip, r5
 8009efc:	46f2      	mov	sl, lr
 8009efe:	f850 2b04 	ldr.w	r2, [r0], #4
 8009f02:	b293      	uxth	r3, r2
 8009f04:	fb06 e303 	mla	r3, r6, r3, lr
 8009f08:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009f0c:	0c1a      	lsrs	r2, r3, #16
 8009f0e:	b29b      	uxth	r3, r3
 8009f10:	ebaa 0303 	sub.w	r3, sl, r3
 8009f14:	f8dc a000 	ldr.w	sl, [ip]
 8009f18:	fa13 f38a 	uxtah	r3, r3, sl
 8009f1c:	fb06 220e 	mla	r2, r6, lr, r2
 8009f20:	9300      	str	r3, [sp, #0]
 8009f22:	9b00      	ldr	r3, [sp, #0]
 8009f24:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009f28:	b292      	uxth	r2, r2
 8009f2a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009f2e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009f32:	f8bd 3000 	ldrh.w	r3, [sp]
 8009f36:	4581      	cmp	r9, r0
 8009f38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f3c:	f84c 3b04 	str.w	r3, [ip], #4
 8009f40:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009f44:	d2db      	bcs.n	8009efe <quorem+0x42>
 8009f46:	f855 300b 	ldr.w	r3, [r5, fp]
 8009f4a:	b92b      	cbnz	r3, 8009f58 <quorem+0x9c>
 8009f4c:	9b01      	ldr	r3, [sp, #4]
 8009f4e:	3b04      	subs	r3, #4
 8009f50:	429d      	cmp	r5, r3
 8009f52:	461a      	mov	r2, r3
 8009f54:	d32c      	bcc.n	8009fb0 <quorem+0xf4>
 8009f56:	613c      	str	r4, [r7, #16]
 8009f58:	4638      	mov	r0, r7
 8009f5a:	f001 ff15 	bl	800bd88 <__mcmp>
 8009f5e:	2800      	cmp	r0, #0
 8009f60:	db22      	blt.n	8009fa8 <quorem+0xec>
 8009f62:	3601      	adds	r6, #1
 8009f64:	4629      	mov	r1, r5
 8009f66:	2000      	movs	r0, #0
 8009f68:	f858 2b04 	ldr.w	r2, [r8], #4
 8009f6c:	f8d1 c000 	ldr.w	ip, [r1]
 8009f70:	b293      	uxth	r3, r2
 8009f72:	1ac3      	subs	r3, r0, r3
 8009f74:	0c12      	lsrs	r2, r2, #16
 8009f76:	fa13 f38c 	uxtah	r3, r3, ip
 8009f7a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009f7e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009f82:	b29b      	uxth	r3, r3
 8009f84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f88:	45c1      	cmp	r9, r8
 8009f8a:	f841 3b04 	str.w	r3, [r1], #4
 8009f8e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009f92:	d2e9      	bcs.n	8009f68 <quorem+0xac>
 8009f94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f98:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f9c:	b922      	cbnz	r2, 8009fa8 <quorem+0xec>
 8009f9e:	3b04      	subs	r3, #4
 8009fa0:	429d      	cmp	r5, r3
 8009fa2:	461a      	mov	r2, r3
 8009fa4:	d30a      	bcc.n	8009fbc <quorem+0x100>
 8009fa6:	613c      	str	r4, [r7, #16]
 8009fa8:	4630      	mov	r0, r6
 8009faa:	b003      	add	sp, #12
 8009fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fb0:	6812      	ldr	r2, [r2, #0]
 8009fb2:	3b04      	subs	r3, #4
 8009fb4:	2a00      	cmp	r2, #0
 8009fb6:	d1ce      	bne.n	8009f56 <quorem+0x9a>
 8009fb8:	3c01      	subs	r4, #1
 8009fba:	e7c9      	b.n	8009f50 <quorem+0x94>
 8009fbc:	6812      	ldr	r2, [r2, #0]
 8009fbe:	3b04      	subs	r3, #4
 8009fc0:	2a00      	cmp	r2, #0
 8009fc2:	d1f0      	bne.n	8009fa6 <quorem+0xea>
 8009fc4:	3c01      	subs	r4, #1
 8009fc6:	e7eb      	b.n	8009fa0 <quorem+0xe4>
 8009fc8:	2000      	movs	r0, #0
 8009fca:	e7ee      	b.n	8009faa <quorem+0xee>
 8009fcc:	0000      	movs	r0, r0
	...

08009fd0 <_dtoa_r>:
 8009fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fd4:	ed2d 8b04 	vpush	{d8-d9}
 8009fd8:	69c5      	ldr	r5, [r0, #28]
 8009fda:	b093      	sub	sp, #76	; 0x4c
 8009fdc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009fe0:	ec57 6b10 	vmov	r6, r7, d0
 8009fe4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009fe8:	9107      	str	r1, [sp, #28]
 8009fea:	4604      	mov	r4, r0
 8009fec:	920a      	str	r2, [sp, #40]	; 0x28
 8009fee:	930d      	str	r3, [sp, #52]	; 0x34
 8009ff0:	b975      	cbnz	r5, 800a010 <_dtoa_r+0x40>
 8009ff2:	2010      	movs	r0, #16
 8009ff4:	f001 fa8e 	bl	800b514 <malloc>
 8009ff8:	4602      	mov	r2, r0
 8009ffa:	61e0      	str	r0, [r4, #28]
 8009ffc:	b920      	cbnz	r0, 800a008 <_dtoa_r+0x38>
 8009ffe:	4bae      	ldr	r3, [pc, #696]	; (800a2b8 <_dtoa_r+0x2e8>)
 800a000:	21ef      	movs	r1, #239	; 0xef
 800a002:	48ae      	ldr	r0, [pc, #696]	; (800a2bc <_dtoa_r+0x2ec>)
 800a004:	f002 f996 	bl	800c334 <__assert_func>
 800a008:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a00c:	6005      	str	r5, [r0, #0]
 800a00e:	60c5      	str	r5, [r0, #12]
 800a010:	69e3      	ldr	r3, [r4, #28]
 800a012:	6819      	ldr	r1, [r3, #0]
 800a014:	b151      	cbz	r1, 800a02c <_dtoa_r+0x5c>
 800a016:	685a      	ldr	r2, [r3, #4]
 800a018:	604a      	str	r2, [r1, #4]
 800a01a:	2301      	movs	r3, #1
 800a01c:	4093      	lsls	r3, r2
 800a01e:	608b      	str	r3, [r1, #8]
 800a020:	4620      	mov	r0, r4
 800a022:	f001 fc2b 	bl	800b87c <_Bfree>
 800a026:	69e3      	ldr	r3, [r4, #28]
 800a028:	2200      	movs	r2, #0
 800a02a:	601a      	str	r2, [r3, #0]
 800a02c:	1e3b      	subs	r3, r7, #0
 800a02e:	bfbb      	ittet	lt
 800a030:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a034:	9303      	strlt	r3, [sp, #12]
 800a036:	2300      	movge	r3, #0
 800a038:	2201      	movlt	r2, #1
 800a03a:	bfac      	ite	ge
 800a03c:	f8c8 3000 	strge.w	r3, [r8]
 800a040:	f8c8 2000 	strlt.w	r2, [r8]
 800a044:	4b9e      	ldr	r3, [pc, #632]	; (800a2c0 <_dtoa_r+0x2f0>)
 800a046:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a04a:	ea33 0308 	bics.w	r3, r3, r8
 800a04e:	d11b      	bne.n	800a088 <_dtoa_r+0xb8>
 800a050:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a052:	f242 730f 	movw	r3, #9999	; 0x270f
 800a056:	6013      	str	r3, [r2, #0]
 800a058:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a05c:	4333      	orrs	r3, r6
 800a05e:	f000 8593 	beq.w	800ab88 <_dtoa_r+0xbb8>
 800a062:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a064:	b963      	cbnz	r3, 800a080 <_dtoa_r+0xb0>
 800a066:	4b97      	ldr	r3, [pc, #604]	; (800a2c4 <_dtoa_r+0x2f4>)
 800a068:	e027      	b.n	800a0ba <_dtoa_r+0xea>
 800a06a:	4b97      	ldr	r3, [pc, #604]	; (800a2c8 <_dtoa_r+0x2f8>)
 800a06c:	9300      	str	r3, [sp, #0]
 800a06e:	3308      	adds	r3, #8
 800a070:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a072:	6013      	str	r3, [r2, #0]
 800a074:	9800      	ldr	r0, [sp, #0]
 800a076:	b013      	add	sp, #76	; 0x4c
 800a078:	ecbd 8b04 	vpop	{d8-d9}
 800a07c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a080:	4b90      	ldr	r3, [pc, #576]	; (800a2c4 <_dtoa_r+0x2f4>)
 800a082:	9300      	str	r3, [sp, #0]
 800a084:	3303      	adds	r3, #3
 800a086:	e7f3      	b.n	800a070 <_dtoa_r+0xa0>
 800a088:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a08c:	2200      	movs	r2, #0
 800a08e:	ec51 0b17 	vmov	r0, r1, d7
 800a092:	eeb0 8a47 	vmov.f32	s16, s14
 800a096:	eef0 8a67 	vmov.f32	s17, s15
 800a09a:	2300      	movs	r3, #0
 800a09c:	f7f6 fd34 	bl	8000b08 <__aeabi_dcmpeq>
 800a0a0:	4681      	mov	r9, r0
 800a0a2:	b160      	cbz	r0, 800a0be <_dtoa_r+0xee>
 800a0a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	6013      	str	r3, [r2, #0]
 800a0aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	f000 8568 	beq.w	800ab82 <_dtoa_r+0xbb2>
 800a0b2:	4b86      	ldr	r3, [pc, #536]	; (800a2cc <_dtoa_r+0x2fc>)
 800a0b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a0b6:	6013      	str	r3, [r2, #0]
 800a0b8:	3b01      	subs	r3, #1
 800a0ba:	9300      	str	r3, [sp, #0]
 800a0bc:	e7da      	b.n	800a074 <_dtoa_r+0xa4>
 800a0be:	aa10      	add	r2, sp, #64	; 0x40
 800a0c0:	a911      	add	r1, sp, #68	; 0x44
 800a0c2:	4620      	mov	r0, r4
 800a0c4:	eeb0 0a48 	vmov.f32	s0, s16
 800a0c8:	eef0 0a68 	vmov.f32	s1, s17
 800a0cc:	f001 ff72 	bl	800bfb4 <__d2b>
 800a0d0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a0d4:	4682      	mov	sl, r0
 800a0d6:	2d00      	cmp	r5, #0
 800a0d8:	d07f      	beq.n	800a1da <_dtoa_r+0x20a>
 800a0da:	ee18 3a90 	vmov	r3, s17
 800a0de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a0e2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a0e6:	ec51 0b18 	vmov	r0, r1, d8
 800a0ea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a0ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a0f2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a0f6:	4619      	mov	r1, r3
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	4b75      	ldr	r3, [pc, #468]	; (800a2d0 <_dtoa_r+0x300>)
 800a0fc:	f7f6 f8e4 	bl	80002c8 <__aeabi_dsub>
 800a100:	a367      	add	r3, pc, #412	; (adr r3, 800a2a0 <_dtoa_r+0x2d0>)
 800a102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a106:	f7f6 fa97 	bl	8000638 <__aeabi_dmul>
 800a10a:	a367      	add	r3, pc, #412	; (adr r3, 800a2a8 <_dtoa_r+0x2d8>)
 800a10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a110:	f7f6 f8dc 	bl	80002cc <__adddf3>
 800a114:	4606      	mov	r6, r0
 800a116:	4628      	mov	r0, r5
 800a118:	460f      	mov	r7, r1
 800a11a:	f7f6 fa23 	bl	8000564 <__aeabi_i2d>
 800a11e:	a364      	add	r3, pc, #400	; (adr r3, 800a2b0 <_dtoa_r+0x2e0>)
 800a120:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a124:	f7f6 fa88 	bl	8000638 <__aeabi_dmul>
 800a128:	4602      	mov	r2, r0
 800a12a:	460b      	mov	r3, r1
 800a12c:	4630      	mov	r0, r6
 800a12e:	4639      	mov	r1, r7
 800a130:	f7f6 f8cc 	bl	80002cc <__adddf3>
 800a134:	4606      	mov	r6, r0
 800a136:	460f      	mov	r7, r1
 800a138:	f7f6 fd2e 	bl	8000b98 <__aeabi_d2iz>
 800a13c:	2200      	movs	r2, #0
 800a13e:	4683      	mov	fp, r0
 800a140:	2300      	movs	r3, #0
 800a142:	4630      	mov	r0, r6
 800a144:	4639      	mov	r1, r7
 800a146:	f7f6 fce9 	bl	8000b1c <__aeabi_dcmplt>
 800a14a:	b148      	cbz	r0, 800a160 <_dtoa_r+0x190>
 800a14c:	4658      	mov	r0, fp
 800a14e:	f7f6 fa09 	bl	8000564 <__aeabi_i2d>
 800a152:	4632      	mov	r2, r6
 800a154:	463b      	mov	r3, r7
 800a156:	f7f6 fcd7 	bl	8000b08 <__aeabi_dcmpeq>
 800a15a:	b908      	cbnz	r0, 800a160 <_dtoa_r+0x190>
 800a15c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a160:	f1bb 0f16 	cmp.w	fp, #22
 800a164:	d857      	bhi.n	800a216 <_dtoa_r+0x246>
 800a166:	4b5b      	ldr	r3, [pc, #364]	; (800a2d4 <_dtoa_r+0x304>)
 800a168:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a16c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a170:	ec51 0b18 	vmov	r0, r1, d8
 800a174:	f7f6 fcd2 	bl	8000b1c <__aeabi_dcmplt>
 800a178:	2800      	cmp	r0, #0
 800a17a:	d04e      	beq.n	800a21a <_dtoa_r+0x24a>
 800a17c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a180:	2300      	movs	r3, #0
 800a182:	930c      	str	r3, [sp, #48]	; 0x30
 800a184:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a186:	1b5b      	subs	r3, r3, r5
 800a188:	1e5a      	subs	r2, r3, #1
 800a18a:	bf45      	ittet	mi
 800a18c:	f1c3 0301 	rsbmi	r3, r3, #1
 800a190:	9305      	strmi	r3, [sp, #20]
 800a192:	2300      	movpl	r3, #0
 800a194:	2300      	movmi	r3, #0
 800a196:	9206      	str	r2, [sp, #24]
 800a198:	bf54      	ite	pl
 800a19a:	9305      	strpl	r3, [sp, #20]
 800a19c:	9306      	strmi	r3, [sp, #24]
 800a19e:	f1bb 0f00 	cmp.w	fp, #0
 800a1a2:	db3c      	blt.n	800a21e <_dtoa_r+0x24e>
 800a1a4:	9b06      	ldr	r3, [sp, #24]
 800a1a6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a1aa:	445b      	add	r3, fp
 800a1ac:	9306      	str	r3, [sp, #24]
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	9308      	str	r3, [sp, #32]
 800a1b2:	9b07      	ldr	r3, [sp, #28]
 800a1b4:	2b09      	cmp	r3, #9
 800a1b6:	d868      	bhi.n	800a28a <_dtoa_r+0x2ba>
 800a1b8:	2b05      	cmp	r3, #5
 800a1ba:	bfc4      	itt	gt
 800a1bc:	3b04      	subgt	r3, #4
 800a1be:	9307      	strgt	r3, [sp, #28]
 800a1c0:	9b07      	ldr	r3, [sp, #28]
 800a1c2:	f1a3 0302 	sub.w	r3, r3, #2
 800a1c6:	bfcc      	ite	gt
 800a1c8:	2500      	movgt	r5, #0
 800a1ca:	2501      	movle	r5, #1
 800a1cc:	2b03      	cmp	r3, #3
 800a1ce:	f200 8085 	bhi.w	800a2dc <_dtoa_r+0x30c>
 800a1d2:	e8df f003 	tbb	[pc, r3]
 800a1d6:	3b2e      	.short	0x3b2e
 800a1d8:	5839      	.short	0x5839
 800a1da:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a1de:	441d      	add	r5, r3
 800a1e0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a1e4:	2b20      	cmp	r3, #32
 800a1e6:	bfc1      	itttt	gt
 800a1e8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a1ec:	fa08 f803 	lslgt.w	r8, r8, r3
 800a1f0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a1f4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a1f8:	bfd6      	itet	le
 800a1fa:	f1c3 0320 	rsble	r3, r3, #32
 800a1fe:	ea48 0003 	orrgt.w	r0, r8, r3
 800a202:	fa06 f003 	lslle.w	r0, r6, r3
 800a206:	f7f6 f99d 	bl	8000544 <__aeabi_ui2d>
 800a20a:	2201      	movs	r2, #1
 800a20c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a210:	3d01      	subs	r5, #1
 800a212:	920e      	str	r2, [sp, #56]	; 0x38
 800a214:	e76f      	b.n	800a0f6 <_dtoa_r+0x126>
 800a216:	2301      	movs	r3, #1
 800a218:	e7b3      	b.n	800a182 <_dtoa_r+0x1b2>
 800a21a:	900c      	str	r0, [sp, #48]	; 0x30
 800a21c:	e7b2      	b.n	800a184 <_dtoa_r+0x1b4>
 800a21e:	9b05      	ldr	r3, [sp, #20]
 800a220:	eba3 030b 	sub.w	r3, r3, fp
 800a224:	9305      	str	r3, [sp, #20]
 800a226:	f1cb 0300 	rsb	r3, fp, #0
 800a22a:	9308      	str	r3, [sp, #32]
 800a22c:	2300      	movs	r3, #0
 800a22e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a230:	e7bf      	b.n	800a1b2 <_dtoa_r+0x1e2>
 800a232:	2300      	movs	r3, #0
 800a234:	9309      	str	r3, [sp, #36]	; 0x24
 800a236:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a238:	2b00      	cmp	r3, #0
 800a23a:	dc52      	bgt.n	800a2e2 <_dtoa_r+0x312>
 800a23c:	2301      	movs	r3, #1
 800a23e:	9301      	str	r3, [sp, #4]
 800a240:	9304      	str	r3, [sp, #16]
 800a242:	461a      	mov	r2, r3
 800a244:	920a      	str	r2, [sp, #40]	; 0x28
 800a246:	e00b      	b.n	800a260 <_dtoa_r+0x290>
 800a248:	2301      	movs	r3, #1
 800a24a:	e7f3      	b.n	800a234 <_dtoa_r+0x264>
 800a24c:	2300      	movs	r3, #0
 800a24e:	9309      	str	r3, [sp, #36]	; 0x24
 800a250:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a252:	445b      	add	r3, fp
 800a254:	9301      	str	r3, [sp, #4]
 800a256:	3301      	adds	r3, #1
 800a258:	2b01      	cmp	r3, #1
 800a25a:	9304      	str	r3, [sp, #16]
 800a25c:	bfb8      	it	lt
 800a25e:	2301      	movlt	r3, #1
 800a260:	69e0      	ldr	r0, [r4, #28]
 800a262:	2100      	movs	r1, #0
 800a264:	2204      	movs	r2, #4
 800a266:	f102 0614 	add.w	r6, r2, #20
 800a26a:	429e      	cmp	r6, r3
 800a26c:	d93d      	bls.n	800a2ea <_dtoa_r+0x31a>
 800a26e:	6041      	str	r1, [r0, #4]
 800a270:	4620      	mov	r0, r4
 800a272:	f001 fac3 	bl	800b7fc <_Balloc>
 800a276:	9000      	str	r0, [sp, #0]
 800a278:	2800      	cmp	r0, #0
 800a27a:	d139      	bne.n	800a2f0 <_dtoa_r+0x320>
 800a27c:	4b16      	ldr	r3, [pc, #88]	; (800a2d8 <_dtoa_r+0x308>)
 800a27e:	4602      	mov	r2, r0
 800a280:	f240 11af 	movw	r1, #431	; 0x1af
 800a284:	e6bd      	b.n	800a002 <_dtoa_r+0x32>
 800a286:	2301      	movs	r3, #1
 800a288:	e7e1      	b.n	800a24e <_dtoa_r+0x27e>
 800a28a:	2501      	movs	r5, #1
 800a28c:	2300      	movs	r3, #0
 800a28e:	9307      	str	r3, [sp, #28]
 800a290:	9509      	str	r5, [sp, #36]	; 0x24
 800a292:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a296:	9301      	str	r3, [sp, #4]
 800a298:	9304      	str	r3, [sp, #16]
 800a29a:	2200      	movs	r2, #0
 800a29c:	2312      	movs	r3, #18
 800a29e:	e7d1      	b.n	800a244 <_dtoa_r+0x274>
 800a2a0:	636f4361 	.word	0x636f4361
 800a2a4:	3fd287a7 	.word	0x3fd287a7
 800a2a8:	8b60c8b3 	.word	0x8b60c8b3
 800a2ac:	3fc68a28 	.word	0x3fc68a28
 800a2b0:	509f79fb 	.word	0x509f79fb
 800a2b4:	3fd34413 	.word	0x3fd34413
 800a2b8:	0800cc1e 	.word	0x0800cc1e
 800a2bc:	0800cc35 	.word	0x0800cc35
 800a2c0:	7ff00000 	.word	0x7ff00000
 800a2c4:	0800cc1a 	.word	0x0800cc1a
 800a2c8:	0800cc11 	.word	0x0800cc11
 800a2cc:	0800ca8d 	.word	0x0800ca8d
 800a2d0:	3ff80000 	.word	0x3ff80000
 800a2d4:	0800cd90 	.word	0x0800cd90
 800a2d8:	0800cc8d 	.word	0x0800cc8d
 800a2dc:	2301      	movs	r3, #1
 800a2de:	9309      	str	r3, [sp, #36]	; 0x24
 800a2e0:	e7d7      	b.n	800a292 <_dtoa_r+0x2c2>
 800a2e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2e4:	9301      	str	r3, [sp, #4]
 800a2e6:	9304      	str	r3, [sp, #16]
 800a2e8:	e7ba      	b.n	800a260 <_dtoa_r+0x290>
 800a2ea:	3101      	adds	r1, #1
 800a2ec:	0052      	lsls	r2, r2, #1
 800a2ee:	e7ba      	b.n	800a266 <_dtoa_r+0x296>
 800a2f0:	69e3      	ldr	r3, [r4, #28]
 800a2f2:	9a00      	ldr	r2, [sp, #0]
 800a2f4:	601a      	str	r2, [r3, #0]
 800a2f6:	9b04      	ldr	r3, [sp, #16]
 800a2f8:	2b0e      	cmp	r3, #14
 800a2fa:	f200 80a8 	bhi.w	800a44e <_dtoa_r+0x47e>
 800a2fe:	2d00      	cmp	r5, #0
 800a300:	f000 80a5 	beq.w	800a44e <_dtoa_r+0x47e>
 800a304:	f1bb 0f00 	cmp.w	fp, #0
 800a308:	dd38      	ble.n	800a37c <_dtoa_r+0x3ac>
 800a30a:	4bc0      	ldr	r3, [pc, #768]	; (800a60c <_dtoa_r+0x63c>)
 800a30c:	f00b 020f 	and.w	r2, fp, #15
 800a310:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a314:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a318:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a31c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a320:	d019      	beq.n	800a356 <_dtoa_r+0x386>
 800a322:	4bbb      	ldr	r3, [pc, #748]	; (800a610 <_dtoa_r+0x640>)
 800a324:	ec51 0b18 	vmov	r0, r1, d8
 800a328:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a32c:	f7f6 faae 	bl	800088c <__aeabi_ddiv>
 800a330:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a334:	f008 080f 	and.w	r8, r8, #15
 800a338:	2503      	movs	r5, #3
 800a33a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a610 <_dtoa_r+0x640>
 800a33e:	f1b8 0f00 	cmp.w	r8, #0
 800a342:	d10a      	bne.n	800a35a <_dtoa_r+0x38a>
 800a344:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a348:	4632      	mov	r2, r6
 800a34a:	463b      	mov	r3, r7
 800a34c:	f7f6 fa9e 	bl	800088c <__aeabi_ddiv>
 800a350:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a354:	e02b      	b.n	800a3ae <_dtoa_r+0x3de>
 800a356:	2502      	movs	r5, #2
 800a358:	e7ef      	b.n	800a33a <_dtoa_r+0x36a>
 800a35a:	f018 0f01 	tst.w	r8, #1
 800a35e:	d008      	beq.n	800a372 <_dtoa_r+0x3a2>
 800a360:	4630      	mov	r0, r6
 800a362:	4639      	mov	r1, r7
 800a364:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a368:	f7f6 f966 	bl	8000638 <__aeabi_dmul>
 800a36c:	3501      	adds	r5, #1
 800a36e:	4606      	mov	r6, r0
 800a370:	460f      	mov	r7, r1
 800a372:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a376:	f109 0908 	add.w	r9, r9, #8
 800a37a:	e7e0      	b.n	800a33e <_dtoa_r+0x36e>
 800a37c:	f000 809f 	beq.w	800a4be <_dtoa_r+0x4ee>
 800a380:	f1cb 0600 	rsb	r6, fp, #0
 800a384:	4ba1      	ldr	r3, [pc, #644]	; (800a60c <_dtoa_r+0x63c>)
 800a386:	4fa2      	ldr	r7, [pc, #648]	; (800a610 <_dtoa_r+0x640>)
 800a388:	f006 020f 	and.w	r2, r6, #15
 800a38c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a390:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a394:	ec51 0b18 	vmov	r0, r1, d8
 800a398:	f7f6 f94e 	bl	8000638 <__aeabi_dmul>
 800a39c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3a0:	1136      	asrs	r6, r6, #4
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	2502      	movs	r5, #2
 800a3a6:	2e00      	cmp	r6, #0
 800a3a8:	d17e      	bne.n	800a4a8 <_dtoa_r+0x4d8>
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d1d0      	bne.n	800a350 <_dtoa_r+0x380>
 800a3ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a3b0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	f000 8084 	beq.w	800a4c2 <_dtoa_r+0x4f2>
 800a3ba:	4b96      	ldr	r3, [pc, #600]	; (800a614 <_dtoa_r+0x644>)
 800a3bc:	2200      	movs	r2, #0
 800a3be:	4640      	mov	r0, r8
 800a3c0:	4649      	mov	r1, r9
 800a3c2:	f7f6 fbab 	bl	8000b1c <__aeabi_dcmplt>
 800a3c6:	2800      	cmp	r0, #0
 800a3c8:	d07b      	beq.n	800a4c2 <_dtoa_r+0x4f2>
 800a3ca:	9b04      	ldr	r3, [sp, #16]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d078      	beq.n	800a4c2 <_dtoa_r+0x4f2>
 800a3d0:	9b01      	ldr	r3, [sp, #4]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	dd39      	ble.n	800a44a <_dtoa_r+0x47a>
 800a3d6:	4b90      	ldr	r3, [pc, #576]	; (800a618 <_dtoa_r+0x648>)
 800a3d8:	2200      	movs	r2, #0
 800a3da:	4640      	mov	r0, r8
 800a3dc:	4649      	mov	r1, r9
 800a3de:	f7f6 f92b 	bl	8000638 <__aeabi_dmul>
 800a3e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3e6:	9e01      	ldr	r6, [sp, #4]
 800a3e8:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800a3ec:	3501      	adds	r5, #1
 800a3ee:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a3f2:	4628      	mov	r0, r5
 800a3f4:	f7f6 f8b6 	bl	8000564 <__aeabi_i2d>
 800a3f8:	4642      	mov	r2, r8
 800a3fa:	464b      	mov	r3, r9
 800a3fc:	f7f6 f91c 	bl	8000638 <__aeabi_dmul>
 800a400:	4b86      	ldr	r3, [pc, #536]	; (800a61c <_dtoa_r+0x64c>)
 800a402:	2200      	movs	r2, #0
 800a404:	f7f5 ff62 	bl	80002cc <__adddf3>
 800a408:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a40c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a410:	9303      	str	r3, [sp, #12]
 800a412:	2e00      	cmp	r6, #0
 800a414:	d158      	bne.n	800a4c8 <_dtoa_r+0x4f8>
 800a416:	4b82      	ldr	r3, [pc, #520]	; (800a620 <_dtoa_r+0x650>)
 800a418:	2200      	movs	r2, #0
 800a41a:	4640      	mov	r0, r8
 800a41c:	4649      	mov	r1, r9
 800a41e:	f7f5 ff53 	bl	80002c8 <__aeabi_dsub>
 800a422:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a426:	4680      	mov	r8, r0
 800a428:	4689      	mov	r9, r1
 800a42a:	f7f6 fb95 	bl	8000b58 <__aeabi_dcmpgt>
 800a42e:	2800      	cmp	r0, #0
 800a430:	f040 8296 	bne.w	800a960 <_dtoa_r+0x990>
 800a434:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a438:	4640      	mov	r0, r8
 800a43a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a43e:	4649      	mov	r1, r9
 800a440:	f7f6 fb6c 	bl	8000b1c <__aeabi_dcmplt>
 800a444:	2800      	cmp	r0, #0
 800a446:	f040 8289 	bne.w	800a95c <_dtoa_r+0x98c>
 800a44a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a44e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a450:	2b00      	cmp	r3, #0
 800a452:	f2c0 814e 	blt.w	800a6f2 <_dtoa_r+0x722>
 800a456:	f1bb 0f0e 	cmp.w	fp, #14
 800a45a:	f300 814a 	bgt.w	800a6f2 <_dtoa_r+0x722>
 800a45e:	4b6b      	ldr	r3, [pc, #428]	; (800a60c <_dtoa_r+0x63c>)
 800a460:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a464:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a468:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	f280 80dc 	bge.w	800a628 <_dtoa_r+0x658>
 800a470:	9b04      	ldr	r3, [sp, #16]
 800a472:	2b00      	cmp	r3, #0
 800a474:	f300 80d8 	bgt.w	800a628 <_dtoa_r+0x658>
 800a478:	f040 826f 	bne.w	800a95a <_dtoa_r+0x98a>
 800a47c:	4b68      	ldr	r3, [pc, #416]	; (800a620 <_dtoa_r+0x650>)
 800a47e:	2200      	movs	r2, #0
 800a480:	4640      	mov	r0, r8
 800a482:	4649      	mov	r1, r9
 800a484:	f7f6 f8d8 	bl	8000638 <__aeabi_dmul>
 800a488:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a48c:	f7f6 fb5a 	bl	8000b44 <__aeabi_dcmpge>
 800a490:	9e04      	ldr	r6, [sp, #16]
 800a492:	4637      	mov	r7, r6
 800a494:	2800      	cmp	r0, #0
 800a496:	f040 8245 	bne.w	800a924 <_dtoa_r+0x954>
 800a49a:	9d00      	ldr	r5, [sp, #0]
 800a49c:	2331      	movs	r3, #49	; 0x31
 800a49e:	f805 3b01 	strb.w	r3, [r5], #1
 800a4a2:	f10b 0b01 	add.w	fp, fp, #1
 800a4a6:	e241      	b.n	800a92c <_dtoa_r+0x95c>
 800a4a8:	07f2      	lsls	r2, r6, #31
 800a4aa:	d505      	bpl.n	800a4b8 <_dtoa_r+0x4e8>
 800a4ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4b0:	f7f6 f8c2 	bl	8000638 <__aeabi_dmul>
 800a4b4:	3501      	adds	r5, #1
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	1076      	asrs	r6, r6, #1
 800a4ba:	3708      	adds	r7, #8
 800a4bc:	e773      	b.n	800a3a6 <_dtoa_r+0x3d6>
 800a4be:	2502      	movs	r5, #2
 800a4c0:	e775      	b.n	800a3ae <_dtoa_r+0x3de>
 800a4c2:	9e04      	ldr	r6, [sp, #16]
 800a4c4:	465f      	mov	r7, fp
 800a4c6:	e792      	b.n	800a3ee <_dtoa_r+0x41e>
 800a4c8:	9900      	ldr	r1, [sp, #0]
 800a4ca:	4b50      	ldr	r3, [pc, #320]	; (800a60c <_dtoa_r+0x63c>)
 800a4cc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a4d0:	4431      	add	r1, r6
 800a4d2:	9102      	str	r1, [sp, #8]
 800a4d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a4d6:	eeb0 9a47 	vmov.f32	s18, s14
 800a4da:	eef0 9a67 	vmov.f32	s19, s15
 800a4de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a4e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a4e6:	2900      	cmp	r1, #0
 800a4e8:	d044      	beq.n	800a574 <_dtoa_r+0x5a4>
 800a4ea:	494e      	ldr	r1, [pc, #312]	; (800a624 <_dtoa_r+0x654>)
 800a4ec:	2000      	movs	r0, #0
 800a4ee:	f7f6 f9cd 	bl	800088c <__aeabi_ddiv>
 800a4f2:	ec53 2b19 	vmov	r2, r3, d9
 800a4f6:	f7f5 fee7 	bl	80002c8 <__aeabi_dsub>
 800a4fa:	9d00      	ldr	r5, [sp, #0]
 800a4fc:	ec41 0b19 	vmov	d9, r0, r1
 800a500:	4649      	mov	r1, r9
 800a502:	4640      	mov	r0, r8
 800a504:	f7f6 fb48 	bl	8000b98 <__aeabi_d2iz>
 800a508:	4606      	mov	r6, r0
 800a50a:	f7f6 f82b 	bl	8000564 <__aeabi_i2d>
 800a50e:	4602      	mov	r2, r0
 800a510:	460b      	mov	r3, r1
 800a512:	4640      	mov	r0, r8
 800a514:	4649      	mov	r1, r9
 800a516:	f7f5 fed7 	bl	80002c8 <__aeabi_dsub>
 800a51a:	3630      	adds	r6, #48	; 0x30
 800a51c:	f805 6b01 	strb.w	r6, [r5], #1
 800a520:	ec53 2b19 	vmov	r2, r3, d9
 800a524:	4680      	mov	r8, r0
 800a526:	4689      	mov	r9, r1
 800a528:	f7f6 faf8 	bl	8000b1c <__aeabi_dcmplt>
 800a52c:	2800      	cmp	r0, #0
 800a52e:	d164      	bne.n	800a5fa <_dtoa_r+0x62a>
 800a530:	4642      	mov	r2, r8
 800a532:	464b      	mov	r3, r9
 800a534:	4937      	ldr	r1, [pc, #220]	; (800a614 <_dtoa_r+0x644>)
 800a536:	2000      	movs	r0, #0
 800a538:	f7f5 fec6 	bl	80002c8 <__aeabi_dsub>
 800a53c:	ec53 2b19 	vmov	r2, r3, d9
 800a540:	f7f6 faec 	bl	8000b1c <__aeabi_dcmplt>
 800a544:	2800      	cmp	r0, #0
 800a546:	f040 80b6 	bne.w	800a6b6 <_dtoa_r+0x6e6>
 800a54a:	9b02      	ldr	r3, [sp, #8]
 800a54c:	429d      	cmp	r5, r3
 800a54e:	f43f af7c 	beq.w	800a44a <_dtoa_r+0x47a>
 800a552:	4b31      	ldr	r3, [pc, #196]	; (800a618 <_dtoa_r+0x648>)
 800a554:	ec51 0b19 	vmov	r0, r1, d9
 800a558:	2200      	movs	r2, #0
 800a55a:	f7f6 f86d 	bl	8000638 <__aeabi_dmul>
 800a55e:	4b2e      	ldr	r3, [pc, #184]	; (800a618 <_dtoa_r+0x648>)
 800a560:	ec41 0b19 	vmov	d9, r0, r1
 800a564:	2200      	movs	r2, #0
 800a566:	4640      	mov	r0, r8
 800a568:	4649      	mov	r1, r9
 800a56a:	f7f6 f865 	bl	8000638 <__aeabi_dmul>
 800a56e:	4680      	mov	r8, r0
 800a570:	4689      	mov	r9, r1
 800a572:	e7c5      	b.n	800a500 <_dtoa_r+0x530>
 800a574:	ec51 0b17 	vmov	r0, r1, d7
 800a578:	f7f6 f85e 	bl	8000638 <__aeabi_dmul>
 800a57c:	9b02      	ldr	r3, [sp, #8]
 800a57e:	9d00      	ldr	r5, [sp, #0]
 800a580:	930f      	str	r3, [sp, #60]	; 0x3c
 800a582:	ec41 0b19 	vmov	d9, r0, r1
 800a586:	4649      	mov	r1, r9
 800a588:	4640      	mov	r0, r8
 800a58a:	f7f6 fb05 	bl	8000b98 <__aeabi_d2iz>
 800a58e:	4606      	mov	r6, r0
 800a590:	f7f5 ffe8 	bl	8000564 <__aeabi_i2d>
 800a594:	3630      	adds	r6, #48	; 0x30
 800a596:	4602      	mov	r2, r0
 800a598:	460b      	mov	r3, r1
 800a59a:	4640      	mov	r0, r8
 800a59c:	4649      	mov	r1, r9
 800a59e:	f7f5 fe93 	bl	80002c8 <__aeabi_dsub>
 800a5a2:	f805 6b01 	strb.w	r6, [r5], #1
 800a5a6:	9b02      	ldr	r3, [sp, #8]
 800a5a8:	429d      	cmp	r5, r3
 800a5aa:	4680      	mov	r8, r0
 800a5ac:	4689      	mov	r9, r1
 800a5ae:	f04f 0200 	mov.w	r2, #0
 800a5b2:	d124      	bne.n	800a5fe <_dtoa_r+0x62e>
 800a5b4:	4b1b      	ldr	r3, [pc, #108]	; (800a624 <_dtoa_r+0x654>)
 800a5b6:	ec51 0b19 	vmov	r0, r1, d9
 800a5ba:	f7f5 fe87 	bl	80002cc <__adddf3>
 800a5be:	4602      	mov	r2, r0
 800a5c0:	460b      	mov	r3, r1
 800a5c2:	4640      	mov	r0, r8
 800a5c4:	4649      	mov	r1, r9
 800a5c6:	f7f6 fac7 	bl	8000b58 <__aeabi_dcmpgt>
 800a5ca:	2800      	cmp	r0, #0
 800a5cc:	d173      	bne.n	800a6b6 <_dtoa_r+0x6e6>
 800a5ce:	ec53 2b19 	vmov	r2, r3, d9
 800a5d2:	4914      	ldr	r1, [pc, #80]	; (800a624 <_dtoa_r+0x654>)
 800a5d4:	2000      	movs	r0, #0
 800a5d6:	f7f5 fe77 	bl	80002c8 <__aeabi_dsub>
 800a5da:	4602      	mov	r2, r0
 800a5dc:	460b      	mov	r3, r1
 800a5de:	4640      	mov	r0, r8
 800a5e0:	4649      	mov	r1, r9
 800a5e2:	f7f6 fa9b 	bl	8000b1c <__aeabi_dcmplt>
 800a5e6:	2800      	cmp	r0, #0
 800a5e8:	f43f af2f 	beq.w	800a44a <_dtoa_r+0x47a>
 800a5ec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a5ee:	1e6b      	subs	r3, r5, #1
 800a5f0:	930f      	str	r3, [sp, #60]	; 0x3c
 800a5f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a5f6:	2b30      	cmp	r3, #48	; 0x30
 800a5f8:	d0f8      	beq.n	800a5ec <_dtoa_r+0x61c>
 800a5fa:	46bb      	mov	fp, r7
 800a5fc:	e04a      	b.n	800a694 <_dtoa_r+0x6c4>
 800a5fe:	4b06      	ldr	r3, [pc, #24]	; (800a618 <_dtoa_r+0x648>)
 800a600:	f7f6 f81a 	bl	8000638 <__aeabi_dmul>
 800a604:	4680      	mov	r8, r0
 800a606:	4689      	mov	r9, r1
 800a608:	e7bd      	b.n	800a586 <_dtoa_r+0x5b6>
 800a60a:	bf00      	nop
 800a60c:	0800cd90 	.word	0x0800cd90
 800a610:	0800cd68 	.word	0x0800cd68
 800a614:	3ff00000 	.word	0x3ff00000
 800a618:	40240000 	.word	0x40240000
 800a61c:	401c0000 	.word	0x401c0000
 800a620:	40140000 	.word	0x40140000
 800a624:	3fe00000 	.word	0x3fe00000
 800a628:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a62c:	9d00      	ldr	r5, [sp, #0]
 800a62e:	4642      	mov	r2, r8
 800a630:	464b      	mov	r3, r9
 800a632:	4630      	mov	r0, r6
 800a634:	4639      	mov	r1, r7
 800a636:	f7f6 f929 	bl	800088c <__aeabi_ddiv>
 800a63a:	f7f6 faad 	bl	8000b98 <__aeabi_d2iz>
 800a63e:	9001      	str	r0, [sp, #4]
 800a640:	f7f5 ff90 	bl	8000564 <__aeabi_i2d>
 800a644:	4642      	mov	r2, r8
 800a646:	464b      	mov	r3, r9
 800a648:	f7f5 fff6 	bl	8000638 <__aeabi_dmul>
 800a64c:	4602      	mov	r2, r0
 800a64e:	460b      	mov	r3, r1
 800a650:	4630      	mov	r0, r6
 800a652:	4639      	mov	r1, r7
 800a654:	f7f5 fe38 	bl	80002c8 <__aeabi_dsub>
 800a658:	9e01      	ldr	r6, [sp, #4]
 800a65a:	9f04      	ldr	r7, [sp, #16]
 800a65c:	3630      	adds	r6, #48	; 0x30
 800a65e:	f805 6b01 	strb.w	r6, [r5], #1
 800a662:	9e00      	ldr	r6, [sp, #0]
 800a664:	1bae      	subs	r6, r5, r6
 800a666:	42b7      	cmp	r7, r6
 800a668:	4602      	mov	r2, r0
 800a66a:	460b      	mov	r3, r1
 800a66c:	d134      	bne.n	800a6d8 <_dtoa_r+0x708>
 800a66e:	f7f5 fe2d 	bl	80002cc <__adddf3>
 800a672:	4642      	mov	r2, r8
 800a674:	464b      	mov	r3, r9
 800a676:	4606      	mov	r6, r0
 800a678:	460f      	mov	r7, r1
 800a67a:	f7f6 fa6d 	bl	8000b58 <__aeabi_dcmpgt>
 800a67e:	b9c8      	cbnz	r0, 800a6b4 <_dtoa_r+0x6e4>
 800a680:	4642      	mov	r2, r8
 800a682:	464b      	mov	r3, r9
 800a684:	4630      	mov	r0, r6
 800a686:	4639      	mov	r1, r7
 800a688:	f7f6 fa3e 	bl	8000b08 <__aeabi_dcmpeq>
 800a68c:	b110      	cbz	r0, 800a694 <_dtoa_r+0x6c4>
 800a68e:	9b01      	ldr	r3, [sp, #4]
 800a690:	07db      	lsls	r3, r3, #31
 800a692:	d40f      	bmi.n	800a6b4 <_dtoa_r+0x6e4>
 800a694:	4651      	mov	r1, sl
 800a696:	4620      	mov	r0, r4
 800a698:	f001 f8f0 	bl	800b87c <_Bfree>
 800a69c:	2300      	movs	r3, #0
 800a69e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a6a0:	702b      	strb	r3, [r5, #0]
 800a6a2:	f10b 0301 	add.w	r3, fp, #1
 800a6a6:	6013      	str	r3, [r2, #0]
 800a6a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	f43f ace2 	beq.w	800a074 <_dtoa_r+0xa4>
 800a6b0:	601d      	str	r5, [r3, #0]
 800a6b2:	e4df      	b.n	800a074 <_dtoa_r+0xa4>
 800a6b4:	465f      	mov	r7, fp
 800a6b6:	462b      	mov	r3, r5
 800a6b8:	461d      	mov	r5, r3
 800a6ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a6be:	2a39      	cmp	r2, #57	; 0x39
 800a6c0:	d106      	bne.n	800a6d0 <_dtoa_r+0x700>
 800a6c2:	9a00      	ldr	r2, [sp, #0]
 800a6c4:	429a      	cmp	r2, r3
 800a6c6:	d1f7      	bne.n	800a6b8 <_dtoa_r+0x6e8>
 800a6c8:	9900      	ldr	r1, [sp, #0]
 800a6ca:	2230      	movs	r2, #48	; 0x30
 800a6cc:	3701      	adds	r7, #1
 800a6ce:	700a      	strb	r2, [r1, #0]
 800a6d0:	781a      	ldrb	r2, [r3, #0]
 800a6d2:	3201      	adds	r2, #1
 800a6d4:	701a      	strb	r2, [r3, #0]
 800a6d6:	e790      	b.n	800a5fa <_dtoa_r+0x62a>
 800a6d8:	4ba3      	ldr	r3, [pc, #652]	; (800a968 <_dtoa_r+0x998>)
 800a6da:	2200      	movs	r2, #0
 800a6dc:	f7f5 ffac 	bl	8000638 <__aeabi_dmul>
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	4606      	mov	r6, r0
 800a6e6:	460f      	mov	r7, r1
 800a6e8:	f7f6 fa0e 	bl	8000b08 <__aeabi_dcmpeq>
 800a6ec:	2800      	cmp	r0, #0
 800a6ee:	d09e      	beq.n	800a62e <_dtoa_r+0x65e>
 800a6f0:	e7d0      	b.n	800a694 <_dtoa_r+0x6c4>
 800a6f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6f4:	2a00      	cmp	r2, #0
 800a6f6:	f000 80ca 	beq.w	800a88e <_dtoa_r+0x8be>
 800a6fa:	9a07      	ldr	r2, [sp, #28]
 800a6fc:	2a01      	cmp	r2, #1
 800a6fe:	f300 80ad 	bgt.w	800a85c <_dtoa_r+0x88c>
 800a702:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a704:	2a00      	cmp	r2, #0
 800a706:	f000 80a5 	beq.w	800a854 <_dtoa_r+0x884>
 800a70a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a70e:	9e08      	ldr	r6, [sp, #32]
 800a710:	9d05      	ldr	r5, [sp, #20]
 800a712:	9a05      	ldr	r2, [sp, #20]
 800a714:	441a      	add	r2, r3
 800a716:	9205      	str	r2, [sp, #20]
 800a718:	9a06      	ldr	r2, [sp, #24]
 800a71a:	2101      	movs	r1, #1
 800a71c:	441a      	add	r2, r3
 800a71e:	4620      	mov	r0, r4
 800a720:	9206      	str	r2, [sp, #24]
 800a722:	f001 f9ab 	bl	800ba7c <__i2b>
 800a726:	4607      	mov	r7, r0
 800a728:	b165      	cbz	r5, 800a744 <_dtoa_r+0x774>
 800a72a:	9b06      	ldr	r3, [sp, #24]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	dd09      	ble.n	800a744 <_dtoa_r+0x774>
 800a730:	42ab      	cmp	r3, r5
 800a732:	9a05      	ldr	r2, [sp, #20]
 800a734:	bfa8      	it	ge
 800a736:	462b      	movge	r3, r5
 800a738:	1ad2      	subs	r2, r2, r3
 800a73a:	9205      	str	r2, [sp, #20]
 800a73c:	9a06      	ldr	r2, [sp, #24]
 800a73e:	1aed      	subs	r5, r5, r3
 800a740:	1ad3      	subs	r3, r2, r3
 800a742:	9306      	str	r3, [sp, #24]
 800a744:	9b08      	ldr	r3, [sp, #32]
 800a746:	b1f3      	cbz	r3, 800a786 <_dtoa_r+0x7b6>
 800a748:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	f000 80a3 	beq.w	800a896 <_dtoa_r+0x8c6>
 800a750:	2e00      	cmp	r6, #0
 800a752:	dd10      	ble.n	800a776 <_dtoa_r+0x7a6>
 800a754:	4639      	mov	r1, r7
 800a756:	4632      	mov	r2, r6
 800a758:	4620      	mov	r0, r4
 800a75a:	f001 fa4f 	bl	800bbfc <__pow5mult>
 800a75e:	4652      	mov	r2, sl
 800a760:	4601      	mov	r1, r0
 800a762:	4607      	mov	r7, r0
 800a764:	4620      	mov	r0, r4
 800a766:	f001 f99f 	bl	800baa8 <__multiply>
 800a76a:	4651      	mov	r1, sl
 800a76c:	4680      	mov	r8, r0
 800a76e:	4620      	mov	r0, r4
 800a770:	f001 f884 	bl	800b87c <_Bfree>
 800a774:	46c2      	mov	sl, r8
 800a776:	9b08      	ldr	r3, [sp, #32]
 800a778:	1b9a      	subs	r2, r3, r6
 800a77a:	d004      	beq.n	800a786 <_dtoa_r+0x7b6>
 800a77c:	4651      	mov	r1, sl
 800a77e:	4620      	mov	r0, r4
 800a780:	f001 fa3c 	bl	800bbfc <__pow5mult>
 800a784:	4682      	mov	sl, r0
 800a786:	2101      	movs	r1, #1
 800a788:	4620      	mov	r0, r4
 800a78a:	f001 f977 	bl	800ba7c <__i2b>
 800a78e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a790:	2b00      	cmp	r3, #0
 800a792:	4606      	mov	r6, r0
 800a794:	f340 8081 	ble.w	800a89a <_dtoa_r+0x8ca>
 800a798:	461a      	mov	r2, r3
 800a79a:	4601      	mov	r1, r0
 800a79c:	4620      	mov	r0, r4
 800a79e:	f001 fa2d 	bl	800bbfc <__pow5mult>
 800a7a2:	9b07      	ldr	r3, [sp, #28]
 800a7a4:	2b01      	cmp	r3, #1
 800a7a6:	4606      	mov	r6, r0
 800a7a8:	dd7a      	ble.n	800a8a0 <_dtoa_r+0x8d0>
 800a7aa:	f04f 0800 	mov.w	r8, #0
 800a7ae:	6933      	ldr	r3, [r6, #16]
 800a7b0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a7b4:	6918      	ldr	r0, [r3, #16]
 800a7b6:	f001 f913 	bl	800b9e0 <__hi0bits>
 800a7ba:	f1c0 0020 	rsb	r0, r0, #32
 800a7be:	9b06      	ldr	r3, [sp, #24]
 800a7c0:	4418      	add	r0, r3
 800a7c2:	f010 001f 	ands.w	r0, r0, #31
 800a7c6:	f000 8094 	beq.w	800a8f2 <_dtoa_r+0x922>
 800a7ca:	f1c0 0320 	rsb	r3, r0, #32
 800a7ce:	2b04      	cmp	r3, #4
 800a7d0:	f340 8085 	ble.w	800a8de <_dtoa_r+0x90e>
 800a7d4:	9b05      	ldr	r3, [sp, #20]
 800a7d6:	f1c0 001c 	rsb	r0, r0, #28
 800a7da:	4403      	add	r3, r0
 800a7dc:	9305      	str	r3, [sp, #20]
 800a7de:	9b06      	ldr	r3, [sp, #24]
 800a7e0:	4403      	add	r3, r0
 800a7e2:	4405      	add	r5, r0
 800a7e4:	9306      	str	r3, [sp, #24]
 800a7e6:	9b05      	ldr	r3, [sp, #20]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	dd05      	ble.n	800a7f8 <_dtoa_r+0x828>
 800a7ec:	4651      	mov	r1, sl
 800a7ee:	461a      	mov	r2, r3
 800a7f0:	4620      	mov	r0, r4
 800a7f2:	f001 fa5d 	bl	800bcb0 <__lshift>
 800a7f6:	4682      	mov	sl, r0
 800a7f8:	9b06      	ldr	r3, [sp, #24]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	dd05      	ble.n	800a80a <_dtoa_r+0x83a>
 800a7fe:	4631      	mov	r1, r6
 800a800:	461a      	mov	r2, r3
 800a802:	4620      	mov	r0, r4
 800a804:	f001 fa54 	bl	800bcb0 <__lshift>
 800a808:	4606      	mov	r6, r0
 800a80a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d072      	beq.n	800a8f6 <_dtoa_r+0x926>
 800a810:	4631      	mov	r1, r6
 800a812:	4650      	mov	r0, sl
 800a814:	f001 fab8 	bl	800bd88 <__mcmp>
 800a818:	2800      	cmp	r0, #0
 800a81a:	da6c      	bge.n	800a8f6 <_dtoa_r+0x926>
 800a81c:	2300      	movs	r3, #0
 800a81e:	4651      	mov	r1, sl
 800a820:	220a      	movs	r2, #10
 800a822:	4620      	mov	r0, r4
 800a824:	f001 f84c 	bl	800b8c0 <__multadd>
 800a828:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a82a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a82e:	4682      	mov	sl, r0
 800a830:	2b00      	cmp	r3, #0
 800a832:	f000 81b0 	beq.w	800ab96 <_dtoa_r+0xbc6>
 800a836:	2300      	movs	r3, #0
 800a838:	4639      	mov	r1, r7
 800a83a:	220a      	movs	r2, #10
 800a83c:	4620      	mov	r0, r4
 800a83e:	f001 f83f 	bl	800b8c0 <__multadd>
 800a842:	9b01      	ldr	r3, [sp, #4]
 800a844:	2b00      	cmp	r3, #0
 800a846:	4607      	mov	r7, r0
 800a848:	f300 8096 	bgt.w	800a978 <_dtoa_r+0x9a8>
 800a84c:	9b07      	ldr	r3, [sp, #28]
 800a84e:	2b02      	cmp	r3, #2
 800a850:	dc59      	bgt.n	800a906 <_dtoa_r+0x936>
 800a852:	e091      	b.n	800a978 <_dtoa_r+0x9a8>
 800a854:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a856:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a85a:	e758      	b.n	800a70e <_dtoa_r+0x73e>
 800a85c:	9b04      	ldr	r3, [sp, #16]
 800a85e:	1e5e      	subs	r6, r3, #1
 800a860:	9b08      	ldr	r3, [sp, #32]
 800a862:	42b3      	cmp	r3, r6
 800a864:	bfbf      	itttt	lt
 800a866:	9b08      	ldrlt	r3, [sp, #32]
 800a868:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a86a:	9608      	strlt	r6, [sp, #32]
 800a86c:	1af3      	sublt	r3, r6, r3
 800a86e:	bfb4      	ite	lt
 800a870:	18d2      	addlt	r2, r2, r3
 800a872:	1b9e      	subge	r6, r3, r6
 800a874:	9b04      	ldr	r3, [sp, #16]
 800a876:	bfbc      	itt	lt
 800a878:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a87a:	2600      	movlt	r6, #0
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	bfb7      	itett	lt
 800a880:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a884:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a888:	1a9d      	sublt	r5, r3, r2
 800a88a:	2300      	movlt	r3, #0
 800a88c:	e741      	b.n	800a712 <_dtoa_r+0x742>
 800a88e:	9e08      	ldr	r6, [sp, #32]
 800a890:	9d05      	ldr	r5, [sp, #20]
 800a892:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a894:	e748      	b.n	800a728 <_dtoa_r+0x758>
 800a896:	9a08      	ldr	r2, [sp, #32]
 800a898:	e770      	b.n	800a77c <_dtoa_r+0x7ac>
 800a89a:	9b07      	ldr	r3, [sp, #28]
 800a89c:	2b01      	cmp	r3, #1
 800a89e:	dc19      	bgt.n	800a8d4 <_dtoa_r+0x904>
 800a8a0:	9b02      	ldr	r3, [sp, #8]
 800a8a2:	b9bb      	cbnz	r3, 800a8d4 <_dtoa_r+0x904>
 800a8a4:	9b03      	ldr	r3, [sp, #12]
 800a8a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a8aa:	b99b      	cbnz	r3, 800a8d4 <_dtoa_r+0x904>
 800a8ac:	9b03      	ldr	r3, [sp, #12]
 800a8ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a8b2:	0d1b      	lsrs	r3, r3, #20
 800a8b4:	051b      	lsls	r3, r3, #20
 800a8b6:	b183      	cbz	r3, 800a8da <_dtoa_r+0x90a>
 800a8b8:	9b05      	ldr	r3, [sp, #20]
 800a8ba:	3301      	adds	r3, #1
 800a8bc:	9305      	str	r3, [sp, #20]
 800a8be:	9b06      	ldr	r3, [sp, #24]
 800a8c0:	3301      	adds	r3, #1
 800a8c2:	9306      	str	r3, [sp, #24]
 800a8c4:	f04f 0801 	mov.w	r8, #1
 800a8c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	f47f af6f 	bne.w	800a7ae <_dtoa_r+0x7de>
 800a8d0:	2001      	movs	r0, #1
 800a8d2:	e774      	b.n	800a7be <_dtoa_r+0x7ee>
 800a8d4:	f04f 0800 	mov.w	r8, #0
 800a8d8:	e7f6      	b.n	800a8c8 <_dtoa_r+0x8f8>
 800a8da:	4698      	mov	r8, r3
 800a8dc:	e7f4      	b.n	800a8c8 <_dtoa_r+0x8f8>
 800a8de:	d082      	beq.n	800a7e6 <_dtoa_r+0x816>
 800a8e0:	9a05      	ldr	r2, [sp, #20]
 800a8e2:	331c      	adds	r3, #28
 800a8e4:	441a      	add	r2, r3
 800a8e6:	9205      	str	r2, [sp, #20]
 800a8e8:	9a06      	ldr	r2, [sp, #24]
 800a8ea:	441a      	add	r2, r3
 800a8ec:	441d      	add	r5, r3
 800a8ee:	9206      	str	r2, [sp, #24]
 800a8f0:	e779      	b.n	800a7e6 <_dtoa_r+0x816>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	e7f4      	b.n	800a8e0 <_dtoa_r+0x910>
 800a8f6:	9b04      	ldr	r3, [sp, #16]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	dc37      	bgt.n	800a96c <_dtoa_r+0x99c>
 800a8fc:	9b07      	ldr	r3, [sp, #28]
 800a8fe:	2b02      	cmp	r3, #2
 800a900:	dd34      	ble.n	800a96c <_dtoa_r+0x99c>
 800a902:	9b04      	ldr	r3, [sp, #16]
 800a904:	9301      	str	r3, [sp, #4]
 800a906:	9b01      	ldr	r3, [sp, #4]
 800a908:	b963      	cbnz	r3, 800a924 <_dtoa_r+0x954>
 800a90a:	4631      	mov	r1, r6
 800a90c:	2205      	movs	r2, #5
 800a90e:	4620      	mov	r0, r4
 800a910:	f000 ffd6 	bl	800b8c0 <__multadd>
 800a914:	4601      	mov	r1, r0
 800a916:	4606      	mov	r6, r0
 800a918:	4650      	mov	r0, sl
 800a91a:	f001 fa35 	bl	800bd88 <__mcmp>
 800a91e:	2800      	cmp	r0, #0
 800a920:	f73f adbb 	bgt.w	800a49a <_dtoa_r+0x4ca>
 800a924:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a926:	9d00      	ldr	r5, [sp, #0]
 800a928:	ea6f 0b03 	mvn.w	fp, r3
 800a92c:	f04f 0800 	mov.w	r8, #0
 800a930:	4631      	mov	r1, r6
 800a932:	4620      	mov	r0, r4
 800a934:	f000 ffa2 	bl	800b87c <_Bfree>
 800a938:	2f00      	cmp	r7, #0
 800a93a:	f43f aeab 	beq.w	800a694 <_dtoa_r+0x6c4>
 800a93e:	f1b8 0f00 	cmp.w	r8, #0
 800a942:	d005      	beq.n	800a950 <_dtoa_r+0x980>
 800a944:	45b8      	cmp	r8, r7
 800a946:	d003      	beq.n	800a950 <_dtoa_r+0x980>
 800a948:	4641      	mov	r1, r8
 800a94a:	4620      	mov	r0, r4
 800a94c:	f000 ff96 	bl	800b87c <_Bfree>
 800a950:	4639      	mov	r1, r7
 800a952:	4620      	mov	r0, r4
 800a954:	f000 ff92 	bl	800b87c <_Bfree>
 800a958:	e69c      	b.n	800a694 <_dtoa_r+0x6c4>
 800a95a:	2600      	movs	r6, #0
 800a95c:	4637      	mov	r7, r6
 800a95e:	e7e1      	b.n	800a924 <_dtoa_r+0x954>
 800a960:	46bb      	mov	fp, r7
 800a962:	4637      	mov	r7, r6
 800a964:	e599      	b.n	800a49a <_dtoa_r+0x4ca>
 800a966:	bf00      	nop
 800a968:	40240000 	.word	0x40240000
 800a96c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a96e:	2b00      	cmp	r3, #0
 800a970:	f000 80c8 	beq.w	800ab04 <_dtoa_r+0xb34>
 800a974:	9b04      	ldr	r3, [sp, #16]
 800a976:	9301      	str	r3, [sp, #4]
 800a978:	2d00      	cmp	r5, #0
 800a97a:	dd05      	ble.n	800a988 <_dtoa_r+0x9b8>
 800a97c:	4639      	mov	r1, r7
 800a97e:	462a      	mov	r2, r5
 800a980:	4620      	mov	r0, r4
 800a982:	f001 f995 	bl	800bcb0 <__lshift>
 800a986:	4607      	mov	r7, r0
 800a988:	f1b8 0f00 	cmp.w	r8, #0
 800a98c:	d05b      	beq.n	800aa46 <_dtoa_r+0xa76>
 800a98e:	6879      	ldr	r1, [r7, #4]
 800a990:	4620      	mov	r0, r4
 800a992:	f000 ff33 	bl	800b7fc <_Balloc>
 800a996:	4605      	mov	r5, r0
 800a998:	b928      	cbnz	r0, 800a9a6 <_dtoa_r+0x9d6>
 800a99a:	4b83      	ldr	r3, [pc, #524]	; (800aba8 <_dtoa_r+0xbd8>)
 800a99c:	4602      	mov	r2, r0
 800a99e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a9a2:	f7ff bb2e 	b.w	800a002 <_dtoa_r+0x32>
 800a9a6:	693a      	ldr	r2, [r7, #16]
 800a9a8:	3202      	adds	r2, #2
 800a9aa:	0092      	lsls	r2, r2, #2
 800a9ac:	f107 010c 	add.w	r1, r7, #12
 800a9b0:	300c      	adds	r0, #12
 800a9b2:	f7ff fa66 	bl	8009e82 <memcpy>
 800a9b6:	2201      	movs	r2, #1
 800a9b8:	4629      	mov	r1, r5
 800a9ba:	4620      	mov	r0, r4
 800a9bc:	f001 f978 	bl	800bcb0 <__lshift>
 800a9c0:	9b00      	ldr	r3, [sp, #0]
 800a9c2:	3301      	adds	r3, #1
 800a9c4:	9304      	str	r3, [sp, #16]
 800a9c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a9ca:	4413      	add	r3, r2
 800a9cc:	9308      	str	r3, [sp, #32]
 800a9ce:	9b02      	ldr	r3, [sp, #8]
 800a9d0:	f003 0301 	and.w	r3, r3, #1
 800a9d4:	46b8      	mov	r8, r7
 800a9d6:	9306      	str	r3, [sp, #24]
 800a9d8:	4607      	mov	r7, r0
 800a9da:	9b04      	ldr	r3, [sp, #16]
 800a9dc:	4631      	mov	r1, r6
 800a9de:	3b01      	subs	r3, #1
 800a9e0:	4650      	mov	r0, sl
 800a9e2:	9301      	str	r3, [sp, #4]
 800a9e4:	f7ff fa6a 	bl	8009ebc <quorem>
 800a9e8:	4641      	mov	r1, r8
 800a9ea:	9002      	str	r0, [sp, #8]
 800a9ec:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a9f0:	4650      	mov	r0, sl
 800a9f2:	f001 f9c9 	bl	800bd88 <__mcmp>
 800a9f6:	463a      	mov	r2, r7
 800a9f8:	9005      	str	r0, [sp, #20]
 800a9fa:	4631      	mov	r1, r6
 800a9fc:	4620      	mov	r0, r4
 800a9fe:	f001 f9df 	bl	800bdc0 <__mdiff>
 800aa02:	68c2      	ldr	r2, [r0, #12]
 800aa04:	4605      	mov	r5, r0
 800aa06:	bb02      	cbnz	r2, 800aa4a <_dtoa_r+0xa7a>
 800aa08:	4601      	mov	r1, r0
 800aa0a:	4650      	mov	r0, sl
 800aa0c:	f001 f9bc 	bl	800bd88 <__mcmp>
 800aa10:	4602      	mov	r2, r0
 800aa12:	4629      	mov	r1, r5
 800aa14:	4620      	mov	r0, r4
 800aa16:	9209      	str	r2, [sp, #36]	; 0x24
 800aa18:	f000 ff30 	bl	800b87c <_Bfree>
 800aa1c:	9b07      	ldr	r3, [sp, #28]
 800aa1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa20:	9d04      	ldr	r5, [sp, #16]
 800aa22:	ea43 0102 	orr.w	r1, r3, r2
 800aa26:	9b06      	ldr	r3, [sp, #24]
 800aa28:	4319      	orrs	r1, r3
 800aa2a:	d110      	bne.n	800aa4e <_dtoa_r+0xa7e>
 800aa2c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800aa30:	d029      	beq.n	800aa86 <_dtoa_r+0xab6>
 800aa32:	9b05      	ldr	r3, [sp, #20]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	dd02      	ble.n	800aa3e <_dtoa_r+0xa6e>
 800aa38:	9b02      	ldr	r3, [sp, #8]
 800aa3a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800aa3e:	9b01      	ldr	r3, [sp, #4]
 800aa40:	f883 9000 	strb.w	r9, [r3]
 800aa44:	e774      	b.n	800a930 <_dtoa_r+0x960>
 800aa46:	4638      	mov	r0, r7
 800aa48:	e7ba      	b.n	800a9c0 <_dtoa_r+0x9f0>
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	e7e1      	b.n	800aa12 <_dtoa_r+0xa42>
 800aa4e:	9b05      	ldr	r3, [sp, #20]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	db04      	blt.n	800aa5e <_dtoa_r+0xa8e>
 800aa54:	9907      	ldr	r1, [sp, #28]
 800aa56:	430b      	orrs	r3, r1
 800aa58:	9906      	ldr	r1, [sp, #24]
 800aa5a:	430b      	orrs	r3, r1
 800aa5c:	d120      	bne.n	800aaa0 <_dtoa_r+0xad0>
 800aa5e:	2a00      	cmp	r2, #0
 800aa60:	dded      	ble.n	800aa3e <_dtoa_r+0xa6e>
 800aa62:	4651      	mov	r1, sl
 800aa64:	2201      	movs	r2, #1
 800aa66:	4620      	mov	r0, r4
 800aa68:	f001 f922 	bl	800bcb0 <__lshift>
 800aa6c:	4631      	mov	r1, r6
 800aa6e:	4682      	mov	sl, r0
 800aa70:	f001 f98a 	bl	800bd88 <__mcmp>
 800aa74:	2800      	cmp	r0, #0
 800aa76:	dc03      	bgt.n	800aa80 <_dtoa_r+0xab0>
 800aa78:	d1e1      	bne.n	800aa3e <_dtoa_r+0xa6e>
 800aa7a:	f019 0f01 	tst.w	r9, #1
 800aa7e:	d0de      	beq.n	800aa3e <_dtoa_r+0xa6e>
 800aa80:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800aa84:	d1d8      	bne.n	800aa38 <_dtoa_r+0xa68>
 800aa86:	9a01      	ldr	r2, [sp, #4]
 800aa88:	2339      	movs	r3, #57	; 0x39
 800aa8a:	7013      	strb	r3, [r2, #0]
 800aa8c:	462b      	mov	r3, r5
 800aa8e:	461d      	mov	r5, r3
 800aa90:	3b01      	subs	r3, #1
 800aa92:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800aa96:	2a39      	cmp	r2, #57	; 0x39
 800aa98:	d06c      	beq.n	800ab74 <_dtoa_r+0xba4>
 800aa9a:	3201      	adds	r2, #1
 800aa9c:	701a      	strb	r2, [r3, #0]
 800aa9e:	e747      	b.n	800a930 <_dtoa_r+0x960>
 800aaa0:	2a00      	cmp	r2, #0
 800aaa2:	dd07      	ble.n	800aab4 <_dtoa_r+0xae4>
 800aaa4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800aaa8:	d0ed      	beq.n	800aa86 <_dtoa_r+0xab6>
 800aaaa:	9a01      	ldr	r2, [sp, #4]
 800aaac:	f109 0301 	add.w	r3, r9, #1
 800aab0:	7013      	strb	r3, [r2, #0]
 800aab2:	e73d      	b.n	800a930 <_dtoa_r+0x960>
 800aab4:	9b04      	ldr	r3, [sp, #16]
 800aab6:	9a08      	ldr	r2, [sp, #32]
 800aab8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800aabc:	4293      	cmp	r3, r2
 800aabe:	d043      	beq.n	800ab48 <_dtoa_r+0xb78>
 800aac0:	4651      	mov	r1, sl
 800aac2:	2300      	movs	r3, #0
 800aac4:	220a      	movs	r2, #10
 800aac6:	4620      	mov	r0, r4
 800aac8:	f000 fefa 	bl	800b8c0 <__multadd>
 800aacc:	45b8      	cmp	r8, r7
 800aace:	4682      	mov	sl, r0
 800aad0:	f04f 0300 	mov.w	r3, #0
 800aad4:	f04f 020a 	mov.w	r2, #10
 800aad8:	4641      	mov	r1, r8
 800aada:	4620      	mov	r0, r4
 800aadc:	d107      	bne.n	800aaee <_dtoa_r+0xb1e>
 800aade:	f000 feef 	bl	800b8c0 <__multadd>
 800aae2:	4680      	mov	r8, r0
 800aae4:	4607      	mov	r7, r0
 800aae6:	9b04      	ldr	r3, [sp, #16]
 800aae8:	3301      	adds	r3, #1
 800aaea:	9304      	str	r3, [sp, #16]
 800aaec:	e775      	b.n	800a9da <_dtoa_r+0xa0a>
 800aaee:	f000 fee7 	bl	800b8c0 <__multadd>
 800aaf2:	4639      	mov	r1, r7
 800aaf4:	4680      	mov	r8, r0
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	220a      	movs	r2, #10
 800aafa:	4620      	mov	r0, r4
 800aafc:	f000 fee0 	bl	800b8c0 <__multadd>
 800ab00:	4607      	mov	r7, r0
 800ab02:	e7f0      	b.n	800aae6 <_dtoa_r+0xb16>
 800ab04:	9b04      	ldr	r3, [sp, #16]
 800ab06:	9301      	str	r3, [sp, #4]
 800ab08:	9d00      	ldr	r5, [sp, #0]
 800ab0a:	4631      	mov	r1, r6
 800ab0c:	4650      	mov	r0, sl
 800ab0e:	f7ff f9d5 	bl	8009ebc <quorem>
 800ab12:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ab16:	9b00      	ldr	r3, [sp, #0]
 800ab18:	f805 9b01 	strb.w	r9, [r5], #1
 800ab1c:	1aea      	subs	r2, r5, r3
 800ab1e:	9b01      	ldr	r3, [sp, #4]
 800ab20:	4293      	cmp	r3, r2
 800ab22:	dd07      	ble.n	800ab34 <_dtoa_r+0xb64>
 800ab24:	4651      	mov	r1, sl
 800ab26:	2300      	movs	r3, #0
 800ab28:	220a      	movs	r2, #10
 800ab2a:	4620      	mov	r0, r4
 800ab2c:	f000 fec8 	bl	800b8c0 <__multadd>
 800ab30:	4682      	mov	sl, r0
 800ab32:	e7ea      	b.n	800ab0a <_dtoa_r+0xb3a>
 800ab34:	9b01      	ldr	r3, [sp, #4]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	bfc8      	it	gt
 800ab3a:	461d      	movgt	r5, r3
 800ab3c:	9b00      	ldr	r3, [sp, #0]
 800ab3e:	bfd8      	it	le
 800ab40:	2501      	movle	r5, #1
 800ab42:	441d      	add	r5, r3
 800ab44:	f04f 0800 	mov.w	r8, #0
 800ab48:	4651      	mov	r1, sl
 800ab4a:	2201      	movs	r2, #1
 800ab4c:	4620      	mov	r0, r4
 800ab4e:	f001 f8af 	bl	800bcb0 <__lshift>
 800ab52:	4631      	mov	r1, r6
 800ab54:	4682      	mov	sl, r0
 800ab56:	f001 f917 	bl	800bd88 <__mcmp>
 800ab5a:	2800      	cmp	r0, #0
 800ab5c:	dc96      	bgt.n	800aa8c <_dtoa_r+0xabc>
 800ab5e:	d102      	bne.n	800ab66 <_dtoa_r+0xb96>
 800ab60:	f019 0f01 	tst.w	r9, #1
 800ab64:	d192      	bne.n	800aa8c <_dtoa_r+0xabc>
 800ab66:	462b      	mov	r3, r5
 800ab68:	461d      	mov	r5, r3
 800ab6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ab6e:	2a30      	cmp	r2, #48	; 0x30
 800ab70:	d0fa      	beq.n	800ab68 <_dtoa_r+0xb98>
 800ab72:	e6dd      	b.n	800a930 <_dtoa_r+0x960>
 800ab74:	9a00      	ldr	r2, [sp, #0]
 800ab76:	429a      	cmp	r2, r3
 800ab78:	d189      	bne.n	800aa8e <_dtoa_r+0xabe>
 800ab7a:	f10b 0b01 	add.w	fp, fp, #1
 800ab7e:	2331      	movs	r3, #49	; 0x31
 800ab80:	e796      	b.n	800aab0 <_dtoa_r+0xae0>
 800ab82:	4b0a      	ldr	r3, [pc, #40]	; (800abac <_dtoa_r+0xbdc>)
 800ab84:	f7ff ba99 	b.w	800a0ba <_dtoa_r+0xea>
 800ab88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	f47f aa6d 	bne.w	800a06a <_dtoa_r+0x9a>
 800ab90:	4b07      	ldr	r3, [pc, #28]	; (800abb0 <_dtoa_r+0xbe0>)
 800ab92:	f7ff ba92 	b.w	800a0ba <_dtoa_r+0xea>
 800ab96:	9b01      	ldr	r3, [sp, #4]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	dcb5      	bgt.n	800ab08 <_dtoa_r+0xb38>
 800ab9c:	9b07      	ldr	r3, [sp, #28]
 800ab9e:	2b02      	cmp	r3, #2
 800aba0:	f73f aeb1 	bgt.w	800a906 <_dtoa_r+0x936>
 800aba4:	e7b0      	b.n	800ab08 <_dtoa_r+0xb38>
 800aba6:	bf00      	nop
 800aba8:	0800cc8d 	.word	0x0800cc8d
 800abac:	0800ca8c 	.word	0x0800ca8c
 800abb0:	0800cc11 	.word	0x0800cc11

0800abb4 <rshift>:
 800abb4:	6903      	ldr	r3, [r0, #16]
 800abb6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800abba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800abbe:	ea4f 1261 	mov.w	r2, r1, asr #5
 800abc2:	f100 0414 	add.w	r4, r0, #20
 800abc6:	dd45      	ble.n	800ac54 <rshift+0xa0>
 800abc8:	f011 011f 	ands.w	r1, r1, #31
 800abcc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800abd0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800abd4:	d10c      	bne.n	800abf0 <rshift+0x3c>
 800abd6:	f100 0710 	add.w	r7, r0, #16
 800abda:	4629      	mov	r1, r5
 800abdc:	42b1      	cmp	r1, r6
 800abde:	d334      	bcc.n	800ac4a <rshift+0x96>
 800abe0:	1a9b      	subs	r3, r3, r2
 800abe2:	009b      	lsls	r3, r3, #2
 800abe4:	1eea      	subs	r2, r5, #3
 800abe6:	4296      	cmp	r6, r2
 800abe8:	bf38      	it	cc
 800abea:	2300      	movcc	r3, #0
 800abec:	4423      	add	r3, r4
 800abee:	e015      	b.n	800ac1c <rshift+0x68>
 800abf0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800abf4:	f1c1 0820 	rsb	r8, r1, #32
 800abf8:	40cf      	lsrs	r7, r1
 800abfa:	f105 0e04 	add.w	lr, r5, #4
 800abfe:	46a1      	mov	r9, r4
 800ac00:	4576      	cmp	r6, lr
 800ac02:	46f4      	mov	ip, lr
 800ac04:	d815      	bhi.n	800ac32 <rshift+0x7e>
 800ac06:	1a9a      	subs	r2, r3, r2
 800ac08:	0092      	lsls	r2, r2, #2
 800ac0a:	3a04      	subs	r2, #4
 800ac0c:	3501      	adds	r5, #1
 800ac0e:	42ae      	cmp	r6, r5
 800ac10:	bf38      	it	cc
 800ac12:	2200      	movcc	r2, #0
 800ac14:	18a3      	adds	r3, r4, r2
 800ac16:	50a7      	str	r7, [r4, r2]
 800ac18:	b107      	cbz	r7, 800ac1c <rshift+0x68>
 800ac1a:	3304      	adds	r3, #4
 800ac1c:	1b1a      	subs	r2, r3, r4
 800ac1e:	42a3      	cmp	r3, r4
 800ac20:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ac24:	bf08      	it	eq
 800ac26:	2300      	moveq	r3, #0
 800ac28:	6102      	str	r2, [r0, #16]
 800ac2a:	bf08      	it	eq
 800ac2c:	6143      	streq	r3, [r0, #20]
 800ac2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac32:	f8dc c000 	ldr.w	ip, [ip]
 800ac36:	fa0c fc08 	lsl.w	ip, ip, r8
 800ac3a:	ea4c 0707 	orr.w	r7, ip, r7
 800ac3e:	f849 7b04 	str.w	r7, [r9], #4
 800ac42:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ac46:	40cf      	lsrs	r7, r1
 800ac48:	e7da      	b.n	800ac00 <rshift+0x4c>
 800ac4a:	f851 cb04 	ldr.w	ip, [r1], #4
 800ac4e:	f847 cf04 	str.w	ip, [r7, #4]!
 800ac52:	e7c3      	b.n	800abdc <rshift+0x28>
 800ac54:	4623      	mov	r3, r4
 800ac56:	e7e1      	b.n	800ac1c <rshift+0x68>

0800ac58 <__hexdig_fun>:
 800ac58:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ac5c:	2b09      	cmp	r3, #9
 800ac5e:	d802      	bhi.n	800ac66 <__hexdig_fun+0xe>
 800ac60:	3820      	subs	r0, #32
 800ac62:	b2c0      	uxtb	r0, r0
 800ac64:	4770      	bx	lr
 800ac66:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ac6a:	2b05      	cmp	r3, #5
 800ac6c:	d801      	bhi.n	800ac72 <__hexdig_fun+0x1a>
 800ac6e:	3847      	subs	r0, #71	; 0x47
 800ac70:	e7f7      	b.n	800ac62 <__hexdig_fun+0xa>
 800ac72:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ac76:	2b05      	cmp	r3, #5
 800ac78:	d801      	bhi.n	800ac7e <__hexdig_fun+0x26>
 800ac7a:	3827      	subs	r0, #39	; 0x27
 800ac7c:	e7f1      	b.n	800ac62 <__hexdig_fun+0xa>
 800ac7e:	2000      	movs	r0, #0
 800ac80:	4770      	bx	lr
	...

0800ac84 <__gethex>:
 800ac84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac88:	4617      	mov	r7, r2
 800ac8a:	680a      	ldr	r2, [r1, #0]
 800ac8c:	b085      	sub	sp, #20
 800ac8e:	f102 0b02 	add.w	fp, r2, #2
 800ac92:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ac96:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ac9a:	4681      	mov	r9, r0
 800ac9c:	468a      	mov	sl, r1
 800ac9e:	9302      	str	r3, [sp, #8]
 800aca0:	32fe      	adds	r2, #254	; 0xfe
 800aca2:	eb02 030b 	add.w	r3, r2, fp
 800aca6:	46d8      	mov	r8, fp
 800aca8:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800acac:	9301      	str	r3, [sp, #4]
 800acae:	2830      	cmp	r0, #48	; 0x30
 800acb0:	d0f7      	beq.n	800aca2 <__gethex+0x1e>
 800acb2:	f7ff ffd1 	bl	800ac58 <__hexdig_fun>
 800acb6:	4604      	mov	r4, r0
 800acb8:	2800      	cmp	r0, #0
 800acba:	d138      	bne.n	800ad2e <__gethex+0xaa>
 800acbc:	49a7      	ldr	r1, [pc, #668]	; (800af5c <__gethex+0x2d8>)
 800acbe:	2201      	movs	r2, #1
 800acc0:	4640      	mov	r0, r8
 800acc2:	f7ff f892 	bl	8009dea <strncmp>
 800acc6:	4606      	mov	r6, r0
 800acc8:	2800      	cmp	r0, #0
 800acca:	d169      	bne.n	800ada0 <__gethex+0x11c>
 800accc:	f898 0001 	ldrb.w	r0, [r8, #1]
 800acd0:	465d      	mov	r5, fp
 800acd2:	f7ff ffc1 	bl	800ac58 <__hexdig_fun>
 800acd6:	2800      	cmp	r0, #0
 800acd8:	d064      	beq.n	800ada4 <__gethex+0x120>
 800acda:	465a      	mov	r2, fp
 800acdc:	7810      	ldrb	r0, [r2, #0]
 800acde:	2830      	cmp	r0, #48	; 0x30
 800ace0:	4690      	mov	r8, r2
 800ace2:	f102 0201 	add.w	r2, r2, #1
 800ace6:	d0f9      	beq.n	800acdc <__gethex+0x58>
 800ace8:	f7ff ffb6 	bl	800ac58 <__hexdig_fun>
 800acec:	2301      	movs	r3, #1
 800acee:	fab0 f480 	clz	r4, r0
 800acf2:	0964      	lsrs	r4, r4, #5
 800acf4:	465e      	mov	r6, fp
 800acf6:	9301      	str	r3, [sp, #4]
 800acf8:	4642      	mov	r2, r8
 800acfa:	4615      	mov	r5, r2
 800acfc:	3201      	adds	r2, #1
 800acfe:	7828      	ldrb	r0, [r5, #0]
 800ad00:	f7ff ffaa 	bl	800ac58 <__hexdig_fun>
 800ad04:	2800      	cmp	r0, #0
 800ad06:	d1f8      	bne.n	800acfa <__gethex+0x76>
 800ad08:	4994      	ldr	r1, [pc, #592]	; (800af5c <__gethex+0x2d8>)
 800ad0a:	2201      	movs	r2, #1
 800ad0c:	4628      	mov	r0, r5
 800ad0e:	f7ff f86c 	bl	8009dea <strncmp>
 800ad12:	b978      	cbnz	r0, 800ad34 <__gethex+0xb0>
 800ad14:	b946      	cbnz	r6, 800ad28 <__gethex+0xa4>
 800ad16:	1c6e      	adds	r6, r5, #1
 800ad18:	4632      	mov	r2, r6
 800ad1a:	4615      	mov	r5, r2
 800ad1c:	3201      	adds	r2, #1
 800ad1e:	7828      	ldrb	r0, [r5, #0]
 800ad20:	f7ff ff9a 	bl	800ac58 <__hexdig_fun>
 800ad24:	2800      	cmp	r0, #0
 800ad26:	d1f8      	bne.n	800ad1a <__gethex+0x96>
 800ad28:	1b73      	subs	r3, r6, r5
 800ad2a:	009e      	lsls	r6, r3, #2
 800ad2c:	e004      	b.n	800ad38 <__gethex+0xb4>
 800ad2e:	2400      	movs	r4, #0
 800ad30:	4626      	mov	r6, r4
 800ad32:	e7e1      	b.n	800acf8 <__gethex+0x74>
 800ad34:	2e00      	cmp	r6, #0
 800ad36:	d1f7      	bne.n	800ad28 <__gethex+0xa4>
 800ad38:	782b      	ldrb	r3, [r5, #0]
 800ad3a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ad3e:	2b50      	cmp	r3, #80	; 0x50
 800ad40:	d13d      	bne.n	800adbe <__gethex+0x13a>
 800ad42:	786b      	ldrb	r3, [r5, #1]
 800ad44:	2b2b      	cmp	r3, #43	; 0x2b
 800ad46:	d02f      	beq.n	800ada8 <__gethex+0x124>
 800ad48:	2b2d      	cmp	r3, #45	; 0x2d
 800ad4a:	d031      	beq.n	800adb0 <__gethex+0x12c>
 800ad4c:	1c69      	adds	r1, r5, #1
 800ad4e:	f04f 0b00 	mov.w	fp, #0
 800ad52:	7808      	ldrb	r0, [r1, #0]
 800ad54:	f7ff ff80 	bl	800ac58 <__hexdig_fun>
 800ad58:	1e42      	subs	r2, r0, #1
 800ad5a:	b2d2      	uxtb	r2, r2
 800ad5c:	2a18      	cmp	r2, #24
 800ad5e:	d82e      	bhi.n	800adbe <__gethex+0x13a>
 800ad60:	f1a0 0210 	sub.w	r2, r0, #16
 800ad64:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ad68:	f7ff ff76 	bl	800ac58 <__hexdig_fun>
 800ad6c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800ad70:	fa5f fc8c 	uxtb.w	ip, ip
 800ad74:	f1bc 0f18 	cmp.w	ip, #24
 800ad78:	d91d      	bls.n	800adb6 <__gethex+0x132>
 800ad7a:	f1bb 0f00 	cmp.w	fp, #0
 800ad7e:	d000      	beq.n	800ad82 <__gethex+0xfe>
 800ad80:	4252      	negs	r2, r2
 800ad82:	4416      	add	r6, r2
 800ad84:	f8ca 1000 	str.w	r1, [sl]
 800ad88:	b1dc      	cbz	r4, 800adc2 <__gethex+0x13e>
 800ad8a:	9b01      	ldr	r3, [sp, #4]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	bf14      	ite	ne
 800ad90:	f04f 0800 	movne.w	r8, #0
 800ad94:	f04f 0806 	moveq.w	r8, #6
 800ad98:	4640      	mov	r0, r8
 800ad9a:	b005      	add	sp, #20
 800ad9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ada0:	4645      	mov	r5, r8
 800ada2:	4626      	mov	r6, r4
 800ada4:	2401      	movs	r4, #1
 800ada6:	e7c7      	b.n	800ad38 <__gethex+0xb4>
 800ada8:	f04f 0b00 	mov.w	fp, #0
 800adac:	1ca9      	adds	r1, r5, #2
 800adae:	e7d0      	b.n	800ad52 <__gethex+0xce>
 800adb0:	f04f 0b01 	mov.w	fp, #1
 800adb4:	e7fa      	b.n	800adac <__gethex+0x128>
 800adb6:	230a      	movs	r3, #10
 800adb8:	fb03 0002 	mla	r0, r3, r2, r0
 800adbc:	e7d0      	b.n	800ad60 <__gethex+0xdc>
 800adbe:	4629      	mov	r1, r5
 800adc0:	e7e0      	b.n	800ad84 <__gethex+0x100>
 800adc2:	eba5 0308 	sub.w	r3, r5, r8
 800adc6:	3b01      	subs	r3, #1
 800adc8:	4621      	mov	r1, r4
 800adca:	2b07      	cmp	r3, #7
 800adcc:	dc0a      	bgt.n	800ade4 <__gethex+0x160>
 800adce:	4648      	mov	r0, r9
 800add0:	f000 fd14 	bl	800b7fc <_Balloc>
 800add4:	4604      	mov	r4, r0
 800add6:	b940      	cbnz	r0, 800adea <__gethex+0x166>
 800add8:	4b61      	ldr	r3, [pc, #388]	; (800af60 <__gethex+0x2dc>)
 800adda:	4602      	mov	r2, r0
 800addc:	21e4      	movs	r1, #228	; 0xe4
 800adde:	4861      	ldr	r0, [pc, #388]	; (800af64 <__gethex+0x2e0>)
 800ade0:	f001 faa8 	bl	800c334 <__assert_func>
 800ade4:	3101      	adds	r1, #1
 800ade6:	105b      	asrs	r3, r3, #1
 800ade8:	e7ef      	b.n	800adca <__gethex+0x146>
 800adea:	f100 0a14 	add.w	sl, r0, #20
 800adee:	2300      	movs	r3, #0
 800adf0:	495a      	ldr	r1, [pc, #360]	; (800af5c <__gethex+0x2d8>)
 800adf2:	f8cd a004 	str.w	sl, [sp, #4]
 800adf6:	469b      	mov	fp, r3
 800adf8:	45a8      	cmp	r8, r5
 800adfa:	d342      	bcc.n	800ae82 <__gethex+0x1fe>
 800adfc:	9801      	ldr	r0, [sp, #4]
 800adfe:	f840 bb04 	str.w	fp, [r0], #4
 800ae02:	eba0 000a 	sub.w	r0, r0, sl
 800ae06:	1080      	asrs	r0, r0, #2
 800ae08:	6120      	str	r0, [r4, #16]
 800ae0a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800ae0e:	4658      	mov	r0, fp
 800ae10:	f000 fde6 	bl	800b9e0 <__hi0bits>
 800ae14:	683d      	ldr	r5, [r7, #0]
 800ae16:	eba8 0000 	sub.w	r0, r8, r0
 800ae1a:	42a8      	cmp	r0, r5
 800ae1c:	dd59      	ble.n	800aed2 <__gethex+0x24e>
 800ae1e:	eba0 0805 	sub.w	r8, r0, r5
 800ae22:	4641      	mov	r1, r8
 800ae24:	4620      	mov	r0, r4
 800ae26:	f001 f975 	bl	800c114 <__any_on>
 800ae2a:	4683      	mov	fp, r0
 800ae2c:	b1b8      	cbz	r0, 800ae5e <__gethex+0x1da>
 800ae2e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800ae32:	1159      	asrs	r1, r3, #5
 800ae34:	f003 021f 	and.w	r2, r3, #31
 800ae38:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ae3c:	f04f 0b01 	mov.w	fp, #1
 800ae40:	fa0b f202 	lsl.w	r2, fp, r2
 800ae44:	420a      	tst	r2, r1
 800ae46:	d00a      	beq.n	800ae5e <__gethex+0x1da>
 800ae48:	455b      	cmp	r3, fp
 800ae4a:	dd06      	ble.n	800ae5a <__gethex+0x1d6>
 800ae4c:	f1a8 0102 	sub.w	r1, r8, #2
 800ae50:	4620      	mov	r0, r4
 800ae52:	f001 f95f 	bl	800c114 <__any_on>
 800ae56:	2800      	cmp	r0, #0
 800ae58:	d138      	bne.n	800aecc <__gethex+0x248>
 800ae5a:	f04f 0b02 	mov.w	fp, #2
 800ae5e:	4641      	mov	r1, r8
 800ae60:	4620      	mov	r0, r4
 800ae62:	f7ff fea7 	bl	800abb4 <rshift>
 800ae66:	4446      	add	r6, r8
 800ae68:	68bb      	ldr	r3, [r7, #8]
 800ae6a:	42b3      	cmp	r3, r6
 800ae6c:	da41      	bge.n	800aef2 <__gethex+0x26e>
 800ae6e:	4621      	mov	r1, r4
 800ae70:	4648      	mov	r0, r9
 800ae72:	f000 fd03 	bl	800b87c <_Bfree>
 800ae76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ae78:	2300      	movs	r3, #0
 800ae7a:	6013      	str	r3, [r2, #0]
 800ae7c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800ae80:	e78a      	b.n	800ad98 <__gethex+0x114>
 800ae82:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800ae86:	2a2e      	cmp	r2, #46	; 0x2e
 800ae88:	d014      	beq.n	800aeb4 <__gethex+0x230>
 800ae8a:	2b20      	cmp	r3, #32
 800ae8c:	d106      	bne.n	800ae9c <__gethex+0x218>
 800ae8e:	9b01      	ldr	r3, [sp, #4]
 800ae90:	f843 bb04 	str.w	fp, [r3], #4
 800ae94:	f04f 0b00 	mov.w	fp, #0
 800ae98:	9301      	str	r3, [sp, #4]
 800ae9a:	465b      	mov	r3, fp
 800ae9c:	7828      	ldrb	r0, [r5, #0]
 800ae9e:	9303      	str	r3, [sp, #12]
 800aea0:	f7ff feda 	bl	800ac58 <__hexdig_fun>
 800aea4:	9b03      	ldr	r3, [sp, #12]
 800aea6:	f000 000f 	and.w	r0, r0, #15
 800aeaa:	4098      	lsls	r0, r3
 800aeac:	ea4b 0b00 	orr.w	fp, fp, r0
 800aeb0:	3304      	adds	r3, #4
 800aeb2:	e7a1      	b.n	800adf8 <__gethex+0x174>
 800aeb4:	45a8      	cmp	r8, r5
 800aeb6:	d8e8      	bhi.n	800ae8a <__gethex+0x206>
 800aeb8:	2201      	movs	r2, #1
 800aeba:	4628      	mov	r0, r5
 800aebc:	9303      	str	r3, [sp, #12]
 800aebe:	f7fe ff94 	bl	8009dea <strncmp>
 800aec2:	4926      	ldr	r1, [pc, #152]	; (800af5c <__gethex+0x2d8>)
 800aec4:	9b03      	ldr	r3, [sp, #12]
 800aec6:	2800      	cmp	r0, #0
 800aec8:	d1df      	bne.n	800ae8a <__gethex+0x206>
 800aeca:	e795      	b.n	800adf8 <__gethex+0x174>
 800aecc:	f04f 0b03 	mov.w	fp, #3
 800aed0:	e7c5      	b.n	800ae5e <__gethex+0x1da>
 800aed2:	da0b      	bge.n	800aeec <__gethex+0x268>
 800aed4:	eba5 0800 	sub.w	r8, r5, r0
 800aed8:	4621      	mov	r1, r4
 800aeda:	4642      	mov	r2, r8
 800aedc:	4648      	mov	r0, r9
 800aede:	f000 fee7 	bl	800bcb0 <__lshift>
 800aee2:	eba6 0608 	sub.w	r6, r6, r8
 800aee6:	4604      	mov	r4, r0
 800aee8:	f100 0a14 	add.w	sl, r0, #20
 800aeec:	f04f 0b00 	mov.w	fp, #0
 800aef0:	e7ba      	b.n	800ae68 <__gethex+0x1e4>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	42b3      	cmp	r3, r6
 800aef6:	dd73      	ble.n	800afe0 <__gethex+0x35c>
 800aef8:	1b9e      	subs	r6, r3, r6
 800aefa:	42b5      	cmp	r5, r6
 800aefc:	dc34      	bgt.n	800af68 <__gethex+0x2e4>
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	2b02      	cmp	r3, #2
 800af02:	d023      	beq.n	800af4c <__gethex+0x2c8>
 800af04:	2b03      	cmp	r3, #3
 800af06:	d025      	beq.n	800af54 <__gethex+0x2d0>
 800af08:	2b01      	cmp	r3, #1
 800af0a:	d115      	bne.n	800af38 <__gethex+0x2b4>
 800af0c:	42b5      	cmp	r5, r6
 800af0e:	d113      	bne.n	800af38 <__gethex+0x2b4>
 800af10:	2d01      	cmp	r5, #1
 800af12:	d10b      	bne.n	800af2c <__gethex+0x2a8>
 800af14:	9a02      	ldr	r2, [sp, #8]
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6013      	str	r3, [r2, #0]
 800af1a:	2301      	movs	r3, #1
 800af1c:	6123      	str	r3, [r4, #16]
 800af1e:	f8ca 3000 	str.w	r3, [sl]
 800af22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af24:	f04f 0862 	mov.w	r8, #98	; 0x62
 800af28:	601c      	str	r4, [r3, #0]
 800af2a:	e735      	b.n	800ad98 <__gethex+0x114>
 800af2c:	1e69      	subs	r1, r5, #1
 800af2e:	4620      	mov	r0, r4
 800af30:	f001 f8f0 	bl	800c114 <__any_on>
 800af34:	2800      	cmp	r0, #0
 800af36:	d1ed      	bne.n	800af14 <__gethex+0x290>
 800af38:	4621      	mov	r1, r4
 800af3a:	4648      	mov	r0, r9
 800af3c:	f000 fc9e 	bl	800b87c <_Bfree>
 800af40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800af42:	2300      	movs	r3, #0
 800af44:	6013      	str	r3, [r2, #0]
 800af46:	f04f 0850 	mov.w	r8, #80	; 0x50
 800af4a:	e725      	b.n	800ad98 <__gethex+0x114>
 800af4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d1f2      	bne.n	800af38 <__gethex+0x2b4>
 800af52:	e7df      	b.n	800af14 <__gethex+0x290>
 800af54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af56:	2b00      	cmp	r3, #0
 800af58:	d1dc      	bne.n	800af14 <__gethex+0x290>
 800af5a:	e7ed      	b.n	800af38 <__gethex+0x2b4>
 800af5c:	0800cab5 	.word	0x0800cab5
 800af60:	0800cc8d 	.word	0x0800cc8d
 800af64:	0800cc9e 	.word	0x0800cc9e
 800af68:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800af6c:	f1bb 0f00 	cmp.w	fp, #0
 800af70:	d133      	bne.n	800afda <__gethex+0x356>
 800af72:	f1b8 0f00 	cmp.w	r8, #0
 800af76:	d004      	beq.n	800af82 <__gethex+0x2fe>
 800af78:	4641      	mov	r1, r8
 800af7a:	4620      	mov	r0, r4
 800af7c:	f001 f8ca 	bl	800c114 <__any_on>
 800af80:	4683      	mov	fp, r0
 800af82:	ea4f 1268 	mov.w	r2, r8, asr #5
 800af86:	2301      	movs	r3, #1
 800af88:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800af8c:	f008 081f 	and.w	r8, r8, #31
 800af90:	fa03 f308 	lsl.w	r3, r3, r8
 800af94:	4213      	tst	r3, r2
 800af96:	4631      	mov	r1, r6
 800af98:	4620      	mov	r0, r4
 800af9a:	bf18      	it	ne
 800af9c:	f04b 0b02 	orrne.w	fp, fp, #2
 800afa0:	1bad      	subs	r5, r5, r6
 800afa2:	f7ff fe07 	bl	800abb4 <rshift>
 800afa6:	687e      	ldr	r6, [r7, #4]
 800afa8:	f04f 0802 	mov.w	r8, #2
 800afac:	f1bb 0f00 	cmp.w	fp, #0
 800afb0:	d04a      	beq.n	800b048 <__gethex+0x3c4>
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	2b02      	cmp	r3, #2
 800afb6:	d016      	beq.n	800afe6 <__gethex+0x362>
 800afb8:	2b03      	cmp	r3, #3
 800afba:	d018      	beq.n	800afee <__gethex+0x36a>
 800afbc:	2b01      	cmp	r3, #1
 800afbe:	d109      	bne.n	800afd4 <__gethex+0x350>
 800afc0:	f01b 0f02 	tst.w	fp, #2
 800afc4:	d006      	beq.n	800afd4 <__gethex+0x350>
 800afc6:	f8da 3000 	ldr.w	r3, [sl]
 800afca:	ea4b 0b03 	orr.w	fp, fp, r3
 800afce:	f01b 0f01 	tst.w	fp, #1
 800afd2:	d10f      	bne.n	800aff4 <__gethex+0x370>
 800afd4:	f048 0810 	orr.w	r8, r8, #16
 800afd8:	e036      	b.n	800b048 <__gethex+0x3c4>
 800afda:	f04f 0b01 	mov.w	fp, #1
 800afde:	e7d0      	b.n	800af82 <__gethex+0x2fe>
 800afe0:	f04f 0801 	mov.w	r8, #1
 800afe4:	e7e2      	b.n	800afac <__gethex+0x328>
 800afe6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800afe8:	f1c3 0301 	rsb	r3, r3, #1
 800afec:	930f      	str	r3, [sp, #60]	; 0x3c
 800afee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d0ef      	beq.n	800afd4 <__gethex+0x350>
 800aff4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800aff8:	f104 0214 	add.w	r2, r4, #20
 800affc:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800b000:	9301      	str	r3, [sp, #4]
 800b002:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800b006:	2300      	movs	r3, #0
 800b008:	4694      	mov	ip, r2
 800b00a:	f852 1b04 	ldr.w	r1, [r2], #4
 800b00e:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800b012:	d01e      	beq.n	800b052 <__gethex+0x3ce>
 800b014:	3101      	adds	r1, #1
 800b016:	f8cc 1000 	str.w	r1, [ip]
 800b01a:	f1b8 0f02 	cmp.w	r8, #2
 800b01e:	f104 0214 	add.w	r2, r4, #20
 800b022:	d13d      	bne.n	800b0a0 <__gethex+0x41c>
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	3b01      	subs	r3, #1
 800b028:	42ab      	cmp	r3, r5
 800b02a:	d10b      	bne.n	800b044 <__gethex+0x3c0>
 800b02c:	1169      	asrs	r1, r5, #5
 800b02e:	2301      	movs	r3, #1
 800b030:	f005 051f 	and.w	r5, r5, #31
 800b034:	fa03 f505 	lsl.w	r5, r3, r5
 800b038:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b03c:	421d      	tst	r5, r3
 800b03e:	bf18      	it	ne
 800b040:	f04f 0801 	movne.w	r8, #1
 800b044:	f048 0820 	orr.w	r8, r8, #32
 800b048:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b04a:	601c      	str	r4, [r3, #0]
 800b04c:	9b02      	ldr	r3, [sp, #8]
 800b04e:	601e      	str	r6, [r3, #0]
 800b050:	e6a2      	b.n	800ad98 <__gethex+0x114>
 800b052:	4290      	cmp	r0, r2
 800b054:	f842 3c04 	str.w	r3, [r2, #-4]
 800b058:	d8d6      	bhi.n	800b008 <__gethex+0x384>
 800b05a:	68a2      	ldr	r2, [r4, #8]
 800b05c:	4593      	cmp	fp, r2
 800b05e:	db17      	blt.n	800b090 <__gethex+0x40c>
 800b060:	6861      	ldr	r1, [r4, #4]
 800b062:	4648      	mov	r0, r9
 800b064:	3101      	adds	r1, #1
 800b066:	f000 fbc9 	bl	800b7fc <_Balloc>
 800b06a:	4682      	mov	sl, r0
 800b06c:	b918      	cbnz	r0, 800b076 <__gethex+0x3f2>
 800b06e:	4b1b      	ldr	r3, [pc, #108]	; (800b0dc <__gethex+0x458>)
 800b070:	4602      	mov	r2, r0
 800b072:	2184      	movs	r1, #132	; 0x84
 800b074:	e6b3      	b.n	800adde <__gethex+0x15a>
 800b076:	6922      	ldr	r2, [r4, #16]
 800b078:	3202      	adds	r2, #2
 800b07a:	f104 010c 	add.w	r1, r4, #12
 800b07e:	0092      	lsls	r2, r2, #2
 800b080:	300c      	adds	r0, #12
 800b082:	f7fe fefe 	bl	8009e82 <memcpy>
 800b086:	4621      	mov	r1, r4
 800b088:	4648      	mov	r0, r9
 800b08a:	f000 fbf7 	bl	800b87c <_Bfree>
 800b08e:	4654      	mov	r4, sl
 800b090:	6922      	ldr	r2, [r4, #16]
 800b092:	1c51      	adds	r1, r2, #1
 800b094:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b098:	6121      	str	r1, [r4, #16]
 800b09a:	2101      	movs	r1, #1
 800b09c:	6151      	str	r1, [r2, #20]
 800b09e:	e7bc      	b.n	800b01a <__gethex+0x396>
 800b0a0:	6921      	ldr	r1, [r4, #16]
 800b0a2:	4559      	cmp	r1, fp
 800b0a4:	dd0b      	ble.n	800b0be <__gethex+0x43a>
 800b0a6:	2101      	movs	r1, #1
 800b0a8:	4620      	mov	r0, r4
 800b0aa:	f7ff fd83 	bl	800abb4 <rshift>
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	3601      	adds	r6, #1
 800b0b2:	42b3      	cmp	r3, r6
 800b0b4:	f6ff aedb 	blt.w	800ae6e <__gethex+0x1ea>
 800b0b8:	f04f 0801 	mov.w	r8, #1
 800b0bc:	e7c2      	b.n	800b044 <__gethex+0x3c0>
 800b0be:	f015 051f 	ands.w	r5, r5, #31
 800b0c2:	d0f9      	beq.n	800b0b8 <__gethex+0x434>
 800b0c4:	9b01      	ldr	r3, [sp, #4]
 800b0c6:	441a      	add	r2, r3
 800b0c8:	f1c5 0520 	rsb	r5, r5, #32
 800b0cc:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800b0d0:	f000 fc86 	bl	800b9e0 <__hi0bits>
 800b0d4:	42a8      	cmp	r0, r5
 800b0d6:	dbe6      	blt.n	800b0a6 <__gethex+0x422>
 800b0d8:	e7ee      	b.n	800b0b8 <__gethex+0x434>
 800b0da:	bf00      	nop
 800b0dc:	0800cc8d 	.word	0x0800cc8d

0800b0e0 <L_shift>:
 800b0e0:	f1c2 0208 	rsb	r2, r2, #8
 800b0e4:	0092      	lsls	r2, r2, #2
 800b0e6:	b570      	push	{r4, r5, r6, lr}
 800b0e8:	f1c2 0620 	rsb	r6, r2, #32
 800b0ec:	6843      	ldr	r3, [r0, #4]
 800b0ee:	6804      	ldr	r4, [r0, #0]
 800b0f0:	fa03 f506 	lsl.w	r5, r3, r6
 800b0f4:	432c      	orrs	r4, r5
 800b0f6:	40d3      	lsrs	r3, r2
 800b0f8:	6004      	str	r4, [r0, #0]
 800b0fa:	f840 3f04 	str.w	r3, [r0, #4]!
 800b0fe:	4288      	cmp	r0, r1
 800b100:	d3f4      	bcc.n	800b0ec <L_shift+0xc>
 800b102:	bd70      	pop	{r4, r5, r6, pc}

0800b104 <__match>:
 800b104:	b530      	push	{r4, r5, lr}
 800b106:	6803      	ldr	r3, [r0, #0]
 800b108:	3301      	adds	r3, #1
 800b10a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b10e:	b914      	cbnz	r4, 800b116 <__match+0x12>
 800b110:	6003      	str	r3, [r0, #0]
 800b112:	2001      	movs	r0, #1
 800b114:	bd30      	pop	{r4, r5, pc}
 800b116:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b11a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b11e:	2d19      	cmp	r5, #25
 800b120:	bf98      	it	ls
 800b122:	3220      	addls	r2, #32
 800b124:	42a2      	cmp	r2, r4
 800b126:	d0f0      	beq.n	800b10a <__match+0x6>
 800b128:	2000      	movs	r0, #0
 800b12a:	e7f3      	b.n	800b114 <__match+0x10>

0800b12c <__hexnan>:
 800b12c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b130:	680b      	ldr	r3, [r1, #0]
 800b132:	6801      	ldr	r1, [r0, #0]
 800b134:	115e      	asrs	r6, r3, #5
 800b136:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b13a:	f013 031f 	ands.w	r3, r3, #31
 800b13e:	b087      	sub	sp, #28
 800b140:	bf18      	it	ne
 800b142:	3604      	addne	r6, #4
 800b144:	2500      	movs	r5, #0
 800b146:	1f37      	subs	r7, r6, #4
 800b148:	4682      	mov	sl, r0
 800b14a:	4690      	mov	r8, r2
 800b14c:	9301      	str	r3, [sp, #4]
 800b14e:	f846 5c04 	str.w	r5, [r6, #-4]
 800b152:	46b9      	mov	r9, r7
 800b154:	463c      	mov	r4, r7
 800b156:	9502      	str	r5, [sp, #8]
 800b158:	46ab      	mov	fp, r5
 800b15a:	784a      	ldrb	r2, [r1, #1]
 800b15c:	1c4b      	adds	r3, r1, #1
 800b15e:	9303      	str	r3, [sp, #12]
 800b160:	b342      	cbz	r2, 800b1b4 <__hexnan+0x88>
 800b162:	4610      	mov	r0, r2
 800b164:	9105      	str	r1, [sp, #20]
 800b166:	9204      	str	r2, [sp, #16]
 800b168:	f7ff fd76 	bl	800ac58 <__hexdig_fun>
 800b16c:	2800      	cmp	r0, #0
 800b16e:	d14f      	bne.n	800b210 <__hexnan+0xe4>
 800b170:	9a04      	ldr	r2, [sp, #16]
 800b172:	9905      	ldr	r1, [sp, #20]
 800b174:	2a20      	cmp	r2, #32
 800b176:	d818      	bhi.n	800b1aa <__hexnan+0x7e>
 800b178:	9b02      	ldr	r3, [sp, #8]
 800b17a:	459b      	cmp	fp, r3
 800b17c:	dd13      	ble.n	800b1a6 <__hexnan+0x7a>
 800b17e:	454c      	cmp	r4, r9
 800b180:	d206      	bcs.n	800b190 <__hexnan+0x64>
 800b182:	2d07      	cmp	r5, #7
 800b184:	dc04      	bgt.n	800b190 <__hexnan+0x64>
 800b186:	462a      	mov	r2, r5
 800b188:	4649      	mov	r1, r9
 800b18a:	4620      	mov	r0, r4
 800b18c:	f7ff ffa8 	bl	800b0e0 <L_shift>
 800b190:	4544      	cmp	r4, r8
 800b192:	d950      	bls.n	800b236 <__hexnan+0x10a>
 800b194:	2300      	movs	r3, #0
 800b196:	f1a4 0904 	sub.w	r9, r4, #4
 800b19a:	f844 3c04 	str.w	r3, [r4, #-4]
 800b19e:	f8cd b008 	str.w	fp, [sp, #8]
 800b1a2:	464c      	mov	r4, r9
 800b1a4:	461d      	mov	r5, r3
 800b1a6:	9903      	ldr	r1, [sp, #12]
 800b1a8:	e7d7      	b.n	800b15a <__hexnan+0x2e>
 800b1aa:	2a29      	cmp	r2, #41	; 0x29
 800b1ac:	d155      	bne.n	800b25a <__hexnan+0x12e>
 800b1ae:	3102      	adds	r1, #2
 800b1b0:	f8ca 1000 	str.w	r1, [sl]
 800b1b4:	f1bb 0f00 	cmp.w	fp, #0
 800b1b8:	d04f      	beq.n	800b25a <__hexnan+0x12e>
 800b1ba:	454c      	cmp	r4, r9
 800b1bc:	d206      	bcs.n	800b1cc <__hexnan+0xa0>
 800b1be:	2d07      	cmp	r5, #7
 800b1c0:	dc04      	bgt.n	800b1cc <__hexnan+0xa0>
 800b1c2:	462a      	mov	r2, r5
 800b1c4:	4649      	mov	r1, r9
 800b1c6:	4620      	mov	r0, r4
 800b1c8:	f7ff ff8a 	bl	800b0e0 <L_shift>
 800b1cc:	4544      	cmp	r4, r8
 800b1ce:	d934      	bls.n	800b23a <__hexnan+0x10e>
 800b1d0:	f1a8 0204 	sub.w	r2, r8, #4
 800b1d4:	4623      	mov	r3, r4
 800b1d6:	f853 1b04 	ldr.w	r1, [r3], #4
 800b1da:	f842 1f04 	str.w	r1, [r2, #4]!
 800b1de:	429f      	cmp	r7, r3
 800b1e0:	d2f9      	bcs.n	800b1d6 <__hexnan+0xaa>
 800b1e2:	1b3b      	subs	r3, r7, r4
 800b1e4:	f023 0303 	bic.w	r3, r3, #3
 800b1e8:	3304      	adds	r3, #4
 800b1ea:	3e03      	subs	r6, #3
 800b1ec:	3401      	adds	r4, #1
 800b1ee:	42a6      	cmp	r6, r4
 800b1f0:	bf38      	it	cc
 800b1f2:	2304      	movcc	r3, #4
 800b1f4:	4443      	add	r3, r8
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	f843 2b04 	str.w	r2, [r3], #4
 800b1fc:	429f      	cmp	r7, r3
 800b1fe:	d2fb      	bcs.n	800b1f8 <__hexnan+0xcc>
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	b91b      	cbnz	r3, 800b20c <__hexnan+0xe0>
 800b204:	4547      	cmp	r7, r8
 800b206:	d126      	bne.n	800b256 <__hexnan+0x12a>
 800b208:	2301      	movs	r3, #1
 800b20a:	603b      	str	r3, [r7, #0]
 800b20c:	2005      	movs	r0, #5
 800b20e:	e025      	b.n	800b25c <__hexnan+0x130>
 800b210:	3501      	adds	r5, #1
 800b212:	2d08      	cmp	r5, #8
 800b214:	f10b 0b01 	add.w	fp, fp, #1
 800b218:	dd06      	ble.n	800b228 <__hexnan+0xfc>
 800b21a:	4544      	cmp	r4, r8
 800b21c:	d9c3      	bls.n	800b1a6 <__hexnan+0x7a>
 800b21e:	2300      	movs	r3, #0
 800b220:	f844 3c04 	str.w	r3, [r4, #-4]
 800b224:	2501      	movs	r5, #1
 800b226:	3c04      	subs	r4, #4
 800b228:	6822      	ldr	r2, [r4, #0]
 800b22a:	f000 000f 	and.w	r0, r0, #15
 800b22e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b232:	6020      	str	r0, [r4, #0]
 800b234:	e7b7      	b.n	800b1a6 <__hexnan+0x7a>
 800b236:	2508      	movs	r5, #8
 800b238:	e7b5      	b.n	800b1a6 <__hexnan+0x7a>
 800b23a:	9b01      	ldr	r3, [sp, #4]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d0df      	beq.n	800b200 <__hexnan+0xd4>
 800b240:	f1c3 0320 	rsb	r3, r3, #32
 800b244:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b248:	40da      	lsrs	r2, r3
 800b24a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b24e:	4013      	ands	r3, r2
 800b250:	f846 3c04 	str.w	r3, [r6, #-4]
 800b254:	e7d4      	b.n	800b200 <__hexnan+0xd4>
 800b256:	3f04      	subs	r7, #4
 800b258:	e7d2      	b.n	800b200 <__hexnan+0xd4>
 800b25a:	2004      	movs	r0, #4
 800b25c:	b007      	add	sp, #28
 800b25e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b262 <__ssputs_r>:
 800b262:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b266:	688e      	ldr	r6, [r1, #8]
 800b268:	461f      	mov	r7, r3
 800b26a:	42be      	cmp	r6, r7
 800b26c:	680b      	ldr	r3, [r1, #0]
 800b26e:	4682      	mov	sl, r0
 800b270:	460c      	mov	r4, r1
 800b272:	4690      	mov	r8, r2
 800b274:	d82c      	bhi.n	800b2d0 <__ssputs_r+0x6e>
 800b276:	898a      	ldrh	r2, [r1, #12]
 800b278:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b27c:	d026      	beq.n	800b2cc <__ssputs_r+0x6a>
 800b27e:	6965      	ldr	r5, [r4, #20]
 800b280:	6909      	ldr	r1, [r1, #16]
 800b282:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b286:	eba3 0901 	sub.w	r9, r3, r1
 800b28a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b28e:	1c7b      	adds	r3, r7, #1
 800b290:	444b      	add	r3, r9
 800b292:	106d      	asrs	r5, r5, #1
 800b294:	429d      	cmp	r5, r3
 800b296:	bf38      	it	cc
 800b298:	461d      	movcc	r5, r3
 800b29a:	0553      	lsls	r3, r2, #21
 800b29c:	d527      	bpl.n	800b2ee <__ssputs_r+0x8c>
 800b29e:	4629      	mov	r1, r5
 800b2a0:	f000 f960 	bl	800b564 <_malloc_r>
 800b2a4:	4606      	mov	r6, r0
 800b2a6:	b360      	cbz	r0, 800b302 <__ssputs_r+0xa0>
 800b2a8:	6921      	ldr	r1, [r4, #16]
 800b2aa:	464a      	mov	r2, r9
 800b2ac:	f7fe fde9 	bl	8009e82 <memcpy>
 800b2b0:	89a3      	ldrh	r3, [r4, #12]
 800b2b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b2b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2ba:	81a3      	strh	r3, [r4, #12]
 800b2bc:	6126      	str	r6, [r4, #16]
 800b2be:	6165      	str	r5, [r4, #20]
 800b2c0:	444e      	add	r6, r9
 800b2c2:	eba5 0509 	sub.w	r5, r5, r9
 800b2c6:	6026      	str	r6, [r4, #0]
 800b2c8:	60a5      	str	r5, [r4, #8]
 800b2ca:	463e      	mov	r6, r7
 800b2cc:	42be      	cmp	r6, r7
 800b2ce:	d900      	bls.n	800b2d2 <__ssputs_r+0x70>
 800b2d0:	463e      	mov	r6, r7
 800b2d2:	6820      	ldr	r0, [r4, #0]
 800b2d4:	4632      	mov	r2, r6
 800b2d6:	4641      	mov	r1, r8
 800b2d8:	f000 ffbc 	bl	800c254 <memmove>
 800b2dc:	68a3      	ldr	r3, [r4, #8]
 800b2de:	1b9b      	subs	r3, r3, r6
 800b2e0:	60a3      	str	r3, [r4, #8]
 800b2e2:	6823      	ldr	r3, [r4, #0]
 800b2e4:	4433      	add	r3, r6
 800b2e6:	6023      	str	r3, [r4, #0]
 800b2e8:	2000      	movs	r0, #0
 800b2ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2ee:	462a      	mov	r2, r5
 800b2f0:	f000 ff74 	bl	800c1dc <_realloc_r>
 800b2f4:	4606      	mov	r6, r0
 800b2f6:	2800      	cmp	r0, #0
 800b2f8:	d1e0      	bne.n	800b2bc <__ssputs_r+0x5a>
 800b2fa:	6921      	ldr	r1, [r4, #16]
 800b2fc:	4650      	mov	r0, sl
 800b2fe:	f001 f84d 	bl	800c39c <_free_r>
 800b302:	230c      	movs	r3, #12
 800b304:	f8ca 3000 	str.w	r3, [sl]
 800b308:	89a3      	ldrh	r3, [r4, #12]
 800b30a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b30e:	81a3      	strh	r3, [r4, #12]
 800b310:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b314:	e7e9      	b.n	800b2ea <__ssputs_r+0x88>
	...

0800b318 <_svfiprintf_r>:
 800b318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b31c:	4698      	mov	r8, r3
 800b31e:	898b      	ldrh	r3, [r1, #12]
 800b320:	061b      	lsls	r3, r3, #24
 800b322:	b09d      	sub	sp, #116	; 0x74
 800b324:	4607      	mov	r7, r0
 800b326:	460d      	mov	r5, r1
 800b328:	4614      	mov	r4, r2
 800b32a:	d50e      	bpl.n	800b34a <_svfiprintf_r+0x32>
 800b32c:	690b      	ldr	r3, [r1, #16]
 800b32e:	b963      	cbnz	r3, 800b34a <_svfiprintf_r+0x32>
 800b330:	2140      	movs	r1, #64	; 0x40
 800b332:	f000 f917 	bl	800b564 <_malloc_r>
 800b336:	6028      	str	r0, [r5, #0]
 800b338:	6128      	str	r0, [r5, #16]
 800b33a:	b920      	cbnz	r0, 800b346 <_svfiprintf_r+0x2e>
 800b33c:	230c      	movs	r3, #12
 800b33e:	603b      	str	r3, [r7, #0]
 800b340:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b344:	e0d0      	b.n	800b4e8 <_svfiprintf_r+0x1d0>
 800b346:	2340      	movs	r3, #64	; 0x40
 800b348:	616b      	str	r3, [r5, #20]
 800b34a:	2300      	movs	r3, #0
 800b34c:	9309      	str	r3, [sp, #36]	; 0x24
 800b34e:	2320      	movs	r3, #32
 800b350:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b354:	f8cd 800c 	str.w	r8, [sp, #12]
 800b358:	2330      	movs	r3, #48	; 0x30
 800b35a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b500 <_svfiprintf_r+0x1e8>
 800b35e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b362:	f04f 0901 	mov.w	r9, #1
 800b366:	4623      	mov	r3, r4
 800b368:	469a      	mov	sl, r3
 800b36a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b36e:	b10a      	cbz	r2, 800b374 <_svfiprintf_r+0x5c>
 800b370:	2a25      	cmp	r2, #37	; 0x25
 800b372:	d1f9      	bne.n	800b368 <_svfiprintf_r+0x50>
 800b374:	ebba 0b04 	subs.w	fp, sl, r4
 800b378:	d00b      	beq.n	800b392 <_svfiprintf_r+0x7a>
 800b37a:	465b      	mov	r3, fp
 800b37c:	4622      	mov	r2, r4
 800b37e:	4629      	mov	r1, r5
 800b380:	4638      	mov	r0, r7
 800b382:	f7ff ff6e 	bl	800b262 <__ssputs_r>
 800b386:	3001      	adds	r0, #1
 800b388:	f000 80a9 	beq.w	800b4de <_svfiprintf_r+0x1c6>
 800b38c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b38e:	445a      	add	r2, fp
 800b390:	9209      	str	r2, [sp, #36]	; 0x24
 800b392:	f89a 3000 	ldrb.w	r3, [sl]
 800b396:	2b00      	cmp	r3, #0
 800b398:	f000 80a1 	beq.w	800b4de <_svfiprintf_r+0x1c6>
 800b39c:	2300      	movs	r3, #0
 800b39e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b3a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b3a6:	f10a 0a01 	add.w	sl, sl, #1
 800b3aa:	9304      	str	r3, [sp, #16]
 800b3ac:	9307      	str	r3, [sp, #28]
 800b3ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b3b2:	931a      	str	r3, [sp, #104]	; 0x68
 800b3b4:	4654      	mov	r4, sl
 800b3b6:	2205      	movs	r2, #5
 800b3b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3bc:	4850      	ldr	r0, [pc, #320]	; (800b500 <_svfiprintf_r+0x1e8>)
 800b3be:	f7f4 ff27 	bl	8000210 <memchr>
 800b3c2:	9a04      	ldr	r2, [sp, #16]
 800b3c4:	b9d8      	cbnz	r0, 800b3fe <_svfiprintf_r+0xe6>
 800b3c6:	06d0      	lsls	r0, r2, #27
 800b3c8:	bf44      	itt	mi
 800b3ca:	2320      	movmi	r3, #32
 800b3cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b3d0:	0711      	lsls	r1, r2, #28
 800b3d2:	bf44      	itt	mi
 800b3d4:	232b      	movmi	r3, #43	; 0x2b
 800b3d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b3da:	f89a 3000 	ldrb.w	r3, [sl]
 800b3de:	2b2a      	cmp	r3, #42	; 0x2a
 800b3e0:	d015      	beq.n	800b40e <_svfiprintf_r+0xf6>
 800b3e2:	9a07      	ldr	r2, [sp, #28]
 800b3e4:	4654      	mov	r4, sl
 800b3e6:	2000      	movs	r0, #0
 800b3e8:	f04f 0c0a 	mov.w	ip, #10
 800b3ec:	4621      	mov	r1, r4
 800b3ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b3f2:	3b30      	subs	r3, #48	; 0x30
 800b3f4:	2b09      	cmp	r3, #9
 800b3f6:	d94d      	bls.n	800b494 <_svfiprintf_r+0x17c>
 800b3f8:	b1b0      	cbz	r0, 800b428 <_svfiprintf_r+0x110>
 800b3fa:	9207      	str	r2, [sp, #28]
 800b3fc:	e014      	b.n	800b428 <_svfiprintf_r+0x110>
 800b3fe:	eba0 0308 	sub.w	r3, r0, r8
 800b402:	fa09 f303 	lsl.w	r3, r9, r3
 800b406:	4313      	orrs	r3, r2
 800b408:	9304      	str	r3, [sp, #16]
 800b40a:	46a2      	mov	sl, r4
 800b40c:	e7d2      	b.n	800b3b4 <_svfiprintf_r+0x9c>
 800b40e:	9b03      	ldr	r3, [sp, #12]
 800b410:	1d19      	adds	r1, r3, #4
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	9103      	str	r1, [sp, #12]
 800b416:	2b00      	cmp	r3, #0
 800b418:	bfbb      	ittet	lt
 800b41a:	425b      	neglt	r3, r3
 800b41c:	f042 0202 	orrlt.w	r2, r2, #2
 800b420:	9307      	strge	r3, [sp, #28]
 800b422:	9307      	strlt	r3, [sp, #28]
 800b424:	bfb8      	it	lt
 800b426:	9204      	strlt	r2, [sp, #16]
 800b428:	7823      	ldrb	r3, [r4, #0]
 800b42a:	2b2e      	cmp	r3, #46	; 0x2e
 800b42c:	d10c      	bne.n	800b448 <_svfiprintf_r+0x130>
 800b42e:	7863      	ldrb	r3, [r4, #1]
 800b430:	2b2a      	cmp	r3, #42	; 0x2a
 800b432:	d134      	bne.n	800b49e <_svfiprintf_r+0x186>
 800b434:	9b03      	ldr	r3, [sp, #12]
 800b436:	1d1a      	adds	r2, r3, #4
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	9203      	str	r2, [sp, #12]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	bfb8      	it	lt
 800b440:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b444:	3402      	adds	r4, #2
 800b446:	9305      	str	r3, [sp, #20]
 800b448:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b510 <_svfiprintf_r+0x1f8>
 800b44c:	7821      	ldrb	r1, [r4, #0]
 800b44e:	2203      	movs	r2, #3
 800b450:	4650      	mov	r0, sl
 800b452:	f7f4 fedd 	bl	8000210 <memchr>
 800b456:	b138      	cbz	r0, 800b468 <_svfiprintf_r+0x150>
 800b458:	9b04      	ldr	r3, [sp, #16]
 800b45a:	eba0 000a 	sub.w	r0, r0, sl
 800b45e:	2240      	movs	r2, #64	; 0x40
 800b460:	4082      	lsls	r2, r0
 800b462:	4313      	orrs	r3, r2
 800b464:	3401      	adds	r4, #1
 800b466:	9304      	str	r3, [sp, #16]
 800b468:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b46c:	4825      	ldr	r0, [pc, #148]	; (800b504 <_svfiprintf_r+0x1ec>)
 800b46e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b472:	2206      	movs	r2, #6
 800b474:	f7f4 fecc 	bl	8000210 <memchr>
 800b478:	2800      	cmp	r0, #0
 800b47a:	d038      	beq.n	800b4ee <_svfiprintf_r+0x1d6>
 800b47c:	4b22      	ldr	r3, [pc, #136]	; (800b508 <_svfiprintf_r+0x1f0>)
 800b47e:	bb1b      	cbnz	r3, 800b4c8 <_svfiprintf_r+0x1b0>
 800b480:	9b03      	ldr	r3, [sp, #12]
 800b482:	3307      	adds	r3, #7
 800b484:	f023 0307 	bic.w	r3, r3, #7
 800b488:	3308      	adds	r3, #8
 800b48a:	9303      	str	r3, [sp, #12]
 800b48c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b48e:	4433      	add	r3, r6
 800b490:	9309      	str	r3, [sp, #36]	; 0x24
 800b492:	e768      	b.n	800b366 <_svfiprintf_r+0x4e>
 800b494:	fb0c 3202 	mla	r2, ip, r2, r3
 800b498:	460c      	mov	r4, r1
 800b49a:	2001      	movs	r0, #1
 800b49c:	e7a6      	b.n	800b3ec <_svfiprintf_r+0xd4>
 800b49e:	2300      	movs	r3, #0
 800b4a0:	3401      	adds	r4, #1
 800b4a2:	9305      	str	r3, [sp, #20]
 800b4a4:	4619      	mov	r1, r3
 800b4a6:	f04f 0c0a 	mov.w	ip, #10
 800b4aa:	4620      	mov	r0, r4
 800b4ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b4b0:	3a30      	subs	r2, #48	; 0x30
 800b4b2:	2a09      	cmp	r2, #9
 800b4b4:	d903      	bls.n	800b4be <_svfiprintf_r+0x1a6>
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d0c6      	beq.n	800b448 <_svfiprintf_r+0x130>
 800b4ba:	9105      	str	r1, [sp, #20]
 800b4bc:	e7c4      	b.n	800b448 <_svfiprintf_r+0x130>
 800b4be:	fb0c 2101 	mla	r1, ip, r1, r2
 800b4c2:	4604      	mov	r4, r0
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	e7f0      	b.n	800b4aa <_svfiprintf_r+0x192>
 800b4c8:	ab03      	add	r3, sp, #12
 800b4ca:	9300      	str	r3, [sp, #0]
 800b4cc:	462a      	mov	r2, r5
 800b4ce:	4b0f      	ldr	r3, [pc, #60]	; (800b50c <_svfiprintf_r+0x1f4>)
 800b4d0:	a904      	add	r1, sp, #16
 800b4d2:	4638      	mov	r0, r7
 800b4d4:	f7fc ff20 	bl	8008318 <_printf_float>
 800b4d8:	1c42      	adds	r2, r0, #1
 800b4da:	4606      	mov	r6, r0
 800b4dc:	d1d6      	bne.n	800b48c <_svfiprintf_r+0x174>
 800b4de:	89ab      	ldrh	r3, [r5, #12]
 800b4e0:	065b      	lsls	r3, r3, #25
 800b4e2:	f53f af2d 	bmi.w	800b340 <_svfiprintf_r+0x28>
 800b4e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b4e8:	b01d      	add	sp, #116	; 0x74
 800b4ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4ee:	ab03      	add	r3, sp, #12
 800b4f0:	9300      	str	r3, [sp, #0]
 800b4f2:	462a      	mov	r2, r5
 800b4f4:	4b05      	ldr	r3, [pc, #20]	; (800b50c <_svfiprintf_r+0x1f4>)
 800b4f6:	a904      	add	r1, sp, #16
 800b4f8:	4638      	mov	r0, r7
 800b4fa:	f7fd f9b1 	bl	8008860 <_printf_i>
 800b4fe:	e7eb      	b.n	800b4d8 <_svfiprintf_r+0x1c0>
 800b500:	0800ccfe 	.word	0x0800ccfe
 800b504:	0800cd08 	.word	0x0800cd08
 800b508:	08008319 	.word	0x08008319
 800b50c:	0800b263 	.word	0x0800b263
 800b510:	0800cd04 	.word	0x0800cd04

0800b514 <malloc>:
 800b514:	4b02      	ldr	r3, [pc, #8]	; (800b520 <malloc+0xc>)
 800b516:	4601      	mov	r1, r0
 800b518:	6818      	ldr	r0, [r3, #0]
 800b51a:	f000 b823 	b.w	800b564 <_malloc_r>
 800b51e:	bf00      	nop
 800b520:	20000224 	.word	0x20000224

0800b524 <sbrk_aligned>:
 800b524:	b570      	push	{r4, r5, r6, lr}
 800b526:	4e0e      	ldr	r6, [pc, #56]	; (800b560 <sbrk_aligned+0x3c>)
 800b528:	460c      	mov	r4, r1
 800b52a:	6831      	ldr	r1, [r6, #0]
 800b52c:	4605      	mov	r5, r0
 800b52e:	b911      	cbnz	r1, 800b536 <sbrk_aligned+0x12>
 800b530:	f000 fede 	bl	800c2f0 <_sbrk_r>
 800b534:	6030      	str	r0, [r6, #0]
 800b536:	4621      	mov	r1, r4
 800b538:	4628      	mov	r0, r5
 800b53a:	f000 fed9 	bl	800c2f0 <_sbrk_r>
 800b53e:	1c43      	adds	r3, r0, #1
 800b540:	d00a      	beq.n	800b558 <sbrk_aligned+0x34>
 800b542:	1cc4      	adds	r4, r0, #3
 800b544:	f024 0403 	bic.w	r4, r4, #3
 800b548:	42a0      	cmp	r0, r4
 800b54a:	d007      	beq.n	800b55c <sbrk_aligned+0x38>
 800b54c:	1a21      	subs	r1, r4, r0
 800b54e:	4628      	mov	r0, r5
 800b550:	f000 fece 	bl	800c2f0 <_sbrk_r>
 800b554:	3001      	adds	r0, #1
 800b556:	d101      	bne.n	800b55c <sbrk_aligned+0x38>
 800b558:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b55c:	4620      	mov	r0, r4
 800b55e:	bd70      	pop	{r4, r5, r6, pc}
 800b560:	200005bc 	.word	0x200005bc

0800b564 <_malloc_r>:
 800b564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b568:	1ccd      	adds	r5, r1, #3
 800b56a:	f025 0503 	bic.w	r5, r5, #3
 800b56e:	3508      	adds	r5, #8
 800b570:	2d0c      	cmp	r5, #12
 800b572:	bf38      	it	cc
 800b574:	250c      	movcc	r5, #12
 800b576:	2d00      	cmp	r5, #0
 800b578:	4607      	mov	r7, r0
 800b57a:	db01      	blt.n	800b580 <_malloc_r+0x1c>
 800b57c:	42a9      	cmp	r1, r5
 800b57e:	d905      	bls.n	800b58c <_malloc_r+0x28>
 800b580:	230c      	movs	r3, #12
 800b582:	603b      	str	r3, [r7, #0]
 800b584:	2600      	movs	r6, #0
 800b586:	4630      	mov	r0, r6
 800b588:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b58c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b660 <_malloc_r+0xfc>
 800b590:	f000 f928 	bl	800b7e4 <__malloc_lock>
 800b594:	f8d8 3000 	ldr.w	r3, [r8]
 800b598:	461c      	mov	r4, r3
 800b59a:	bb5c      	cbnz	r4, 800b5f4 <_malloc_r+0x90>
 800b59c:	4629      	mov	r1, r5
 800b59e:	4638      	mov	r0, r7
 800b5a0:	f7ff ffc0 	bl	800b524 <sbrk_aligned>
 800b5a4:	1c43      	adds	r3, r0, #1
 800b5a6:	4604      	mov	r4, r0
 800b5a8:	d155      	bne.n	800b656 <_malloc_r+0xf2>
 800b5aa:	f8d8 4000 	ldr.w	r4, [r8]
 800b5ae:	4626      	mov	r6, r4
 800b5b0:	2e00      	cmp	r6, #0
 800b5b2:	d145      	bne.n	800b640 <_malloc_r+0xdc>
 800b5b4:	2c00      	cmp	r4, #0
 800b5b6:	d048      	beq.n	800b64a <_malloc_r+0xe6>
 800b5b8:	6823      	ldr	r3, [r4, #0]
 800b5ba:	4631      	mov	r1, r6
 800b5bc:	4638      	mov	r0, r7
 800b5be:	eb04 0903 	add.w	r9, r4, r3
 800b5c2:	f000 fe95 	bl	800c2f0 <_sbrk_r>
 800b5c6:	4581      	cmp	r9, r0
 800b5c8:	d13f      	bne.n	800b64a <_malloc_r+0xe6>
 800b5ca:	6821      	ldr	r1, [r4, #0]
 800b5cc:	1a6d      	subs	r5, r5, r1
 800b5ce:	4629      	mov	r1, r5
 800b5d0:	4638      	mov	r0, r7
 800b5d2:	f7ff ffa7 	bl	800b524 <sbrk_aligned>
 800b5d6:	3001      	adds	r0, #1
 800b5d8:	d037      	beq.n	800b64a <_malloc_r+0xe6>
 800b5da:	6823      	ldr	r3, [r4, #0]
 800b5dc:	442b      	add	r3, r5
 800b5de:	6023      	str	r3, [r4, #0]
 800b5e0:	f8d8 3000 	ldr.w	r3, [r8]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d038      	beq.n	800b65a <_malloc_r+0xf6>
 800b5e8:	685a      	ldr	r2, [r3, #4]
 800b5ea:	42a2      	cmp	r2, r4
 800b5ec:	d12b      	bne.n	800b646 <_malloc_r+0xe2>
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	605a      	str	r2, [r3, #4]
 800b5f2:	e00f      	b.n	800b614 <_malloc_r+0xb0>
 800b5f4:	6822      	ldr	r2, [r4, #0]
 800b5f6:	1b52      	subs	r2, r2, r5
 800b5f8:	d41f      	bmi.n	800b63a <_malloc_r+0xd6>
 800b5fa:	2a0b      	cmp	r2, #11
 800b5fc:	d917      	bls.n	800b62e <_malloc_r+0xca>
 800b5fe:	1961      	adds	r1, r4, r5
 800b600:	42a3      	cmp	r3, r4
 800b602:	6025      	str	r5, [r4, #0]
 800b604:	bf18      	it	ne
 800b606:	6059      	strne	r1, [r3, #4]
 800b608:	6863      	ldr	r3, [r4, #4]
 800b60a:	bf08      	it	eq
 800b60c:	f8c8 1000 	streq.w	r1, [r8]
 800b610:	5162      	str	r2, [r4, r5]
 800b612:	604b      	str	r3, [r1, #4]
 800b614:	4638      	mov	r0, r7
 800b616:	f104 060b 	add.w	r6, r4, #11
 800b61a:	f000 f8e9 	bl	800b7f0 <__malloc_unlock>
 800b61e:	f026 0607 	bic.w	r6, r6, #7
 800b622:	1d23      	adds	r3, r4, #4
 800b624:	1af2      	subs	r2, r6, r3
 800b626:	d0ae      	beq.n	800b586 <_malloc_r+0x22>
 800b628:	1b9b      	subs	r3, r3, r6
 800b62a:	50a3      	str	r3, [r4, r2]
 800b62c:	e7ab      	b.n	800b586 <_malloc_r+0x22>
 800b62e:	42a3      	cmp	r3, r4
 800b630:	6862      	ldr	r2, [r4, #4]
 800b632:	d1dd      	bne.n	800b5f0 <_malloc_r+0x8c>
 800b634:	f8c8 2000 	str.w	r2, [r8]
 800b638:	e7ec      	b.n	800b614 <_malloc_r+0xb0>
 800b63a:	4623      	mov	r3, r4
 800b63c:	6864      	ldr	r4, [r4, #4]
 800b63e:	e7ac      	b.n	800b59a <_malloc_r+0x36>
 800b640:	4634      	mov	r4, r6
 800b642:	6876      	ldr	r6, [r6, #4]
 800b644:	e7b4      	b.n	800b5b0 <_malloc_r+0x4c>
 800b646:	4613      	mov	r3, r2
 800b648:	e7cc      	b.n	800b5e4 <_malloc_r+0x80>
 800b64a:	230c      	movs	r3, #12
 800b64c:	603b      	str	r3, [r7, #0]
 800b64e:	4638      	mov	r0, r7
 800b650:	f000 f8ce 	bl	800b7f0 <__malloc_unlock>
 800b654:	e797      	b.n	800b586 <_malloc_r+0x22>
 800b656:	6025      	str	r5, [r4, #0]
 800b658:	e7dc      	b.n	800b614 <_malloc_r+0xb0>
 800b65a:	605b      	str	r3, [r3, #4]
 800b65c:	deff      	udf	#255	; 0xff
 800b65e:	bf00      	nop
 800b660:	200005b8 	.word	0x200005b8

0800b664 <__ascii_mbtowc>:
 800b664:	b082      	sub	sp, #8
 800b666:	b901      	cbnz	r1, 800b66a <__ascii_mbtowc+0x6>
 800b668:	a901      	add	r1, sp, #4
 800b66a:	b142      	cbz	r2, 800b67e <__ascii_mbtowc+0x1a>
 800b66c:	b14b      	cbz	r3, 800b682 <__ascii_mbtowc+0x1e>
 800b66e:	7813      	ldrb	r3, [r2, #0]
 800b670:	600b      	str	r3, [r1, #0]
 800b672:	7812      	ldrb	r2, [r2, #0]
 800b674:	1e10      	subs	r0, r2, #0
 800b676:	bf18      	it	ne
 800b678:	2001      	movne	r0, #1
 800b67a:	b002      	add	sp, #8
 800b67c:	4770      	bx	lr
 800b67e:	4610      	mov	r0, r2
 800b680:	e7fb      	b.n	800b67a <__ascii_mbtowc+0x16>
 800b682:	f06f 0001 	mvn.w	r0, #1
 800b686:	e7f8      	b.n	800b67a <__ascii_mbtowc+0x16>

0800b688 <__sflush_r>:
 800b688:	898a      	ldrh	r2, [r1, #12]
 800b68a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b68e:	4605      	mov	r5, r0
 800b690:	0710      	lsls	r0, r2, #28
 800b692:	460c      	mov	r4, r1
 800b694:	d458      	bmi.n	800b748 <__sflush_r+0xc0>
 800b696:	684b      	ldr	r3, [r1, #4]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	dc05      	bgt.n	800b6a8 <__sflush_r+0x20>
 800b69c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	dc02      	bgt.n	800b6a8 <__sflush_r+0x20>
 800b6a2:	2000      	movs	r0, #0
 800b6a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b6aa:	2e00      	cmp	r6, #0
 800b6ac:	d0f9      	beq.n	800b6a2 <__sflush_r+0x1a>
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b6b4:	682f      	ldr	r7, [r5, #0]
 800b6b6:	6a21      	ldr	r1, [r4, #32]
 800b6b8:	602b      	str	r3, [r5, #0]
 800b6ba:	d032      	beq.n	800b722 <__sflush_r+0x9a>
 800b6bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b6be:	89a3      	ldrh	r3, [r4, #12]
 800b6c0:	075a      	lsls	r2, r3, #29
 800b6c2:	d505      	bpl.n	800b6d0 <__sflush_r+0x48>
 800b6c4:	6863      	ldr	r3, [r4, #4]
 800b6c6:	1ac0      	subs	r0, r0, r3
 800b6c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b6ca:	b10b      	cbz	r3, 800b6d0 <__sflush_r+0x48>
 800b6cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b6ce:	1ac0      	subs	r0, r0, r3
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	4602      	mov	r2, r0
 800b6d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b6d6:	6a21      	ldr	r1, [r4, #32]
 800b6d8:	4628      	mov	r0, r5
 800b6da:	47b0      	blx	r6
 800b6dc:	1c43      	adds	r3, r0, #1
 800b6de:	89a3      	ldrh	r3, [r4, #12]
 800b6e0:	d106      	bne.n	800b6f0 <__sflush_r+0x68>
 800b6e2:	6829      	ldr	r1, [r5, #0]
 800b6e4:	291d      	cmp	r1, #29
 800b6e6:	d82b      	bhi.n	800b740 <__sflush_r+0xb8>
 800b6e8:	4a29      	ldr	r2, [pc, #164]	; (800b790 <__sflush_r+0x108>)
 800b6ea:	410a      	asrs	r2, r1
 800b6ec:	07d6      	lsls	r6, r2, #31
 800b6ee:	d427      	bmi.n	800b740 <__sflush_r+0xb8>
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	6062      	str	r2, [r4, #4]
 800b6f4:	04d9      	lsls	r1, r3, #19
 800b6f6:	6922      	ldr	r2, [r4, #16]
 800b6f8:	6022      	str	r2, [r4, #0]
 800b6fa:	d504      	bpl.n	800b706 <__sflush_r+0x7e>
 800b6fc:	1c42      	adds	r2, r0, #1
 800b6fe:	d101      	bne.n	800b704 <__sflush_r+0x7c>
 800b700:	682b      	ldr	r3, [r5, #0]
 800b702:	b903      	cbnz	r3, 800b706 <__sflush_r+0x7e>
 800b704:	6560      	str	r0, [r4, #84]	; 0x54
 800b706:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b708:	602f      	str	r7, [r5, #0]
 800b70a:	2900      	cmp	r1, #0
 800b70c:	d0c9      	beq.n	800b6a2 <__sflush_r+0x1a>
 800b70e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b712:	4299      	cmp	r1, r3
 800b714:	d002      	beq.n	800b71c <__sflush_r+0x94>
 800b716:	4628      	mov	r0, r5
 800b718:	f000 fe40 	bl	800c39c <_free_r>
 800b71c:	2000      	movs	r0, #0
 800b71e:	6360      	str	r0, [r4, #52]	; 0x34
 800b720:	e7c0      	b.n	800b6a4 <__sflush_r+0x1c>
 800b722:	2301      	movs	r3, #1
 800b724:	4628      	mov	r0, r5
 800b726:	47b0      	blx	r6
 800b728:	1c41      	adds	r1, r0, #1
 800b72a:	d1c8      	bne.n	800b6be <__sflush_r+0x36>
 800b72c:	682b      	ldr	r3, [r5, #0]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d0c5      	beq.n	800b6be <__sflush_r+0x36>
 800b732:	2b1d      	cmp	r3, #29
 800b734:	d001      	beq.n	800b73a <__sflush_r+0xb2>
 800b736:	2b16      	cmp	r3, #22
 800b738:	d101      	bne.n	800b73e <__sflush_r+0xb6>
 800b73a:	602f      	str	r7, [r5, #0]
 800b73c:	e7b1      	b.n	800b6a2 <__sflush_r+0x1a>
 800b73e:	89a3      	ldrh	r3, [r4, #12]
 800b740:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b744:	81a3      	strh	r3, [r4, #12]
 800b746:	e7ad      	b.n	800b6a4 <__sflush_r+0x1c>
 800b748:	690f      	ldr	r7, [r1, #16]
 800b74a:	2f00      	cmp	r7, #0
 800b74c:	d0a9      	beq.n	800b6a2 <__sflush_r+0x1a>
 800b74e:	0793      	lsls	r3, r2, #30
 800b750:	680e      	ldr	r6, [r1, #0]
 800b752:	bf08      	it	eq
 800b754:	694b      	ldreq	r3, [r1, #20]
 800b756:	600f      	str	r7, [r1, #0]
 800b758:	bf18      	it	ne
 800b75a:	2300      	movne	r3, #0
 800b75c:	eba6 0807 	sub.w	r8, r6, r7
 800b760:	608b      	str	r3, [r1, #8]
 800b762:	f1b8 0f00 	cmp.w	r8, #0
 800b766:	dd9c      	ble.n	800b6a2 <__sflush_r+0x1a>
 800b768:	6a21      	ldr	r1, [r4, #32]
 800b76a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b76c:	4643      	mov	r3, r8
 800b76e:	463a      	mov	r2, r7
 800b770:	4628      	mov	r0, r5
 800b772:	47b0      	blx	r6
 800b774:	2800      	cmp	r0, #0
 800b776:	dc06      	bgt.n	800b786 <__sflush_r+0xfe>
 800b778:	89a3      	ldrh	r3, [r4, #12]
 800b77a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b77e:	81a3      	strh	r3, [r4, #12]
 800b780:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b784:	e78e      	b.n	800b6a4 <__sflush_r+0x1c>
 800b786:	4407      	add	r7, r0
 800b788:	eba8 0800 	sub.w	r8, r8, r0
 800b78c:	e7e9      	b.n	800b762 <__sflush_r+0xda>
 800b78e:	bf00      	nop
 800b790:	dfbffffe 	.word	0xdfbffffe

0800b794 <_fflush_r>:
 800b794:	b538      	push	{r3, r4, r5, lr}
 800b796:	690b      	ldr	r3, [r1, #16]
 800b798:	4605      	mov	r5, r0
 800b79a:	460c      	mov	r4, r1
 800b79c:	b913      	cbnz	r3, 800b7a4 <_fflush_r+0x10>
 800b79e:	2500      	movs	r5, #0
 800b7a0:	4628      	mov	r0, r5
 800b7a2:	bd38      	pop	{r3, r4, r5, pc}
 800b7a4:	b118      	cbz	r0, 800b7ae <_fflush_r+0x1a>
 800b7a6:	6a03      	ldr	r3, [r0, #32]
 800b7a8:	b90b      	cbnz	r3, 800b7ae <_fflush_r+0x1a>
 800b7aa:	f7fd fc37 	bl	800901c <__sinit>
 800b7ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d0f3      	beq.n	800b79e <_fflush_r+0xa>
 800b7b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b7b8:	07d0      	lsls	r0, r2, #31
 800b7ba:	d404      	bmi.n	800b7c6 <_fflush_r+0x32>
 800b7bc:	0599      	lsls	r1, r3, #22
 800b7be:	d402      	bmi.n	800b7c6 <_fflush_r+0x32>
 800b7c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b7c2:	f7fe fb5c 	bl	8009e7e <__retarget_lock_acquire_recursive>
 800b7c6:	4628      	mov	r0, r5
 800b7c8:	4621      	mov	r1, r4
 800b7ca:	f7ff ff5d 	bl	800b688 <__sflush_r>
 800b7ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b7d0:	07da      	lsls	r2, r3, #31
 800b7d2:	4605      	mov	r5, r0
 800b7d4:	d4e4      	bmi.n	800b7a0 <_fflush_r+0xc>
 800b7d6:	89a3      	ldrh	r3, [r4, #12]
 800b7d8:	059b      	lsls	r3, r3, #22
 800b7da:	d4e1      	bmi.n	800b7a0 <_fflush_r+0xc>
 800b7dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b7de:	f7fe fb4f 	bl	8009e80 <__retarget_lock_release_recursive>
 800b7e2:	e7dd      	b.n	800b7a0 <_fflush_r+0xc>

0800b7e4 <__malloc_lock>:
 800b7e4:	4801      	ldr	r0, [pc, #4]	; (800b7ec <__malloc_lock+0x8>)
 800b7e6:	f7fe bb4a 	b.w	8009e7e <__retarget_lock_acquire_recursive>
 800b7ea:	bf00      	nop
 800b7ec:	200005b4 	.word	0x200005b4

0800b7f0 <__malloc_unlock>:
 800b7f0:	4801      	ldr	r0, [pc, #4]	; (800b7f8 <__malloc_unlock+0x8>)
 800b7f2:	f7fe bb45 	b.w	8009e80 <__retarget_lock_release_recursive>
 800b7f6:	bf00      	nop
 800b7f8:	200005b4 	.word	0x200005b4

0800b7fc <_Balloc>:
 800b7fc:	b570      	push	{r4, r5, r6, lr}
 800b7fe:	69c6      	ldr	r6, [r0, #28]
 800b800:	4604      	mov	r4, r0
 800b802:	460d      	mov	r5, r1
 800b804:	b976      	cbnz	r6, 800b824 <_Balloc+0x28>
 800b806:	2010      	movs	r0, #16
 800b808:	f7ff fe84 	bl	800b514 <malloc>
 800b80c:	4602      	mov	r2, r0
 800b80e:	61e0      	str	r0, [r4, #28]
 800b810:	b920      	cbnz	r0, 800b81c <_Balloc+0x20>
 800b812:	4b18      	ldr	r3, [pc, #96]	; (800b874 <_Balloc+0x78>)
 800b814:	4818      	ldr	r0, [pc, #96]	; (800b878 <_Balloc+0x7c>)
 800b816:	216b      	movs	r1, #107	; 0x6b
 800b818:	f000 fd8c 	bl	800c334 <__assert_func>
 800b81c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b820:	6006      	str	r6, [r0, #0]
 800b822:	60c6      	str	r6, [r0, #12]
 800b824:	69e6      	ldr	r6, [r4, #28]
 800b826:	68f3      	ldr	r3, [r6, #12]
 800b828:	b183      	cbz	r3, 800b84c <_Balloc+0x50>
 800b82a:	69e3      	ldr	r3, [r4, #28]
 800b82c:	68db      	ldr	r3, [r3, #12]
 800b82e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b832:	b9b8      	cbnz	r0, 800b864 <_Balloc+0x68>
 800b834:	2101      	movs	r1, #1
 800b836:	fa01 f605 	lsl.w	r6, r1, r5
 800b83a:	1d72      	adds	r2, r6, #5
 800b83c:	0092      	lsls	r2, r2, #2
 800b83e:	4620      	mov	r0, r4
 800b840:	f000 fd96 	bl	800c370 <_calloc_r>
 800b844:	b160      	cbz	r0, 800b860 <_Balloc+0x64>
 800b846:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b84a:	e00e      	b.n	800b86a <_Balloc+0x6e>
 800b84c:	2221      	movs	r2, #33	; 0x21
 800b84e:	2104      	movs	r1, #4
 800b850:	4620      	mov	r0, r4
 800b852:	f000 fd8d 	bl	800c370 <_calloc_r>
 800b856:	69e3      	ldr	r3, [r4, #28]
 800b858:	60f0      	str	r0, [r6, #12]
 800b85a:	68db      	ldr	r3, [r3, #12]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d1e4      	bne.n	800b82a <_Balloc+0x2e>
 800b860:	2000      	movs	r0, #0
 800b862:	bd70      	pop	{r4, r5, r6, pc}
 800b864:	6802      	ldr	r2, [r0, #0]
 800b866:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b86a:	2300      	movs	r3, #0
 800b86c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b870:	e7f7      	b.n	800b862 <_Balloc+0x66>
 800b872:	bf00      	nop
 800b874:	0800cc1e 	.word	0x0800cc1e
 800b878:	0800cd0f 	.word	0x0800cd0f

0800b87c <_Bfree>:
 800b87c:	b570      	push	{r4, r5, r6, lr}
 800b87e:	69c6      	ldr	r6, [r0, #28]
 800b880:	4605      	mov	r5, r0
 800b882:	460c      	mov	r4, r1
 800b884:	b976      	cbnz	r6, 800b8a4 <_Bfree+0x28>
 800b886:	2010      	movs	r0, #16
 800b888:	f7ff fe44 	bl	800b514 <malloc>
 800b88c:	4602      	mov	r2, r0
 800b88e:	61e8      	str	r0, [r5, #28]
 800b890:	b920      	cbnz	r0, 800b89c <_Bfree+0x20>
 800b892:	4b09      	ldr	r3, [pc, #36]	; (800b8b8 <_Bfree+0x3c>)
 800b894:	4809      	ldr	r0, [pc, #36]	; (800b8bc <_Bfree+0x40>)
 800b896:	218f      	movs	r1, #143	; 0x8f
 800b898:	f000 fd4c 	bl	800c334 <__assert_func>
 800b89c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b8a0:	6006      	str	r6, [r0, #0]
 800b8a2:	60c6      	str	r6, [r0, #12]
 800b8a4:	b13c      	cbz	r4, 800b8b6 <_Bfree+0x3a>
 800b8a6:	69eb      	ldr	r3, [r5, #28]
 800b8a8:	6862      	ldr	r2, [r4, #4]
 800b8aa:	68db      	ldr	r3, [r3, #12]
 800b8ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b8b0:	6021      	str	r1, [r4, #0]
 800b8b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b8b6:	bd70      	pop	{r4, r5, r6, pc}
 800b8b8:	0800cc1e 	.word	0x0800cc1e
 800b8bc:	0800cd0f 	.word	0x0800cd0f

0800b8c0 <__multadd>:
 800b8c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8c4:	690d      	ldr	r5, [r1, #16]
 800b8c6:	4607      	mov	r7, r0
 800b8c8:	460c      	mov	r4, r1
 800b8ca:	461e      	mov	r6, r3
 800b8cc:	f101 0c14 	add.w	ip, r1, #20
 800b8d0:	2000      	movs	r0, #0
 800b8d2:	f8dc 3000 	ldr.w	r3, [ip]
 800b8d6:	b299      	uxth	r1, r3
 800b8d8:	fb02 6101 	mla	r1, r2, r1, r6
 800b8dc:	0c1e      	lsrs	r6, r3, #16
 800b8de:	0c0b      	lsrs	r3, r1, #16
 800b8e0:	fb02 3306 	mla	r3, r2, r6, r3
 800b8e4:	b289      	uxth	r1, r1
 800b8e6:	3001      	adds	r0, #1
 800b8e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b8ec:	4285      	cmp	r5, r0
 800b8ee:	f84c 1b04 	str.w	r1, [ip], #4
 800b8f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b8f6:	dcec      	bgt.n	800b8d2 <__multadd+0x12>
 800b8f8:	b30e      	cbz	r6, 800b93e <__multadd+0x7e>
 800b8fa:	68a3      	ldr	r3, [r4, #8]
 800b8fc:	42ab      	cmp	r3, r5
 800b8fe:	dc19      	bgt.n	800b934 <__multadd+0x74>
 800b900:	6861      	ldr	r1, [r4, #4]
 800b902:	4638      	mov	r0, r7
 800b904:	3101      	adds	r1, #1
 800b906:	f7ff ff79 	bl	800b7fc <_Balloc>
 800b90a:	4680      	mov	r8, r0
 800b90c:	b928      	cbnz	r0, 800b91a <__multadd+0x5a>
 800b90e:	4602      	mov	r2, r0
 800b910:	4b0c      	ldr	r3, [pc, #48]	; (800b944 <__multadd+0x84>)
 800b912:	480d      	ldr	r0, [pc, #52]	; (800b948 <__multadd+0x88>)
 800b914:	21ba      	movs	r1, #186	; 0xba
 800b916:	f000 fd0d 	bl	800c334 <__assert_func>
 800b91a:	6922      	ldr	r2, [r4, #16]
 800b91c:	3202      	adds	r2, #2
 800b91e:	f104 010c 	add.w	r1, r4, #12
 800b922:	0092      	lsls	r2, r2, #2
 800b924:	300c      	adds	r0, #12
 800b926:	f7fe faac 	bl	8009e82 <memcpy>
 800b92a:	4621      	mov	r1, r4
 800b92c:	4638      	mov	r0, r7
 800b92e:	f7ff ffa5 	bl	800b87c <_Bfree>
 800b932:	4644      	mov	r4, r8
 800b934:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b938:	3501      	adds	r5, #1
 800b93a:	615e      	str	r6, [r3, #20]
 800b93c:	6125      	str	r5, [r4, #16]
 800b93e:	4620      	mov	r0, r4
 800b940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b944:	0800cc8d 	.word	0x0800cc8d
 800b948:	0800cd0f 	.word	0x0800cd0f

0800b94c <__s2b>:
 800b94c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b950:	460c      	mov	r4, r1
 800b952:	4615      	mov	r5, r2
 800b954:	461f      	mov	r7, r3
 800b956:	2209      	movs	r2, #9
 800b958:	3308      	adds	r3, #8
 800b95a:	4606      	mov	r6, r0
 800b95c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b960:	2100      	movs	r1, #0
 800b962:	2201      	movs	r2, #1
 800b964:	429a      	cmp	r2, r3
 800b966:	db09      	blt.n	800b97c <__s2b+0x30>
 800b968:	4630      	mov	r0, r6
 800b96a:	f7ff ff47 	bl	800b7fc <_Balloc>
 800b96e:	b940      	cbnz	r0, 800b982 <__s2b+0x36>
 800b970:	4602      	mov	r2, r0
 800b972:	4b19      	ldr	r3, [pc, #100]	; (800b9d8 <__s2b+0x8c>)
 800b974:	4819      	ldr	r0, [pc, #100]	; (800b9dc <__s2b+0x90>)
 800b976:	21d3      	movs	r1, #211	; 0xd3
 800b978:	f000 fcdc 	bl	800c334 <__assert_func>
 800b97c:	0052      	lsls	r2, r2, #1
 800b97e:	3101      	adds	r1, #1
 800b980:	e7f0      	b.n	800b964 <__s2b+0x18>
 800b982:	9b08      	ldr	r3, [sp, #32]
 800b984:	6143      	str	r3, [r0, #20]
 800b986:	2d09      	cmp	r5, #9
 800b988:	f04f 0301 	mov.w	r3, #1
 800b98c:	6103      	str	r3, [r0, #16]
 800b98e:	dd16      	ble.n	800b9be <__s2b+0x72>
 800b990:	f104 0909 	add.w	r9, r4, #9
 800b994:	46c8      	mov	r8, r9
 800b996:	442c      	add	r4, r5
 800b998:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b99c:	4601      	mov	r1, r0
 800b99e:	3b30      	subs	r3, #48	; 0x30
 800b9a0:	220a      	movs	r2, #10
 800b9a2:	4630      	mov	r0, r6
 800b9a4:	f7ff ff8c 	bl	800b8c0 <__multadd>
 800b9a8:	45a0      	cmp	r8, r4
 800b9aa:	d1f5      	bne.n	800b998 <__s2b+0x4c>
 800b9ac:	f1a5 0408 	sub.w	r4, r5, #8
 800b9b0:	444c      	add	r4, r9
 800b9b2:	1b2d      	subs	r5, r5, r4
 800b9b4:	1963      	adds	r3, r4, r5
 800b9b6:	42bb      	cmp	r3, r7
 800b9b8:	db04      	blt.n	800b9c4 <__s2b+0x78>
 800b9ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9be:	340a      	adds	r4, #10
 800b9c0:	2509      	movs	r5, #9
 800b9c2:	e7f6      	b.n	800b9b2 <__s2b+0x66>
 800b9c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b9c8:	4601      	mov	r1, r0
 800b9ca:	3b30      	subs	r3, #48	; 0x30
 800b9cc:	220a      	movs	r2, #10
 800b9ce:	4630      	mov	r0, r6
 800b9d0:	f7ff ff76 	bl	800b8c0 <__multadd>
 800b9d4:	e7ee      	b.n	800b9b4 <__s2b+0x68>
 800b9d6:	bf00      	nop
 800b9d8:	0800cc8d 	.word	0x0800cc8d
 800b9dc:	0800cd0f 	.word	0x0800cd0f

0800b9e0 <__hi0bits>:
 800b9e0:	0c03      	lsrs	r3, r0, #16
 800b9e2:	041b      	lsls	r3, r3, #16
 800b9e4:	b9d3      	cbnz	r3, 800ba1c <__hi0bits+0x3c>
 800b9e6:	0400      	lsls	r0, r0, #16
 800b9e8:	2310      	movs	r3, #16
 800b9ea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b9ee:	bf04      	itt	eq
 800b9f0:	0200      	lsleq	r0, r0, #8
 800b9f2:	3308      	addeq	r3, #8
 800b9f4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b9f8:	bf04      	itt	eq
 800b9fa:	0100      	lsleq	r0, r0, #4
 800b9fc:	3304      	addeq	r3, #4
 800b9fe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ba02:	bf04      	itt	eq
 800ba04:	0080      	lsleq	r0, r0, #2
 800ba06:	3302      	addeq	r3, #2
 800ba08:	2800      	cmp	r0, #0
 800ba0a:	db05      	blt.n	800ba18 <__hi0bits+0x38>
 800ba0c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ba10:	f103 0301 	add.w	r3, r3, #1
 800ba14:	bf08      	it	eq
 800ba16:	2320      	moveq	r3, #32
 800ba18:	4618      	mov	r0, r3
 800ba1a:	4770      	bx	lr
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	e7e4      	b.n	800b9ea <__hi0bits+0xa>

0800ba20 <__lo0bits>:
 800ba20:	6803      	ldr	r3, [r0, #0]
 800ba22:	f013 0207 	ands.w	r2, r3, #7
 800ba26:	d00c      	beq.n	800ba42 <__lo0bits+0x22>
 800ba28:	07d9      	lsls	r1, r3, #31
 800ba2a:	d422      	bmi.n	800ba72 <__lo0bits+0x52>
 800ba2c:	079a      	lsls	r2, r3, #30
 800ba2e:	bf49      	itett	mi
 800ba30:	085b      	lsrmi	r3, r3, #1
 800ba32:	089b      	lsrpl	r3, r3, #2
 800ba34:	6003      	strmi	r3, [r0, #0]
 800ba36:	2201      	movmi	r2, #1
 800ba38:	bf5c      	itt	pl
 800ba3a:	6003      	strpl	r3, [r0, #0]
 800ba3c:	2202      	movpl	r2, #2
 800ba3e:	4610      	mov	r0, r2
 800ba40:	4770      	bx	lr
 800ba42:	b299      	uxth	r1, r3
 800ba44:	b909      	cbnz	r1, 800ba4a <__lo0bits+0x2a>
 800ba46:	0c1b      	lsrs	r3, r3, #16
 800ba48:	2210      	movs	r2, #16
 800ba4a:	b2d9      	uxtb	r1, r3
 800ba4c:	b909      	cbnz	r1, 800ba52 <__lo0bits+0x32>
 800ba4e:	3208      	adds	r2, #8
 800ba50:	0a1b      	lsrs	r3, r3, #8
 800ba52:	0719      	lsls	r1, r3, #28
 800ba54:	bf04      	itt	eq
 800ba56:	091b      	lsreq	r3, r3, #4
 800ba58:	3204      	addeq	r2, #4
 800ba5a:	0799      	lsls	r1, r3, #30
 800ba5c:	bf04      	itt	eq
 800ba5e:	089b      	lsreq	r3, r3, #2
 800ba60:	3202      	addeq	r2, #2
 800ba62:	07d9      	lsls	r1, r3, #31
 800ba64:	d403      	bmi.n	800ba6e <__lo0bits+0x4e>
 800ba66:	085b      	lsrs	r3, r3, #1
 800ba68:	f102 0201 	add.w	r2, r2, #1
 800ba6c:	d003      	beq.n	800ba76 <__lo0bits+0x56>
 800ba6e:	6003      	str	r3, [r0, #0]
 800ba70:	e7e5      	b.n	800ba3e <__lo0bits+0x1e>
 800ba72:	2200      	movs	r2, #0
 800ba74:	e7e3      	b.n	800ba3e <__lo0bits+0x1e>
 800ba76:	2220      	movs	r2, #32
 800ba78:	e7e1      	b.n	800ba3e <__lo0bits+0x1e>
	...

0800ba7c <__i2b>:
 800ba7c:	b510      	push	{r4, lr}
 800ba7e:	460c      	mov	r4, r1
 800ba80:	2101      	movs	r1, #1
 800ba82:	f7ff febb 	bl	800b7fc <_Balloc>
 800ba86:	4602      	mov	r2, r0
 800ba88:	b928      	cbnz	r0, 800ba96 <__i2b+0x1a>
 800ba8a:	4b05      	ldr	r3, [pc, #20]	; (800baa0 <__i2b+0x24>)
 800ba8c:	4805      	ldr	r0, [pc, #20]	; (800baa4 <__i2b+0x28>)
 800ba8e:	f240 1145 	movw	r1, #325	; 0x145
 800ba92:	f000 fc4f 	bl	800c334 <__assert_func>
 800ba96:	2301      	movs	r3, #1
 800ba98:	6144      	str	r4, [r0, #20]
 800ba9a:	6103      	str	r3, [r0, #16]
 800ba9c:	bd10      	pop	{r4, pc}
 800ba9e:	bf00      	nop
 800baa0:	0800cc8d 	.word	0x0800cc8d
 800baa4:	0800cd0f 	.word	0x0800cd0f

0800baa8 <__multiply>:
 800baa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baac:	4691      	mov	r9, r2
 800baae:	690a      	ldr	r2, [r1, #16]
 800bab0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bab4:	429a      	cmp	r2, r3
 800bab6:	bfb8      	it	lt
 800bab8:	460b      	movlt	r3, r1
 800baba:	460c      	mov	r4, r1
 800babc:	bfbc      	itt	lt
 800babe:	464c      	movlt	r4, r9
 800bac0:	4699      	movlt	r9, r3
 800bac2:	6927      	ldr	r7, [r4, #16]
 800bac4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bac8:	68a3      	ldr	r3, [r4, #8]
 800baca:	6861      	ldr	r1, [r4, #4]
 800bacc:	eb07 060a 	add.w	r6, r7, sl
 800bad0:	42b3      	cmp	r3, r6
 800bad2:	b085      	sub	sp, #20
 800bad4:	bfb8      	it	lt
 800bad6:	3101      	addlt	r1, #1
 800bad8:	f7ff fe90 	bl	800b7fc <_Balloc>
 800badc:	b930      	cbnz	r0, 800baec <__multiply+0x44>
 800bade:	4602      	mov	r2, r0
 800bae0:	4b44      	ldr	r3, [pc, #272]	; (800bbf4 <__multiply+0x14c>)
 800bae2:	4845      	ldr	r0, [pc, #276]	; (800bbf8 <__multiply+0x150>)
 800bae4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800bae8:	f000 fc24 	bl	800c334 <__assert_func>
 800baec:	f100 0514 	add.w	r5, r0, #20
 800baf0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800baf4:	462b      	mov	r3, r5
 800baf6:	2200      	movs	r2, #0
 800baf8:	4543      	cmp	r3, r8
 800bafa:	d321      	bcc.n	800bb40 <__multiply+0x98>
 800bafc:	f104 0314 	add.w	r3, r4, #20
 800bb00:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bb04:	f109 0314 	add.w	r3, r9, #20
 800bb08:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bb0c:	9202      	str	r2, [sp, #8]
 800bb0e:	1b3a      	subs	r2, r7, r4
 800bb10:	3a15      	subs	r2, #21
 800bb12:	f022 0203 	bic.w	r2, r2, #3
 800bb16:	3204      	adds	r2, #4
 800bb18:	f104 0115 	add.w	r1, r4, #21
 800bb1c:	428f      	cmp	r7, r1
 800bb1e:	bf38      	it	cc
 800bb20:	2204      	movcc	r2, #4
 800bb22:	9201      	str	r2, [sp, #4]
 800bb24:	9a02      	ldr	r2, [sp, #8]
 800bb26:	9303      	str	r3, [sp, #12]
 800bb28:	429a      	cmp	r2, r3
 800bb2a:	d80c      	bhi.n	800bb46 <__multiply+0x9e>
 800bb2c:	2e00      	cmp	r6, #0
 800bb2e:	dd03      	ble.n	800bb38 <__multiply+0x90>
 800bb30:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d05b      	beq.n	800bbf0 <__multiply+0x148>
 800bb38:	6106      	str	r6, [r0, #16]
 800bb3a:	b005      	add	sp, #20
 800bb3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb40:	f843 2b04 	str.w	r2, [r3], #4
 800bb44:	e7d8      	b.n	800baf8 <__multiply+0x50>
 800bb46:	f8b3 a000 	ldrh.w	sl, [r3]
 800bb4a:	f1ba 0f00 	cmp.w	sl, #0
 800bb4e:	d024      	beq.n	800bb9a <__multiply+0xf2>
 800bb50:	f104 0e14 	add.w	lr, r4, #20
 800bb54:	46a9      	mov	r9, r5
 800bb56:	f04f 0c00 	mov.w	ip, #0
 800bb5a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bb5e:	f8d9 1000 	ldr.w	r1, [r9]
 800bb62:	fa1f fb82 	uxth.w	fp, r2
 800bb66:	b289      	uxth	r1, r1
 800bb68:	fb0a 110b 	mla	r1, sl, fp, r1
 800bb6c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bb70:	f8d9 2000 	ldr.w	r2, [r9]
 800bb74:	4461      	add	r1, ip
 800bb76:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bb7a:	fb0a c20b 	mla	r2, sl, fp, ip
 800bb7e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bb82:	b289      	uxth	r1, r1
 800bb84:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bb88:	4577      	cmp	r7, lr
 800bb8a:	f849 1b04 	str.w	r1, [r9], #4
 800bb8e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bb92:	d8e2      	bhi.n	800bb5a <__multiply+0xb2>
 800bb94:	9a01      	ldr	r2, [sp, #4]
 800bb96:	f845 c002 	str.w	ip, [r5, r2]
 800bb9a:	9a03      	ldr	r2, [sp, #12]
 800bb9c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bba0:	3304      	adds	r3, #4
 800bba2:	f1b9 0f00 	cmp.w	r9, #0
 800bba6:	d021      	beq.n	800bbec <__multiply+0x144>
 800bba8:	6829      	ldr	r1, [r5, #0]
 800bbaa:	f104 0c14 	add.w	ip, r4, #20
 800bbae:	46ae      	mov	lr, r5
 800bbb0:	f04f 0a00 	mov.w	sl, #0
 800bbb4:	f8bc b000 	ldrh.w	fp, [ip]
 800bbb8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bbbc:	fb09 220b 	mla	r2, r9, fp, r2
 800bbc0:	4452      	add	r2, sl
 800bbc2:	b289      	uxth	r1, r1
 800bbc4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bbc8:	f84e 1b04 	str.w	r1, [lr], #4
 800bbcc:	f85c 1b04 	ldr.w	r1, [ip], #4
 800bbd0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bbd4:	f8be 1000 	ldrh.w	r1, [lr]
 800bbd8:	fb09 110a 	mla	r1, r9, sl, r1
 800bbdc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800bbe0:	4567      	cmp	r7, ip
 800bbe2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bbe6:	d8e5      	bhi.n	800bbb4 <__multiply+0x10c>
 800bbe8:	9a01      	ldr	r2, [sp, #4]
 800bbea:	50a9      	str	r1, [r5, r2]
 800bbec:	3504      	adds	r5, #4
 800bbee:	e799      	b.n	800bb24 <__multiply+0x7c>
 800bbf0:	3e01      	subs	r6, #1
 800bbf2:	e79b      	b.n	800bb2c <__multiply+0x84>
 800bbf4:	0800cc8d 	.word	0x0800cc8d
 800bbf8:	0800cd0f 	.word	0x0800cd0f

0800bbfc <__pow5mult>:
 800bbfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc00:	4615      	mov	r5, r2
 800bc02:	f012 0203 	ands.w	r2, r2, #3
 800bc06:	4606      	mov	r6, r0
 800bc08:	460f      	mov	r7, r1
 800bc0a:	d007      	beq.n	800bc1c <__pow5mult+0x20>
 800bc0c:	4c25      	ldr	r4, [pc, #148]	; (800bca4 <__pow5mult+0xa8>)
 800bc0e:	3a01      	subs	r2, #1
 800bc10:	2300      	movs	r3, #0
 800bc12:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bc16:	f7ff fe53 	bl	800b8c0 <__multadd>
 800bc1a:	4607      	mov	r7, r0
 800bc1c:	10ad      	asrs	r5, r5, #2
 800bc1e:	d03d      	beq.n	800bc9c <__pow5mult+0xa0>
 800bc20:	69f4      	ldr	r4, [r6, #28]
 800bc22:	b97c      	cbnz	r4, 800bc44 <__pow5mult+0x48>
 800bc24:	2010      	movs	r0, #16
 800bc26:	f7ff fc75 	bl	800b514 <malloc>
 800bc2a:	4602      	mov	r2, r0
 800bc2c:	61f0      	str	r0, [r6, #28]
 800bc2e:	b928      	cbnz	r0, 800bc3c <__pow5mult+0x40>
 800bc30:	4b1d      	ldr	r3, [pc, #116]	; (800bca8 <__pow5mult+0xac>)
 800bc32:	481e      	ldr	r0, [pc, #120]	; (800bcac <__pow5mult+0xb0>)
 800bc34:	f240 11b3 	movw	r1, #435	; 0x1b3
 800bc38:	f000 fb7c 	bl	800c334 <__assert_func>
 800bc3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bc40:	6004      	str	r4, [r0, #0]
 800bc42:	60c4      	str	r4, [r0, #12]
 800bc44:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800bc48:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bc4c:	b94c      	cbnz	r4, 800bc62 <__pow5mult+0x66>
 800bc4e:	f240 2171 	movw	r1, #625	; 0x271
 800bc52:	4630      	mov	r0, r6
 800bc54:	f7ff ff12 	bl	800ba7c <__i2b>
 800bc58:	2300      	movs	r3, #0
 800bc5a:	f8c8 0008 	str.w	r0, [r8, #8]
 800bc5e:	4604      	mov	r4, r0
 800bc60:	6003      	str	r3, [r0, #0]
 800bc62:	f04f 0900 	mov.w	r9, #0
 800bc66:	07eb      	lsls	r3, r5, #31
 800bc68:	d50a      	bpl.n	800bc80 <__pow5mult+0x84>
 800bc6a:	4639      	mov	r1, r7
 800bc6c:	4622      	mov	r2, r4
 800bc6e:	4630      	mov	r0, r6
 800bc70:	f7ff ff1a 	bl	800baa8 <__multiply>
 800bc74:	4639      	mov	r1, r7
 800bc76:	4680      	mov	r8, r0
 800bc78:	4630      	mov	r0, r6
 800bc7a:	f7ff fdff 	bl	800b87c <_Bfree>
 800bc7e:	4647      	mov	r7, r8
 800bc80:	106d      	asrs	r5, r5, #1
 800bc82:	d00b      	beq.n	800bc9c <__pow5mult+0xa0>
 800bc84:	6820      	ldr	r0, [r4, #0]
 800bc86:	b938      	cbnz	r0, 800bc98 <__pow5mult+0x9c>
 800bc88:	4622      	mov	r2, r4
 800bc8a:	4621      	mov	r1, r4
 800bc8c:	4630      	mov	r0, r6
 800bc8e:	f7ff ff0b 	bl	800baa8 <__multiply>
 800bc92:	6020      	str	r0, [r4, #0]
 800bc94:	f8c0 9000 	str.w	r9, [r0]
 800bc98:	4604      	mov	r4, r0
 800bc9a:	e7e4      	b.n	800bc66 <__pow5mult+0x6a>
 800bc9c:	4638      	mov	r0, r7
 800bc9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bca2:	bf00      	nop
 800bca4:	0800ce58 	.word	0x0800ce58
 800bca8:	0800cc1e 	.word	0x0800cc1e
 800bcac:	0800cd0f 	.word	0x0800cd0f

0800bcb0 <__lshift>:
 800bcb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bcb4:	460c      	mov	r4, r1
 800bcb6:	6849      	ldr	r1, [r1, #4]
 800bcb8:	6923      	ldr	r3, [r4, #16]
 800bcba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bcbe:	68a3      	ldr	r3, [r4, #8]
 800bcc0:	4607      	mov	r7, r0
 800bcc2:	4691      	mov	r9, r2
 800bcc4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bcc8:	f108 0601 	add.w	r6, r8, #1
 800bccc:	42b3      	cmp	r3, r6
 800bcce:	db0b      	blt.n	800bce8 <__lshift+0x38>
 800bcd0:	4638      	mov	r0, r7
 800bcd2:	f7ff fd93 	bl	800b7fc <_Balloc>
 800bcd6:	4605      	mov	r5, r0
 800bcd8:	b948      	cbnz	r0, 800bcee <__lshift+0x3e>
 800bcda:	4602      	mov	r2, r0
 800bcdc:	4b28      	ldr	r3, [pc, #160]	; (800bd80 <__lshift+0xd0>)
 800bcde:	4829      	ldr	r0, [pc, #164]	; (800bd84 <__lshift+0xd4>)
 800bce0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800bce4:	f000 fb26 	bl	800c334 <__assert_func>
 800bce8:	3101      	adds	r1, #1
 800bcea:	005b      	lsls	r3, r3, #1
 800bcec:	e7ee      	b.n	800bccc <__lshift+0x1c>
 800bcee:	2300      	movs	r3, #0
 800bcf0:	f100 0114 	add.w	r1, r0, #20
 800bcf4:	f100 0210 	add.w	r2, r0, #16
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	4553      	cmp	r3, sl
 800bcfc:	db33      	blt.n	800bd66 <__lshift+0xb6>
 800bcfe:	6920      	ldr	r0, [r4, #16]
 800bd00:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bd04:	f104 0314 	add.w	r3, r4, #20
 800bd08:	f019 091f 	ands.w	r9, r9, #31
 800bd0c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bd10:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bd14:	d02b      	beq.n	800bd6e <__lshift+0xbe>
 800bd16:	f1c9 0e20 	rsb	lr, r9, #32
 800bd1a:	468a      	mov	sl, r1
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	6818      	ldr	r0, [r3, #0]
 800bd20:	fa00 f009 	lsl.w	r0, r0, r9
 800bd24:	4310      	orrs	r0, r2
 800bd26:	f84a 0b04 	str.w	r0, [sl], #4
 800bd2a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd2e:	459c      	cmp	ip, r3
 800bd30:	fa22 f20e 	lsr.w	r2, r2, lr
 800bd34:	d8f3      	bhi.n	800bd1e <__lshift+0x6e>
 800bd36:	ebac 0304 	sub.w	r3, ip, r4
 800bd3a:	3b15      	subs	r3, #21
 800bd3c:	f023 0303 	bic.w	r3, r3, #3
 800bd40:	3304      	adds	r3, #4
 800bd42:	f104 0015 	add.w	r0, r4, #21
 800bd46:	4584      	cmp	ip, r0
 800bd48:	bf38      	it	cc
 800bd4a:	2304      	movcc	r3, #4
 800bd4c:	50ca      	str	r2, [r1, r3]
 800bd4e:	b10a      	cbz	r2, 800bd54 <__lshift+0xa4>
 800bd50:	f108 0602 	add.w	r6, r8, #2
 800bd54:	3e01      	subs	r6, #1
 800bd56:	4638      	mov	r0, r7
 800bd58:	612e      	str	r6, [r5, #16]
 800bd5a:	4621      	mov	r1, r4
 800bd5c:	f7ff fd8e 	bl	800b87c <_Bfree>
 800bd60:	4628      	mov	r0, r5
 800bd62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd66:	f842 0f04 	str.w	r0, [r2, #4]!
 800bd6a:	3301      	adds	r3, #1
 800bd6c:	e7c5      	b.n	800bcfa <__lshift+0x4a>
 800bd6e:	3904      	subs	r1, #4
 800bd70:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd74:	f841 2f04 	str.w	r2, [r1, #4]!
 800bd78:	459c      	cmp	ip, r3
 800bd7a:	d8f9      	bhi.n	800bd70 <__lshift+0xc0>
 800bd7c:	e7ea      	b.n	800bd54 <__lshift+0xa4>
 800bd7e:	bf00      	nop
 800bd80:	0800cc8d 	.word	0x0800cc8d
 800bd84:	0800cd0f 	.word	0x0800cd0f

0800bd88 <__mcmp>:
 800bd88:	b530      	push	{r4, r5, lr}
 800bd8a:	6902      	ldr	r2, [r0, #16]
 800bd8c:	690c      	ldr	r4, [r1, #16]
 800bd8e:	1b12      	subs	r2, r2, r4
 800bd90:	d10e      	bne.n	800bdb0 <__mcmp+0x28>
 800bd92:	f100 0314 	add.w	r3, r0, #20
 800bd96:	3114      	adds	r1, #20
 800bd98:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bd9c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bda0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bda4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bda8:	42a5      	cmp	r5, r4
 800bdaa:	d003      	beq.n	800bdb4 <__mcmp+0x2c>
 800bdac:	d305      	bcc.n	800bdba <__mcmp+0x32>
 800bdae:	2201      	movs	r2, #1
 800bdb0:	4610      	mov	r0, r2
 800bdb2:	bd30      	pop	{r4, r5, pc}
 800bdb4:	4283      	cmp	r3, r0
 800bdb6:	d3f3      	bcc.n	800bda0 <__mcmp+0x18>
 800bdb8:	e7fa      	b.n	800bdb0 <__mcmp+0x28>
 800bdba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bdbe:	e7f7      	b.n	800bdb0 <__mcmp+0x28>

0800bdc0 <__mdiff>:
 800bdc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdc4:	460c      	mov	r4, r1
 800bdc6:	4606      	mov	r6, r0
 800bdc8:	4611      	mov	r1, r2
 800bdca:	4620      	mov	r0, r4
 800bdcc:	4690      	mov	r8, r2
 800bdce:	f7ff ffdb 	bl	800bd88 <__mcmp>
 800bdd2:	1e05      	subs	r5, r0, #0
 800bdd4:	d110      	bne.n	800bdf8 <__mdiff+0x38>
 800bdd6:	4629      	mov	r1, r5
 800bdd8:	4630      	mov	r0, r6
 800bdda:	f7ff fd0f 	bl	800b7fc <_Balloc>
 800bdde:	b930      	cbnz	r0, 800bdee <__mdiff+0x2e>
 800bde0:	4b3a      	ldr	r3, [pc, #232]	; (800becc <__mdiff+0x10c>)
 800bde2:	4602      	mov	r2, r0
 800bde4:	f240 2137 	movw	r1, #567	; 0x237
 800bde8:	4839      	ldr	r0, [pc, #228]	; (800bed0 <__mdiff+0x110>)
 800bdea:	f000 faa3 	bl	800c334 <__assert_func>
 800bdee:	2301      	movs	r3, #1
 800bdf0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bdf4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdf8:	bfa4      	itt	ge
 800bdfa:	4643      	movge	r3, r8
 800bdfc:	46a0      	movge	r8, r4
 800bdfe:	4630      	mov	r0, r6
 800be00:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800be04:	bfa6      	itte	ge
 800be06:	461c      	movge	r4, r3
 800be08:	2500      	movge	r5, #0
 800be0a:	2501      	movlt	r5, #1
 800be0c:	f7ff fcf6 	bl	800b7fc <_Balloc>
 800be10:	b920      	cbnz	r0, 800be1c <__mdiff+0x5c>
 800be12:	4b2e      	ldr	r3, [pc, #184]	; (800becc <__mdiff+0x10c>)
 800be14:	4602      	mov	r2, r0
 800be16:	f240 2145 	movw	r1, #581	; 0x245
 800be1a:	e7e5      	b.n	800bde8 <__mdiff+0x28>
 800be1c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800be20:	6926      	ldr	r6, [r4, #16]
 800be22:	60c5      	str	r5, [r0, #12]
 800be24:	f104 0914 	add.w	r9, r4, #20
 800be28:	f108 0514 	add.w	r5, r8, #20
 800be2c:	f100 0e14 	add.w	lr, r0, #20
 800be30:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800be34:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800be38:	f108 0210 	add.w	r2, r8, #16
 800be3c:	46f2      	mov	sl, lr
 800be3e:	2100      	movs	r1, #0
 800be40:	f859 3b04 	ldr.w	r3, [r9], #4
 800be44:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800be48:	fa11 f88b 	uxtah	r8, r1, fp
 800be4c:	b299      	uxth	r1, r3
 800be4e:	0c1b      	lsrs	r3, r3, #16
 800be50:	eba8 0801 	sub.w	r8, r8, r1
 800be54:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800be58:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800be5c:	fa1f f888 	uxth.w	r8, r8
 800be60:	1419      	asrs	r1, r3, #16
 800be62:	454e      	cmp	r6, r9
 800be64:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800be68:	f84a 3b04 	str.w	r3, [sl], #4
 800be6c:	d8e8      	bhi.n	800be40 <__mdiff+0x80>
 800be6e:	1b33      	subs	r3, r6, r4
 800be70:	3b15      	subs	r3, #21
 800be72:	f023 0303 	bic.w	r3, r3, #3
 800be76:	3304      	adds	r3, #4
 800be78:	3415      	adds	r4, #21
 800be7a:	42a6      	cmp	r6, r4
 800be7c:	bf38      	it	cc
 800be7e:	2304      	movcc	r3, #4
 800be80:	441d      	add	r5, r3
 800be82:	4473      	add	r3, lr
 800be84:	469e      	mov	lr, r3
 800be86:	462e      	mov	r6, r5
 800be88:	4566      	cmp	r6, ip
 800be8a:	d30e      	bcc.n	800beaa <__mdiff+0xea>
 800be8c:	f10c 0203 	add.w	r2, ip, #3
 800be90:	1b52      	subs	r2, r2, r5
 800be92:	f022 0203 	bic.w	r2, r2, #3
 800be96:	3d03      	subs	r5, #3
 800be98:	45ac      	cmp	ip, r5
 800be9a:	bf38      	it	cc
 800be9c:	2200      	movcc	r2, #0
 800be9e:	4413      	add	r3, r2
 800bea0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bea4:	b17a      	cbz	r2, 800bec6 <__mdiff+0x106>
 800bea6:	6107      	str	r7, [r0, #16]
 800bea8:	e7a4      	b.n	800bdf4 <__mdiff+0x34>
 800beaa:	f856 8b04 	ldr.w	r8, [r6], #4
 800beae:	fa11 f288 	uxtah	r2, r1, r8
 800beb2:	1414      	asrs	r4, r2, #16
 800beb4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800beb8:	b292      	uxth	r2, r2
 800beba:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bebe:	f84e 2b04 	str.w	r2, [lr], #4
 800bec2:	1421      	asrs	r1, r4, #16
 800bec4:	e7e0      	b.n	800be88 <__mdiff+0xc8>
 800bec6:	3f01      	subs	r7, #1
 800bec8:	e7ea      	b.n	800bea0 <__mdiff+0xe0>
 800beca:	bf00      	nop
 800becc:	0800cc8d 	.word	0x0800cc8d
 800bed0:	0800cd0f 	.word	0x0800cd0f

0800bed4 <__ulp>:
 800bed4:	b082      	sub	sp, #8
 800bed6:	ed8d 0b00 	vstr	d0, [sp]
 800beda:	9a01      	ldr	r2, [sp, #4]
 800bedc:	4b0f      	ldr	r3, [pc, #60]	; (800bf1c <__ulp+0x48>)
 800bede:	4013      	ands	r3, r2
 800bee0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	dc08      	bgt.n	800befa <__ulp+0x26>
 800bee8:	425b      	negs	r3, r3
 800beea:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800beee:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bef2:	da04      	bge.n	800befe <__ulp+0x2a>
 800bef4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bef8:	4113      	asrs	r3, r2
 800befa:	2200      	movs	r2, #0
 800befc:	e008      	b.n	800bf10 <__ulp+0x3c>
 800befe:	f1a2 0314 	sub.w	r3, r2, #20
 800bf02:	2b1e      	cmp	r3, #30
 800bf04:	bfda      	itte	le
 800bf06:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800bf0a:	40da      	lsrle	r2, r3
 800bf0c:	2201      	movgt	r2, #1
 800bf0e:	2300      	movs	r3, #0
 800bf10:	4619      	mov	r1, r3
 800bf12:	4610      	mov	r0, r2
 800bf14:	ec41 0b10 	vmov	d0, r0, r1
 800bf18:	b002      	add	sp, #8
 800bf1a:	4770      	bx	lr
 800bf1c:	7ff00000 	.word	0x7ff00000

0800bf20 <__b2d>:
 800bf20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf24:	6906      	ldr	r6, [r0, #16]
 800bf26:	f100 0814 	add.w	r8, r0, #20
 800bf2a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800bf2e:	1f37      	subs	r7, r6, #4
 800bf30:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bf34:	4610      	mov	r0, r2
 800bf36:	f7ff fd53 	bl	800b9e0 <__hi0bits>
 800bf3a:	f1c0 0320 	rsb	r3, r0, #32
 800bf3e:	280a      	cmp	r0, #10
 800bf40:	600b      	str	r3, [r1, #0]
 800bf42:	491b      	ldr	r1, [pc, #108]	; (800bfb0 <__b2d+0x90>)
 800bf44:	dc15      	bgt.n	800bf72 <__b2d+0x52>
 800bf46:	f1c0 0c0b 	rsb	ip, r0, #11
 800bf4a:	fa22 f30c 	lsr.w	r3, r2, ip
 800bf4e:	45b8      	cmp	r8, r7
 800bf50:	ea43 0501 	orr.w	r5, r3, r1
 800bf54:	bf34      	ite	cc
 800bf56:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bf5a:	2300      	movcs	r3, #0
 800bf5c:	3015      	adds	r0, #21
 800bf5e:	fa02 f000 	lsl.w	r0, r2, r0
 800bf62:	fa23 f30c 	lsr.w	r3, r3, ip
 800bf66:	4303      	orrs	r3, r0
 800bf68:	461c      	mov	r4, r3
 800bf6a:	ec45 4b10 	vmov	d0, r4, r5
 800bf6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf72:	45b8      	cmp	r8, r7
 800bf74:	bf3a      	itte	cc
 800bf76:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bf7a:	f1a6 0708 	subcc.w	r7, r6, #8
 800bf7e:	2300      	movcs	r3, #0
 800bf80:	380b      	subs	r0, #11
 800bf82:	d012      	beq.n	800bfaa <__b2d+0x8a>
 800bf84:	f1c0 0120 	rsb	r1, r0, #32
 800bf88:	fa23 f401 	lsr.w	r4, r3, r1
 800bf8c:	4082      	lsls	r2, r0
 800bf8e:	4322      	orrs	r2, r4
 800bf90:	4547      	cmp	r7, r8
 800bf92:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800bf96:	bf8c      	ite	hi
 800bf98:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800bf9c:	2200      	movls	r2, #0
 800bf9e:	4083      	lsls	r3, r0
 800bfa0:	40ca      	lsrs	r2, r1
 800bfa2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bfa6:	4313      	orrs	r3, r2
 800bfa8:	e7de      	b.n	800bf68 <__b2d+0x48>
 800bfaa:	ea42 0501 	orr.w	r5, r2, r1
 800bfae:	e7db      	b.n	800bf68 <__b2d+0x48>
 800bfb0:	3ff00000 	.word	0x3ff00000

0800bfb4 <__d2b>:
 800bfb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bfb8:	460f      	mov	r7, r1
 800bfba:	2101      	movs	r1, #1
 800bfbc:	ec59 8b10 	vmov	r8, r9, d0
 800bfc0:	4616      	mov	r6, r2
 800bfc2:	f7ff fc1b 	bl	800b7fc <_Balloc>
 800bfc6:	4604      	mov	r4, r0
 800bfc8:	b930      	cbnz	r0, 800bfd8 <__d2b+0x24>
 800bfca:	4602      	mov	r2, r0
 800bfcc:	4b24      	ldr	r3, [pc, #144]	; (800c060 <__d2b+0xac>)
 800bfce:	4825      	ldr	r0, [pc, #148]	; (800c064 <__d2b+0xb0>)
 800bfd0:	f240 310f 	movw	r1, #783	; 0x30f
 800bfd4:	f000 f9ae 	bl	800c334 <__assert_func>
 800bfd8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bfdc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bfe0:	bb2d      	cbnz	r5, 800c02e <__d2b+0x7a>
 800bfe2:	9301      	str	r3, [sp, #4]
 800bfe4:	f1b8 0300 	subs.w	r3, r8, #0
 800bfe8:	d026      	beq.n	800c038 <__d2b+0x84>
 800bfea:	4668      	mov	r0, sp
 800bfec:	9300      	str	r3, [sp, #0]
 800bfee:	f7ff fd17 	bl	800ba20 <__lo0bits>
 800bff2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bff6:	b1e8      	cbz	r0, 800c034 <__d2b+0x80>
 800bff8:	f1c0 0320 	rsb	r3, r0, #32
 800bffc:	fa02 f303 	lsl.w	r3, r2, r3
 800c000:	430b      	orrs	r3, r1
 800c002:	40c2      	lsrs	r2, r0
 800c004:	6163      	str	r3, [r4, #20]
 800c006:	9201      	str	r2, [sp, #4]
 800c008:	9b01      	ldr	r3, [sp, #4]
 800c00a:	61a3      	str	r3, [r4, #24]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	bf14      	ite	ne
 800c010:	2202      	movne	r2, #2
 800c012:	2201      	moveq	r2, #1
 800c014:	6122      	str	r2, [r4, #16]
 800c016:	b1bd      	cbz	r5, 800c048 <__d2b+0x94>
 800c018:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c01c:	4405      	add	r5, r0
 800c01e:	603d      	str	r5, [r7, #0]
 800c020:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c024:	6030      	str	r0, [r6, #0]
 800c026:	4620      	mov	r0, r4
 800c028:	b003      	add	sp, #12
 800c02a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c02e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c032:	e7d6      	b.n	800bfe2 <__d2b+0x2e>
 800c034:	6161      	str	r1, [r4, #20]
 800c036:	e7e7      	b.n	800c008 <__d2b+0x54>
 800c038:	a801      	add	r0, sp, #4
 800c03a:	f7ff fcf1 	bl	800ba20 <__lo0bits>
 800c03e:	9b01      	ldr	r3, [sp, #4]
 800c040:	6163      	str	r3, [r4, #20]
 800c042:	3020      	adds	r0, #32
 800c044:	2201      	movs	r2, #1
 800c046:	e7e5      	b.n	800c014 <__d2b+0x60>
 800c048:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c04c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c050:	6038      	str	r0, [r7, #0]
 800c052:	6918      	ldr	r0, [r3, #16]
 800c054:	f7ff fcc4 	bl	800b9e0 <__hi0bits>
 800c058:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c05c:	e7e2      	b.n	800c024 <__d2b+0x70>
 800c05e:	bf00      	nop
 800c060:	0800cc8d 	.word	0x0800cc8d
 800c064:	0800cd0f 	.word	0x0800cd0f

0800c068 <__ratio>:
 800c068:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c06c:	4688      	mov	r8, r1
 800c06e:	4669      	mov	r1, sp
 800c070:	4681      	mov	r9, r0
 800c072:	f7ff ff55 	bl	800bf20 <__b2d>
 800c076:	a901      	add	r1, sp, #4
 800c078:	4640      	mov	r0, r8
 800c07a:	ec55 4b10 	vmov	r4, r5, d0
 800c07e:	f7ff ff4f 	bl	800bf20 <__b2d>
 800c082:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c086:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c08a:	eba3 0c02 	sub.w	ip, r3, r2
 800c08e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c092:	1a9b      	subs	r3, r3, r2
 800c094:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c098:	ec51 0b10 	vmov	r0, r1, d0
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	bfd6      	itet	le
 800c0a0:	460a      	movle	r2, r1
 800c0a2:	462a      	movgt	r2, r5
 800c0a4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c0a8:	468b      	mov	fp, r1
 800c0aa:	462f      	mov	r7, r5
 800c0ac:	bfd4      	ite	le
 800c0ae:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c0b2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c0b6:	4620      	mov	r0, r4
 800c0b8:	ee10 2a10 	vmov	r2, s0
 800c0bc:	465b      	mov	r3, fp
 800c0be:	4639      	mov	r1, r7
 800c0c0:	f7f4 fbe4 	bl	800088c <__aeabi_ddiv>
 800c0c4:	ec41 0b10 	vmov	d0, r0, r1
 800c0c8:	b003      	add	sp, #12
 800c0ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c0ce <__copybits>:
 800c0ce:	3901      	subs	r1, #1
 800c0d0:	b570      	push	{r4, r5, r6, lr}
 800c0d2:	1149      	asrs	r1, r1, #5
 800c0d4:	6914      	ldr	r4, [r2, #16]
 800c0d6:	3101      	adds	r1, #1
 800c0d8:	f102 0314 	add.w	r3, r2, #20
 800c0dc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c0e0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c0e4:	1f05      	subs	r5, r0, #4
 800c0e6:	42a3      	cmp	r3, r4
 800c0e8:	d30c      	bcc.n	800c104 <__copybits+0x36>
 800c0ea:	1aa3      	subs	r3, r4, r2
 800c0ec:	3b11      	subs	r3, #17
 800c0ee:	f023 0303 	bic.w	r3, r3, #3
 800c0f2:	3211      	adds	r2, #17
 800c0f4:	42a2      	cmp	r2, r4
 800c0f6:	bf88      	it	hi
 800c0f8:	2300      	movhi	r3, #0
 800c0fa:	4418      	add	r0, r3
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	4288      	cmp	r0, r1
 800c100:	d305      	bcc.n	800c10e <__copybits+0x40>
 800c102:	bd70      	pop	{r4, r5, r6, pc}
 800c104:	f853 6b04 	ldr.w	r6, [r3], #4
 800c108:	f845 6f04 	str.w	r6, [r5, #4]!
 800c10c:	e7eb      	b.n	800c0e6 <__copybits+0x18>
 800c10e:	f840 3b04 	str.w	r3, [r0], #4
 800c112:	e7f4      	b.n	800c0fe <__copybits+0x30>

0800c114 <__any_on>:
 800c114:	f100 0214 	add.w	r2, r0, #20
 800c118:	6900      	ldr	r0, [r0, #16]
 800c11a:	114b      	asrs	r3, r1, #5
 800c11c:	4298      	cmp	r0, r3
 800c11e:	b510      	push	{r4, lr}
 800c120:	db11      	blt.n	800c146 <__any_on+0x32>
 800c122:	dd0a      	ble.n	800c13a <__any_on+0x26>
 800c124:	f011 011f 	ands.w	r1, r1, #31
 800c128:	d007      	beq.n	800c13a <__any_on+0x26>
 800c12a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c12e:	fa24 f001 	lsr.w	r0, r4, r1
 800c132:	fa00 f101 	lsl.w	r1, r0, r1
 800c136:	428c      	cmp	r4, r1
 800c138:	d10b      	bne.n	800c152 <__any_on+0x3e>
 800c13a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c13e:	4293      	cmp	r3, r2
 800c140:	d803      	bhi.n	800c14a <__any_on+0x36>
 800c142:	2000      	movs	r0, #0
 800c144:	bd10      	pop	{r4, pc}
 800c146:	4603      	mov	r3, r0
 800c148:	e7f7      	b.n	800c13a <__any_on+0x26>
 800c14a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c14e:	2900      	cmp	r1, #0
 800c150:	d0f5      	beq.n	800c13e <__any_on+0x2a>
 800c152:	2001      	movs	r0, #1
 800c154:	e7f6      	b.n	800c144 <__any_on+0x30>

0800c156 <__sread>:
 800c156:	b510      	push	{r4, lr}
 800c158:	460c      	mov	r4, r1
 800c15a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c15e:	f000 f8b5 	bl	800c2cc <_read_r>
 800c162:	2800      	cmp	r0, #0
 800c164:	bfab      	itete	ge
 800c166:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c168:	89a3      	ldrhlt	r3, [r4, #12]
 800c16a:	181b      	addge	r3, r3, r0
 800c16c:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c170:	bfac      	ite	ge
 800c172:	6563      	strge	r3, [r4, #84]	; 0x54
 800c174:	81a3      	strhlt	r3, [r4, #12]
 800c176:	bd10      	pop	{r4, pc}

0800c178 <__swrite>:
 800c178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c17c:	461f      	mov	r7, r3
 800c17e:	898b      	ldrh	r3, [r1, #12]
 800c180:	05db      	lsls	r3, r3, #23
 800c182:	4605      	mov	r5, r0
 800c184:	460c      	mov	r4, r1
 800c186:	4616      	mov	r6, r2
 800c188:	d505      	bpl.n	800c196 <__swrite+0x1e>
 800c18a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c18e:	2302      	movs	r3, #2
 800c190:	2200      	movs	r2, #0
 800c192:	f000 f889 	bl	800c2a8 <_lseek_r>
 800c196:	89a3      	ldrh	r3, [r4, #12]
 800c198:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c19c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c1a0:	81a3      	strh	r3, [r4, #12]
 800c1a2:	4632      	mov	r2, r6
 800c1a4:	463b      	mov	r3, r7
 800c1a6:	4628      	mov	r0, r5
 800c1a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c1ac:	f000 b8b0 	b.w	800c310 <_write_r>

0800c1b0 <__sseek>:
 800c1b0:	b510      	push	{r4, lr}
 800c1b2:	460c      	mov	r4, r1
 800c1b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1b8:	f000 f876 	bl	800c2a8 <_lseek_r>
 800c1bc:	1c43      	adds	r3, r0, #1
 800c1be:	89a3      	ldrh	r3, [r4, #12]
 800c1c0:	bf15      	itete	ne
 800c1c2:	6560      	strne	r0, [r4, #84]	; 0x54
 800c1c4:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c1c8:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c1cc:	81a3      	strheq	r3, [r4, #12]
 800c1ce:	bf18      	it	ne
 800c1d0:	81a3      	strhne	r3, [r4, #12]
 800c1d2:	bd10      	pop	{r4, pc}

0800c1d4 <__sclose>:
 800c1d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1d8:	f000 b856 	b.w	800c288 <_close_r>

0800c1dc <_realloc_r>:
 800c1dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1e0:	4680      	mov	r8, r0
 800c1e2:	4614      	mov	r4, r2
 800c1e4:	460e      	mov	r6, r1
 800c1e6:	b921      	cbnz	r1, 800c1f2 <_realloc_r+0x16>
 800c1e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c1ec:	4611      	mov	r1, r2
 800c1ee:	f7ff b9b9 	b.w	800b564 <_malloc_r>
 800c1f2:	b92a      	cbnz	r2, 800c200 <_realloc_r+0x24>
 800c1f4:	f000 f8d2 	bl	800c39c <_free_r>
 800c1f8:	4625      	mov	r5, r4
 800c1fa:	4628      	mov	r0, r5
 800c1fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c200:	f000 f918 	bl	800c434 <_malloc_usable_size_r>
 800c204:	4284      	cmp	r4, r0
 800c206:	4607      	mov	r7, r0
 800c208:	d802      	bhi.n	800c210 <_realloc_r+0x34>
 800c20a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c20e:	d812      	bhi.n	800c236 <_realloc_r+0x5a>
 800c210:	4621      	mov	r1, r4
 800c212:	4640      	mov	r0, r8
 800c214:	f7ff f9a6 	bl	800b564 <_malloc_r>
 800c218:	4605      	mov	r5, r0
 800c21a:	2800      	cmp	r0, #0
 800c21c:	d0ed      	beq.n	800c1fa <_realloc_r+0x1e>
 800c21e:	42bc      	cmp	r4, r7
 800c220:	4622      	mov	r2, r4
 800c222:	4631      	mov	r1, r6
 800c224:	bf28      	it	cs
 800c226:	463a      	movcs	r2, r7
 800c228:	f7fd fe2b 	bl	8009e82 <memcpy>
 800c22c:	4631      	mov	r1, r6
 800c22e:	4640      	mov	r0, r8
 800c230:	f000 f8b4 	bl	800c39c <_free_r>
 800c234:	e7e1      	b.n	800c1fa <_realloc_r+0x1e>
 800c236:	4635      	mov	r5, r6
 800c238:	e7df      	b.n	800c1fa <_realloc_r+0x1e>

0800c23a <__ascii_wctomb>:
 800c23a:	b149      	cbz	r1, 800c250 <__ascii_wctomb+0x16>
 800c23c:	2aff      	cmp	r2, #255	; 0xff
 800c23e:	bf85      	ittet	hi
 800c240:	238a      	movhi	r3, #138	; 0x8a
 800c242:	6003      	strhi	r3, [r0, #0]
 800c244:	700a      	strbls	r2, [r1, #0]
 800c246:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800c24a:	bf98      	it	ls
 800c24c:	2001      	movls	r0, #1
 800c24e:	4770      	bx	lr
 800c250:	4608      	mov	r0, r1
 800c252:	4770      	bx	lr

0800c254 <memmove>:
 800c254:	4288      	cmp	r0, r1
 800c256:	b510      	push	{r4, lr}
 800c258:	eb01 0402 	add.w	r4, r1, r2
 800c25c:	d902      	bls.n	800c264 <memmove+0x10>
 800c25e:	4284      	cmp	r4, r0
 800c260:	4623      	mov	r3, r4
 800c262:	d807      	bhi.n	800c274 <memmove+0x20>
 800c264:	1e43      	subs	r3, r0, #1
 800c266:	42a1      	cmp	r1, r4
 800c268:	d008      	beq.n	800c27c <memmove+0x28>
 800c26a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c26e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c272:	e7f8      	b.n	800c266 <memmove+0x12>
 800c274:	4402      	add	r2, r0
 800c276:	4601      	mov	r1, r0
 800c278:	428a      	cmp	r2, r1
 800c27a:	d100      	bne.n	800c27e <memmove+0x2a>
 800c27c:	bd10      	pop	{r4, pc}
 800c27e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c282:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c286:	e7f7      	b.n	800c278 <memmove+0x24>

0800c288 <_close_r>:
 800c288:	b538      	push	{r3, r4, r5, lr}
 800c28a:	4d06      	ldr	r5, [pc, #24]	; (800c2a4 <_close_r+0x1c>)
 800c28c:	2300      	movs	r3, #0
 800c28e:	4604      	mov	r4, r0
 800c290:	4608      	mov	r0, r1
 800c292:	602b      	str	r3, [r5, #0]
 800c294:	f7f6 fd05 	bl	8002ca2 <_close>
 800c298:	1c43      	adds	r3, r0, #1
 800c29a:	d102      	bne.n	800c2a2 <_close_r+0x1a>
 800c29c:	682b      	ldr	r3, [r5, #0]
 800c29e:	b103      	cbz	r3, 800c2a2 <_close_r+0x1a>
 800c2a0:	6023      	str	r3, [r4, #0]
 800c2a2:	bd38      	pop	{r3, r4, r5, pc}
 800c2a4:	200005c0 	.word	0x200005c0

0800c2a8 <_lseek_r>:
 800c2a8:	b538      	push	{r3, r4, r5, lr}
 800c2aa:	4d07      	ldr	r5, [pc, #28]	; (800c2c8 <_lseek_r+0x20>)
 800c2ac:	4604      	mov	r4, r0
 800c2ae:	4608      	mov	r0, r1
 800c2b0:	4611      	mov	r1, r2
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	602a      	str	r2, [r5, #0]
 800c2b6:	461a      	mov	r2, r3
 800c2b8:	f7f6 fd1a 	bl	8002cf0 <_lseek>
 800c2bc:	1c43      	adds	r3, r0, #1
 800c2be:	d102      	bne.n	800c2c6 <_lseek_r+0x1e>
 800c2c0:	682b      	ldr	r3, [r5, #0]
 800c2c2:	b103      	cbz	r3, 800c2c6 <_lseek_r+0x1e>
 800c2c4:	6023      	str	r3, [r4, #0]
 800c2c6:	bd38      	pop	{r3, r4, r5, pc}
 800c2c8:	200005c0 	.word	0x200005c0

0800c2cc <_read_r>:
 800c2cc:	b538      	push	{r3, r4, r5, lr}
 800c2ce:	4d07      	ldr	r5, [pc, #28]	; (800c2ec <_read_r+0x20>)
 800c2d0:	4604      	mov	r4, r0
 800c2d2:	4608      	mov	r0, r1
 800c2d4:	4611      	mov	r1, r2
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	602a      	str	r2, [r5, #0]
 800c2da:	461a      	mov	r2, r3
 800c2dc:	f7f6 fca8 	bl	8002c30 <_read>
 800c2e0:	1c43      	adds	r3, r0, #1
 800c2e2:	d102      	bne.n	800c2ea <_read_r+0x1e>
 800c2e4:	682b      	ldr	r3, [r5, #0]
 800c2e6:	b103      	cbz	r3, 800c2ea <_read_r+0x1e>
 800c2e8:	6023      	str	r3, [r4, #0]
 800c2ea:	bd38      	pop	{r3, r4, r5, pc}
 800c2ec:	200005c0 	.word	0x200005c0

0800c2f0 <_sbrk_r>:
 800c2f0:	b538      	push	{r3, r4, r5, lr}
 800c2f2:	4d06      	ldr	r5, [pc, #24]	; (800c30c <_sbrk_r+0x1c>)
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	4604      	mov	r4, r0
 800c2f8:	4608      	mov	r0, r1
 800c2fa:	602b      	str	r3, [r5, #0]
 800c2fc:	f7f6 fd06 	bl	8002d0c <_sbrk>
 800c300:	1c43      	adds	r3, r0, #1
 800c302:	d102      	bne.n	800c30a <_sbrk_r+0x1a>
 800c304:	682b      	ldr	r3, [r5, #0]
 800c306:	b103      	cbz	r3, 800c30a <_sbrk_r+0x1a>
 800c308:	6023      	str	r3, [r4, #0]
 800c30a:	bd38      	pop	{r3, r4, r5, pc}
 800c30c:	200005c0 	.word	0x200005c0

0800c310 <_write_r>:
 800c310:	b538      	push	{r3, r4, r5, lr}
 800c312:	4d07      	ldr	r5, [pc, #28]	; (800c330 <_write_r+0x20>)
 800c314:	4604      	mov	r4, r0
 800c316:	4608      	mov	r0, r1
 800c318:	4611      	mov	r1, r2
 800c31a:	2200      	movs	r2, #0
 800c31c:	602a      	str	r2, [r5, #0]
 800c31e:	461a      	mov	r2, r3
 800c320:	f7f6 fca3 	bl	8002c6a <_write>
 800c324:	1c43      	adds	r3, r0, #1
 800c326:	d102      	bne.n	800c32e <_write_r+0x1e>
 800c328:	682b      	ldr	r3, [r5, #0]
 800c32a:	b103      	cbz	r3, 800c32e <_write_r+0x1e>
 800c32c:	6023      	str	r3, [r4, #0]
 800c32e:	bd38      	pop	{r3, r4, r5, pc}
 800c330:	200005c0 	.word	0x200005c0

0800c334 <__assert_func>:
 800c334:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c336:	4614      	mov	r4, r2
 800c338:	461a      	mov	r2, r3
 800c33a:	4b09      	ldr	r3, [pc, #36]	; (800c360 <__assert_func+0x2c>)
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	4605      	mov	r5, r0
 800c340:	68d8      	ldr	r0, [r3, #12]
 800c342:	b14c      	cbz	r4, 800c358 <__assert_func+0x24>
 800c344:	4b07      	ldr	r3, [pc, #28]	; (800c364 <__assert_func+0x30>)
 800c346:	9100      	str	r1, [sp, #0]
 800c348:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c34c:	4906      	ldr	r1, [pc, #24]	; (800c368 <__assert_func+0x34>)
 800c34e:	462b      	mov	r3, r5
 800c350:	f000 f878 	bl	800c444 <fiprintf>
 800c354:	f000 f888 	bl	800c468 <abort>
 800c358:	4b04      	ldr	r3, [pc, #16]	; (800c36c <__assert_func+0x38>)
 800c35a:	461c      	mov	r4, r3
 800c35c:	e7f3      	b.n	800c346 <__assert_func+0x12>
 800c35e:	bf00      	nop
 800c360:	20000224 	.word	0x20000224
 800c364:	0800ce64 	.word	0x0800ce64
 800c368:	0800ce71 	.word	0x0800ce71
 800c36c:	0800ce9f 	.word	0x0800ce9f

0800c370 <_calloc_r>:
 800c370:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c372:	fba1 2402 	umull	r2, r4, r1, r2
 800c376:	b94c      	cbnz	r4, 800c38c <_calloc_r+0x1c>
 800c378:	4611      	mov	r1, r2
 800c37a:	9201      	str	r2, [sp, #4]
 800c37c:	f7ff f8f2 	bl	800b564 <_malloc_r>
 800c380:	9a01      	ldr	r2, [sp, #4]
 800c382:	4605      	mov	r5, r0
 800c384:	b930      	cbnz	r0, 800c394 <_calloc_r+0x24>
 800c386:	4628      	mov	r0, r5
 800c388:	b003      	add	sp, #12
 800c38a:	bd30      	pop	{r4, r5, pc}
 800c38c:	220c      	movs	r2, #12
 800c38e:	6002      	str	r2, [r0, #0]
 800c390:	2500      	movs	r5, #0
 800c392:	e7f8      	b.n	800c386 <_calloc_r+0x16>
 800c394:	4621      	mov	r1, r4
 800c396:	f7fd fd3a 	bl	8009e0e <memset>
 800c39a:	e7f4      	b.n	800c386 <_calloc_r+0x16>

0800c39c <_free_r>:
 800c39c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c39e:	2900      	cmp	r1, #0
 800c3a0:	d044      	beq.n	800c42c <_free_r+0x90>
 800c3a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3a6:	9001      	str	r0, [sp, #4]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	f1a1 0404 	sub.w	r4, r1, #4
 800c3ae:	bfb8      	it	lt
 800c3b0:	18e4      	addlt	r4, r4, r3
 800c3b2:	f7ff fa17 	bl	800b7e4 <__malloc_lock>
 800c3b6:	4a1e      	ldr	r2, [pc, #120]	; (800c430 <_free_r+0x94>)
 800c3b8:	9801      	ldr	r0, [sp, #4]
 800c3ba:	6813      	ldr	r3, [r2, #0]
 800c3bc:	b933      	cbnz	r3, 800c3cc <_free_r+0x30>
 800c3be:	6063      	str	r3, [r4, #4]
 800c3c0:	6014      	str	r4, [r2, #0]
 800c3c2:	b003      	add	sp, #12
 800c3c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c3c8:	f7ff ba12 	b.w	800b7f0 <__malloc_unlock>
 800c3cc:	42a3      	cmp	r3, r4
 800c3ce:	d908      	bls.n	800c3e2 <_free_r+0x46>
 800c3d0:	6825      	ldr	r5, [r4, #0]
 800c3d2:	1961      	adds	r1, r4, r5
 800c3d4:	428b      	cmp	r3, r1
 800c3d6:	bf01      	itttt	eq
 800c3d8:	6819      	ldreq	r1, [r3, #0]
 800c3da:	685b      	ldreq	r3, [r3, #4]
 800c3dc:	1949      	addeq	r1, r1, r5
 800c3de:	6021      	streq	r1, [r4, #0]
 800c3e0:	e7ed      	b.n	800c3be <_free_r+0x22>
 800c3e2:	461a      	mov	r2, r3
 800c3e4:	685b      	ldr	r3, [r3, #4]
 800c3e6:	b10b      	cbz	r3, 800c3ec <_free_r+0x50>
 800c3e8:	42a3      	cmp	r3, r4
 800c3ea:	d9fa      	bls.n	800c3e2 <_free_r+0x46>
 800c3ec:	6811      	ldr	r1, [r2, #0]
 800c3ee:	1855      	adds	r5, r2, r1
 800c3f0:	42a5      	cmp	r5, r4
 800c3f2:	d10b      	bne.n	800c40c <_free_r+0x70>
 800c3f4:	6824      	ldr	r4, [r4, #0]
 800c3f6:	4421      	add	r1, r4
 800c3f8:	1854      	adds	r4, r2, r1
 800c3fa:	42a3      	cmp	r3, r4
 800c3fc:	6011      	str	r1, [r2, #0]
 800c3fe:	d1e0      	bne.n	800c3c2 <_free_r+0x26>
 800c400:	681c      	ldr	r4, [r3, #0]
 800c402:	685b      	ldr	r3, [r3, #4]
 800c404:	6053      	str	r3, [r2, #4]
 800c406:	440c      	add	r4, r1
 800c408:	6014      	str	r4, [r2, #0]
 800c40a:	e7da      	b.n	800c3c2 <_free_r+0x26>
 800c40c:	d902      	bls.n	800c414 <_free_r+0x78>
 800c40e:	230c      	movs	r3, #12
 800c410:	6003      	str	r3, [r0, #0]
 800c412:	e7d6      	b.n	800c3c2 <_free_r+0x26>
 800c414:	6825      	ldr	r5, [r4, #0]
 800c416:	1961      	adds	r1, r4, r5
 800c418:	428b      	cmp	r3, r1
 800c41a:	bf04      	itt	eq
 800c41c:	6819      	ldreq	r1, [r3, #0]
 800c41e:	685b      	ldreq	r3, [r3, #4]
 800c420:	6063      	str	r3, [r4, #4]
 800c422:	bf04      	itt	eq
 800c424:	1949      	addeq	r1, r1, r5
 800c426:	6021      	streq	r1, [r4, #0]
 800c428:	6054      	str	r4, [r2, #4]
 800c42a:	e7ca      	b.n	800c3c2 <_free_r+0x26>
 800c42c:	b003      	add	sp, #12
 800c42e:	bd30      	pop	{r4, r5, pc}
 800c430:	200005b8 	.word	0x200005b8

0800c434 <_malloc_usable_size_r>:
 800c434:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c438:	1f18      	subs	r0, r3, #4
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	bfbc      	itt	lt
 800c43e:	580b      	ldrlt	r3, [r1, r0]
 800c440:	18c0      	addlt	r0, r0, r3
 800c442:	4770      	bx	lr

0800c444 <fiprintf>:
 800c444:	b40e      	push	{r1, r2, r3}
 800c446:	b503      	push	{r0, r1, lr}
 800c448:	4601      	mov	r1, r0
 800c44a:	ab03      	add	r3, sp, #12
 800c44c:	4805      	ldr	r0, [pc, #20]	; (800c464 <fiprintf+0x20>)
 800c44e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c452:	6800      	ldr	r0, [r0, #0]
 800c454:	9301      	str	r3, [sp, #4]
 800c456:	f000 f837 	bl	800c4c8 <_vfiprintf_r>
 800c45a:	b002      	add	sp, #8
 800c45c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c460:	b003      	add	sp, #12
 800c462:	4770      	bx	lr
 800c464:	20000224 	.word	0x20000224

0800c468 <abort>:
 800c468:	b508      	push	{r3, lr}
 800c46a:	2006      	movs	r0, #6
 800c46c:	f000 fa88 	bl	800c980 <raise>
 800c470:	2001      	movs	r0, #1
 800c472:	f7f6 fbd3 	bl	8002c1c <_exit>

0800c476 <__sfputc_r>:
 800c476:	6893      	ldr	r3, [r2, #8]
 800c478:	3b01      	subs	r3, #1
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	b410      	push	{r4}
 800c47e:	6093      	str	r3, [r2, #8]
 800c480:	da08      	bge.n	800c494 <__sfputc_r+0x1e>
 800c482:	6994      	ldr	r4, [r2, #24]
 800c484:	42a3      	cmp	r3, r4
 800c486:	db01      	blt.n	800c48c <__sfputc_r+0x16>
 800c488:	290a      	cmp	r1, #10
 800c48a:	d103      	bne.n	800c494 <__sfputc_r+0x1e>
 800c48c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c490:	f000 b934 	b.w	800c6fc <__swbuf_r>
 800c494:	6813      	ldr	r3, [r2, #0]
 800c496:	1c58      	adds	r0, r3, #1
 800c498:	6010      	str	r0, [r2, #0]
 800c49a:	7019      	strb	r1, [r3, #0]
 800c49c:	4608      	mov	r0, r1
 800c49e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4a2:	4770      	bx	lr

0800c4a4 <__sfputs_r>:
 800c4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4a6:	4606      	mov	r6, r0
 800c4a8:	460f      	mov	r7, r1
 800c4aa:	4614      	mov	r4, r2
 800c4ac:	18d5      	adds	r5, r2, r3
 800c4ae:	42ac      	cmp	r4, r5
 800c4b0:	d101      	bne.n	800c4b6 <__sfputs_r+0x12>
 800c4b2:	2000      	movs	r0, #0
 800c4b4:	e007      	b.n	800c4c6 <__sfputs_r+0x22>
 800c4b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4ba:	463a      	mov	r2, r7
 800c4bc:	4630      	mov	r0, r6
 800c4be:	f7ff ffda 	bl	800c476 <__sfputc_r>
 800c4c2:	1c43      	adds	r3, r0, #1
 800c4c4:	d1f3      	bne.n	800c4ae <__sfputs_r+0xa>
 800c4c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c4c8 <_vfiprintf_r>:
 800c4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4cc:	460d      	mov	r5, r1
 800c4ce:	b09d      	sub	sp, #116	; 0x74
 800c4d0:	4614      	mov	r4, r2
 800c4d2:	4698      	mov	r8, r3
 800c4d4:	4606      	mov	r6, r0
 800c4d6:	b118      	cbz	r0, 800c4e0 <_vfiprintf_r+0x18>
 800c4d8:	6a03      	ldr	r3, [r0, #32]
 800c4da:	b90b      	cbnz	r3, 800c4e0 <_vfiprintf_r+0x18>
 800c4dc:	f7fc fd9e 	bl	800901c <__sinit>
 800c4e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c4e2:	07d9      	lsls	r1, r3, #31
 800c4e4:	d405      	bmi.n	800c4f2 <_vfiprintf_r+0x2a>
 800c4e6:	89ab      	ldrh	r3, [r5, #12]
 800c4e8:	059a      	lsls	r2, r3, #22
 800c4ea:	d402      	bmi.n	800c4f2 <_vfiprintf_r+0x2a>
 800c4ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c4ee:	f7fd fcc6 	bl	8009e7e <__retarget_lock_acquire_recursive>
 800c4f2:	89ab      	ldrh	r3, [r5, #12]
 800c4f4:	071b      	lsls	r3, r3, #28
 800c4f6:	d501      	bpl.n	800c4fc <_vfiprintf_r+0x34>
 800c4f8:	692b      	ldr	r3, [r5, #16]
 800c4fa:	b99b      	cbnz	r3, 800c524 <_vfiprintf_r+0x5c>
 800c4fc:	4629      	mov	r1, r5
 800c4fe:	4630      	mov	r0, r6
 800c500:	f000 f93a 	bl	800c778 <__swsetup_r>
 800c504:	b170      	cbz	r0, 800c524 <_vfiprintf_r+0x5c>
 800c506:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c508:	07dc      	lsls	r4, r3, #31
 800c50a:	d504      	bpl.n	800c516 <_vfiprintf_r+0x4e>
 800c50c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c510:	b01d      	add	sp, #116	; 0x74
 800c512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c516:	89ab      	ldrh	r3, [r5, #12]
 800c518:	0598      	lsls	r0, r3, #22
 800c51a:	d4f7      	bmi.n	800c50c <_vfiprintf_r+0x44>
 800c51c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c51e:	f7fd fcaf 	bl	8009e80 <__retarget_lock_release_recursive>
 800c522:	e7f3      	b.n	800c50c <_vfiprintf_r+0x44>
 800c524:	2300      	movs	r3, #0
 800c526:	9309      	str	r3, [sp, #36]	; 0x24
 800c528:	2320      	movs	r3, #32
 800c52a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c52e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c532:	2330      	movs	r3, #48	; 0x30
 800c534:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c6e8 <_vfiprintf_r+0x220>
 800c538:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c53c:	f04f 0901 	mov.w	r9, #1
 800c540:	4623      	mov	r3, r4
 800c542:	469a      	mov	sl, r3
 800c544:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c548:	b10a      	cbz	r2, 800c54e <_vfiprintf_r+0x86>
 800c54a:	2a25      	cmp	r2, #37	; 0x25
 800c54c:	d1f9      	bne.n	800c542 <_vfiprintf_r+0x7a>
 800c54e:	ebba 0b04 	subs.w	fp, sl, r4
 800c552:	d00b      	beq.n	800c56c <_vfiprintf_r+0xa4>
 800c554:	465b      	mov	r3, fp
 800c556:	4622      	mov	r2, r4
 800c558:	4629      	mov	r1, r5
 800c55a:	4630      	mov	r0, r6
 800c55c:	f7ff ffa2 	bl	800c4a4 <__sfputs_r>
 800c560:	3001      	adds	r0, #1
 800c562:	f000 80a9 	beq.w	800c6b8 <_vfiprintf_r+0x1f0>
 800c566:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c568:	445a      	add	r2, fp
 800c56a:	9209      	str	r2, [sp, #36]	; 0x24
 800c56c:	f89a 3000 	ldrb.w	r3, [sl]
 800c570:	2b00      	cmp	r3, #0
 800c572:	f000 80a1 	beq.w	800c6b8 <_vfiprintf_r+0x1f0>
 800c576:	2300      	movs	r3, #0
 800c578:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c57c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c580:	f10a 0a01 	add.w	sl, sl, #1
 800c584:	9304      	str	r3, [sp, #16]
 800c586:	9307      	str	r3, [sp, #28]
 800c588:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c58c:	931a      	str	r3, [sp, #104]	; 0x68
 800c58e:	4654      	mov	r4, sl
 800c590:	2205      	movs	r2, #5
 800c592:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c596:	4854      	ldr	r0, [pc, #336]	; (800c6e8 <_vfiprintf_r+0x220>)
 800c598:	f7f3 fe3a 	bl	8000210 <memchr>
 800c59c:	9a04      	ldr	r2, [sp, #16]
 800c59e:	b9d8      	cbnz	r0, 800c5d8 <_vfiprintf_r+0x110>
 800c5a0:	06d1      	lsls	r1, r2, #27
 800c5a2:	bf44      	itt	mi
 800c5a4:	2320      	movmi	r3, #32
 800c5a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5aa:	0713      	lsls	r3, r2, #28
 800c5ac:	bf44      	itt	mi
 800c5ae:	232b      	movmi	r3, #43	; 0x2b
 800c5b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5b4:	f89a 3000 	ldrb.w	r3, [sl]
 800c5b8:	2b2a      	cmp	r3, #42	; 0x2a
 800c5ba:	d015      	beq.n	800c5e8 <_vfiprintf_r+0x120>
 800c5bc:	9a07      	ldr	r2, [sp, #28]
 800c5be:	4654      	mov	r4, sl
 800c5c0:	2000      	movs	r0, #0
 800c5c2:	f04f 0c0a 	mov.w	ip, #10
 800c5c6:	4621      	mov	r1, r4
 800c5c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c5cc:	3b30      	subs	r3, #48	; 0x30
 800c5ce:	2b09      	cmp	r3, #9
 800c5d0:	d94d      	bls.n	800c66e <_vfiprintf_r+0x1a6>
 800c5d2:	b1b0      	cbz	r0, 800c602 <_vfiprintf_r+0x13a>
 800c5d4:	9207      	str	r2, [sp, #28]
 800c5d6:	e014      	b.n	800c602 <_vfiprintf_r+0x13a>
 800c5d8:	eba0 0308 	sub.w	r3, r0, r8
 800c5dc:	fa09 f303 	lsl.w	r3, r9, r3
 800c5e0:	4313      	orrs	r3, r2
 800c5e2:	9304      	str	r3, [sp, #16]
 800c5e4:	46a2      	mov	sl, r4
 800c5e6:	e7d2      	b.n	800c58e <_vfiprintf_r+0xc6>
 800c5e8:	9b03      	ldr	r3, [sp, #12]
 800c5ea:	1d19      	adds	r1, r3, #4
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	9103      	str	r1, [sp, #12]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	bfbb      	ittet	lt
 800c5f4:	425b      	neglt	r3, r3
 800c5f6:	f042 0202 	orrlt.w	r2, r2, #2
 800c5fa:	9307      	strge	r3, [sp, #28]
 800c5fc:	9307      	strlt	r3, [sp, #28]
 800c5fe:	bfb8      	it	lt
 800c600:	9204      	strlt	r2, [sp, #16]
 800c602:	7823      	ldrb	r3, [r4, #0]
 800c604:	2b2e      	cmp	r3, #46	; 0x2e
 800c606:	d10c      	bne.n	800c622 <_vfiprintf_r+0x15a>
 800c608:	7863      	ldrb	r3, [r4, #1]
 800c60a:	2b2a      	cmp	r3, #42	; 0x2a
 800c60c:	d134      	bne.n	800c678 <_vfiprintf_r+0x1b0>
 800c60e:	9b03      	ldr	r3, [sp, #12]
 800c610:	1d1a      	adds	r2, r3, #4
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	9203      	str	r2, [sp, #12]
 800c616:	2b00      	cmp	r3, #0
 800c618:	bfb8      	it	lt
 800c61a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c61e:	3402      	adds	r4, #2
 800c620:	9305      	str	r3, [sp, #20]
 800c622:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c6f8 <_vfiprintf_r+0x230>
 800c626:	7821      	ldrb	r1, [r4, #0]
 800c628:	2203      	movs	r2, #3
 800c62a:	4650      	mov	r0, sl
 800c62c:	f7f3 fdf0 	bl	8000210 <memchr>
 800c630:	b138      	cbz	r0, 800c642 <_vfiprintf_r+0x17a>
 800c632:	9b04      	ldr	r3, [sp, #16]
 800c634:	eba0 000a 	sub.w	r0, r0, sl
 800c638:	2240      	movs	r2, #64	; 0x40
 800c63a:	4082      	lsls	r2, r0
 800c63c:	4313      	orrs	r3, r2
 800c63e:	3401      	adds	r4, #1
 800c640:	9304      	str	r3, [sp, #16]
 800c642:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c646:	4829      	ldr	r0, [pc, #164]	; (800c6ec <_vfiprintf_r+0x224>)
 800c648:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c64c:	2206      	movs	r2, #6
 800c64e:	f7f3 fddf 	bl	8000210 <memchr>
 800c652:	2800      	cmp	r0, #0
 800c654:	d03f      	beq.n	800c6d6 <_vfiprintf_r+0x20e>
 800c656:	4b26      	ldr	r3, [pc, #152]	; (800c6f0 <_vfiprintf_r+0x228>)
 800c658:	bb1b      	cbnz	r3, 800c6a2 <_vfiprintf_r+0x1da>
 800c65a:	9b03      	ldr	r3, [sp, #12]
 800c65c:	3307      	adds	r3, #7
 800c65e:	f023 0307 	bic.w	r3, r3, #7
 800c662:	3308      	adds	r3, #8
 800c664:	9303      	str	r3, [sp, #12]
 800c666:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c668:	443b      	add	r3, r7
 800c66a:	9309      	str	r3, [sp, #36]	; 0x24
 800c66c:	e768      	b.n	800c540 <_vfiprintf_r+0x78>
 800c66e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c672:	460c      	mov	r4, r1
 800c674:	2001      	movs	r0, #1
 800c676:	e7a6      	b.n	800c5c6 <_vfiprintf_r+0xfe>
 800c678:	2300      	movs	r3, #0
 800c67a:	3401      	adds	r4, #1
 800c67c:	9305      	str	r3, [sp, #20]
 800c67e:	4619      	mov	r1, r3
 800c680:	f04f 0c0a 	mov.w	ip, #10
 800c684:	4620      	mov	r0, r4
 800c686:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c68a:	3a30      	subs	r2, #48	; 0x30
 800c68c:	2a09      	cmp	r2, #9
 800c68e:	d903      	bls.n	800c698 <_vfiprintf_r+0x1d0>
 800c690:	2b00      	cmp	r3, #0
 800c692:	d0c6      	beq.n	800c622 <_vfiprintf_r+0x15a>
 800c694:	9105      	str	r1, [sp, #20]
 800c696:	e7c4      	b.n	800c622 <_vfiprintf_r+0x15a>
 800c698:	fb0c 2101 	mla	r1, ip, r1, r2
 800c69c:	4604      	mov	r4, r0
 800c69e:	2301      	movs	r3, #1
 800c6a0:	e7f0      	b.n	800c684 <_vfiprintf_r+0x1bc>
 800c6a2:	ab03      	add	r3, sp, #12
 800c6a4:	9300      	str	r3, [sp, #0]
 800c6a6:	462a      	mov	r2, r5
 800c6a8:	4b12      	ldr	r3, [pc, #72]	; (800c6f4 <_vfiprintf_r+0x22c>)
 800c6aa:	a904      	add	r1, sp, #16
 800c6ac:	4630      	mov	r0, r6
 800c6ae:	f7fb fe33 	bl	8008318 <_printf_float>
 800c6b2:	4607      	mov	r7, r0
 800c6b4:	1c78      	adds	r0, r7, #1
 800c6b6:	d1d6      	bne.n	800c666 <_vfiprintf_r+0x19e>
 800c6b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6ba:	07d9      	lsls	r1, r3, #31
 800c6bc:	d405      	bmi.n	800c6ca <_vfiprintf_r+0x202>
 800c6be:	89ab      	ldrh	r3, [r5, #12]
 800c6c0:	059a      	lsls	r2, r3, #22
 800c6c2:	d402      	bmi.n	800c6ca <_vfiprintf_r+0x202>
 800c6c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6c6:	f7fd fbdb 	bl	8009e80 <__retarget_lock_release_recursive>
 800c6ca:	89ab      	ldrh	r3, [r5, #12]
 800c6cc:	065b      	lsls	r3, r3, #25
 800c6ce:	f53f af1d 	bmi.w	800c50c <_vfiprintf_r+0x44>
 800c6d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c6d4:	e71c      	b.n	800c510 <_vfiprintf_r+0x48>
 800c6d6:	ab03      	add	r3, sp, #12
 800c6d8:	9300      	str	r3, [sp, #0]
 800c6da:	462a      	mov	r2, r5
 800c6dc:	4b05      	ldr	r3, [pc, #20]	; (800c6f4 <_vfiprintf_r+0x22c>)
 800c6de:	a904      	add	r1, sp, #16
 800c6e0:	4630      	mov	r0, r6
 800c6e2:	f7fc f8bd 	bl	8008860 <_printf_i>
 800c6e6:	e7e4      	b.n	800c6b2 <_vfiprintf_r+0x1ea>
 800c6e8:	0800ccfe 	.word	0x0800ccfe
 800c6ec:	0800cd08 	.word	0x0800cd08
 800c6f0:	08008319 	.word	0x08008319
 800c6f4:	0800c4a5 	.word	0x0800c4a5
 800c6f8:	0800cd04 	.word	0x0800cd04

0800c6fc <__swbuf_r>:
 800c6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6fe:	460e      	mov	r6, r1
 800c700:	4614      	mov	r4, r2
 800c702:	4605      	mov	r5, r0
 800c704:	b118      	cbz	r0, 800c70e <__swbuf_r+0x12>
 800c706:	6a03      	ldr	r3, [r0, #32]
 800c708:	b90b      	cbnz	r3, 800c70e <__swbuf_r+0x12>
 800c70a:	f7fc fc87 	bl	800901c <__sinit>
 800c70e:	69a3      	ldr	r3, [r4, #24]
 800c710:	60a3      	str	r3, [r4, #8]
 800c712:	89a3      	ldrh	r3, [r4, #12]
 800c714:	071a      	lsls	r2, r3, #28
 800c716:	d525      	bpl.n	800c764 <__swbuf_r+0x68>
 800c718:	6923      	ldr	r3, [r4, #16]
 800c71a:	b31b      	cbz	r3, 800c764 <__swbuf_r+0x68>
 800c71c:	6823      	ldr	r3, [r4, #0]
 800c71e:	6922      	ldr	r2, [r4, #16]
 800c720:	1a98      	subs	r0, r3, r2
 800c722:	6963      	ldr	r3, [r4, #20]
 800c724:	b2f6      	uxtb	r6, r6
 800c726:	4283      	cmp	r3, r0
 800c728:	4637      	mov	r7, r6
 800c72a:	dc04      	bgt.n	800c736 <__swbuf_r+0x3a>
 800c72c:	4621      	mov	r1, r4
 800c72e:	4628      	mov	r0, r5
 800c730:	f7ff f830 	bl	800b794 <_fflush_r>
 800c734:	b9e0      	cbnz	r0, 800c770 <__swbuf_r+0x74>
 800c736:	68a3      	ldr	r3, [r4, #8]
 800c738:	3b01      	subs	r3, #1
 800c73a:	60a3      	str	r3, [r4, #8]
 800c73c:	6823      	ldr	r3, [r4, #0]
 800c73e:	1c5a      	adds	r2, r3, #1
 800c740:	6022      	str	r2, [r4, #0]
 800c742:	701e      	strb	r6, [r3, #0]
 800c744:	6962      	ldr	r2, [r4, #20]
 800c746:	1c43      	adds	r3, r0, #1
 800c748:	429a      	cmp	r2, r3
 800c74a:	d004      	beq.n	800c756 <__swbuf_r+0x5a>
 800c74c:	89a3      	ldrh	r3, [r4, #12]
 800c74e:	07db      	lsls	r3, r3, #31
 800c750:	d506      	bpl.n	800c760 <__swbuf_r+0x64>
 800c752:	2e0a      	cmp	r6, #10
 800c754:	d104      	bne.n	800c760 <__swbuf_r+0x64>
 800c756:	4621      	mov	r1, r4
 800c758:	4628      	mov	r0, r5
 800c75a:	f7ff f81b 	bl	800b794 <_fflush_r>
 800c75e:	b938      	cbnz	r0, 800c770 <__swbuf_r+0x74>
 800c760:	4638      	mov	r0, r7
 800c762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c764:	4621      	mov	r1, r4
 800c766:	4628      	mov	r0, r5
 800c768:	f000 f806 	bl	800c778 <__swsetup_r>
 800c76c:	2800      	cmp	r0, #0
 800c76e:	d0d5      	beq.n	800c71c <__swbuf_r+0x20>
 800c770:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c774:	e7f4      	b.n	800c760 <__swbuf_r+0x64>
	...

0800c778 <__swsetup_r>:
 800c778:	b538      	push	{r3, r4, r5, lr}
 800c77a:	4b2a      	ldr	r3, [pc, #168]	; (800c824 <__swsetup_r+0xac>)
 800c77c:	4605      	mov	r5, r0
 800c77e:	6818      	ldr	r0, [r3, #0]
 800c780:	460c      	mov	r4, r1
 800c782:	b118      	cbz	r0, 800c78c <__swsetup_r+0x14>
 800c784:	6a03      	ldr	r3, [r0, #32]
 800c786:	b90b      	cbnz	r3, 800c78c <__swsetup_r+0x14>
 800c788:	f7fc fc48 	bl	800901c <__sinit>
 800c78c:	89a3      	ldrh	r3, [r4, #12]
 800c78e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c792:	0718      	lsls	r0, r3, #28
 800c794:	d422      	bmi.n	800c7dc <__swsetup_r+0x64>
 800c796:	06d9      	lsls	r1, r3, #27
 800c798:	d407      	bmi.n	800c7aa <__swsetup_r+0x32>
 800c79a:	2309      	movs	r3, #9
 800c79c:	602b      	str	r3, [r5, #0]
 800c79e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c7a2:	81a3      	strh	r3, [r4, #12]
 800c7a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c7a8:	e034      	b.n	800c814 <__swsetup_r+0x9c>
 800c7aa:	0758      	lsls	r0, r3, #29
 800c7ac:	d512      	bpl.n	800c7d4 <__swsetup_r+0x5c>
 800c7ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c7b0:	b141      	cbz	r1, 800c7c4 <__swsetup_r+0x4c>
 800c7b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c7b6:	4299      	cmp	r1, r3
 800c7b8:	d002      	beq.n	800c7c0 <__swsetup_r+0x48>
 800c7ba:	4628      	mov	r0, r5
 800c7bc:	f7ff fdee 	bl	800c39c <_free_r>
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	6363      	str	r3, [r4, #52]	; 0x34
 800c7c4:	89a3      	ldrh	r3, [r4, #12]
 800c7c6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c7ca:	81a3      	strh	r3, [r4, #12]
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	6063      	str	r3, [r4, #4]
 800c7d0:	6923      	ldr	r3, [r4, #16]
 800c7d2:	6023      	str	r3, [r4, #0]
 800c7d4:	89a3      	ldrh	r3, [r4, #12]
 800c7d6:	f043 0308 	orr.w	r3, r3, #8
 800c7da:	81a3      	strh	r3, [r4, #12]
 800c7dc:	6923      	ldr	r3, [r4, #16]
 800c7de:	b94b      	cbnz	r3, 800c7f4 <__swsetup_r+0x7c>
 800c7e0:	89a3      	ldrh	r3, [r4, #12]
 800c7e2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c7e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c7ea:	d003      	beq.n	800c7f4 <__swsetup_r+0x7c>
 800c7ec:	4621      	mov	r1, r4
 800c7ee:	4628      	mov	r0, r5
 800c7f0:	f000 f840 	bl	800c874 <__smakebuf_r>
 800c7f4:	89a0      	ldrh	r0, [r4, #12]
 800c7f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c7fa:	f010 0301 	ands.w	r3, r0, #1
 800c7fe:	d00a      	beq.n	800c816 <__swsetup_r+0x9e>
 800c800:	2300      	movs	r3, #0
 800c802:	60a3      	str	r3, [r4, #8]
 800c804:	6963      	ldr	r3, [r4, #20]
 800c806:	425b      	negs	r3, r3
 800c808:	61a3      	str	r3, [r4, #24]
 800c80a:	6923      	ldr	r3, [r4, #16]
 800c80c:	b943      	cbnz	r3, 800c820 <__swsetup_r+0xa8>
 800c80e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c812:	d1c4      	bne.n	800c79e <__swsetup_r+0x26>
 800c814:	bd38      	pop	{r3, r4, r5, pc}
 800c816:	0781      	lsls	r1, r0, #30
 800c818:	bf58      	it	pl
 800c81a:	6963      	ldrpl	r3, [r4, #20]
 800c81c:	60a3      	str	r3, [r4, #8]
 800c81e:	e7f4      	b.n	800c80a <__swsetup_r+0x92>
 800c820:	2000      	movs	r0, #0
 800c822:	e7f7      	b.n	800c814 <__swsetup_r+0x9c>
 800c824:	20000224 	.word	0x20000224

0800c828 <__swhatbuf_r>:
 800c828:	b570      	push	{r4, r5, r6, lr}
 800c82a:	460c      	mov	r4, r1
 800c82c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c830:	2900      	cmp	r1, #0
 800c832:	b096      	sub	sp, #88	; 0x58
 800c834:	4615      	mov	r5, r2
 800c836:	461e      	mov	r6, r3
 800c838:	da0d      	bge.n	800c856 <__swhatbuf_r+0x2e>
 800c83a:	89a3      	ldrh	r3, [r4, #12]
 800c83c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c840:	f04f 0100 	mov.w	r1, #0
 800c844:	bf0c      	ite	eq
 800c846:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c84a:	2340      	movne	r3, #64	; 0x40
 800c84c:	2000      	movs	r0, #0
 800c84e:	6031      	str	r1, [r6, #0]
 800c850:	602b      	str	r3, [r5, #0]
 800c852:	b016      	add	sp, #88	; 0x58
 800c854:	bd70      	pop	{r4, r5, r6, pc}
 800c856:	466a      	mov	r2, sp
 800c858:	f000 f848 	bl	800c8ec <_fstat_r>
 800c85c:	2800      	cmp	r0, #0
 800c85e:	dbec      	blt.n	800c83a <__swhatbuf_r+0x12>
 800c860:	9901      	ldr	r1, [sp, #4]
 800c862:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c866:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c86a:	4259      	negs	r1, r3
 800c86c:	4159      	adcs	r1, r3
 800c86e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c872:	e7eb      	b.n	800c84c <__swhatbuf_r+0x24>

0800c874 <__smakebuf_r>:
 800c874:	898b      	ldrh	r3, [r1, #12]
 800c876:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c878:	079d      	lsls	r5, r3, #30
 800c87a:	4606      	mov	r6, r0
 800c87c:	460c      	mov	r4, r1
 800c87e:	d507      	bpl.n	800c890 <__smakebuf_r+0x1c>
 800c880:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c884:	6023      	str	r3, [r4, #0]
 800c886:	6123      	str	r3, [r4, #16]
 800c888:	2301      	movs	r3, #1
 800c88a:	6163      	str	r3, [r4, #20]
 800c88c:	b002      	add	sp, #8
 800c88e:	bd70      	pop	{r4, r5, r6, pc}
 800c890:	ab01      	add	r3, sp, #4
 800c892:	466a      	mov	r2, sp
 800c894:	f7ff ffc8 	bl	800c828 <__swhatbuf_r>
 800c898:	9900      	ldr	r1, [sp, #0]
 800c89a:	4605      	mov	r5, r0
 800c89c:	4630      	mov	r0, r6
 800c89e:	f7fe fe61 	bl	800b564 <_malloc_r>
 800c8a2:	b948      	cbnz	r0, 800c8b8 <__smakebuf_r+0x44>
 800c8a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8a8:	059a      	lsls	r2, r3, #22
 800c8aa:	d4ef      	bmi.n	800c88c <__smakebuf_r+0x18>
 800c8ac:	f023 0303 	bic.w	r3, r3, #3
 800c8b0:	f043 0302 	orr.w	r3, r3, #2
 800c8b4:	81a3      	strh	r3, [r4, #12]
 800c8b6:	e7e3      	b.n	800c880 <__smakebuf_r+0xc>
 800c8b8:	89a3      	ldrh	r3, [r4, #12]
 800c8ba:	6020      	str	r0, [r4, #0]
 800c8bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c8c0:	81a3      	strh	r3, [r4, #12]
 800c8c2:	9b00      	ldr	r3, [sp, #0]
 800c8c4:	6163      	str	r3, [r4, #20]
 800c8c6:	9b01      	ldr	r3, [sp, #4]
 800c8c8:	6120      	str	r0, [r4, #16]
 800c8ca:	b15b      	cbz	r3, 800c8e4 <__smakebuf_r+0x70>
 800c8cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c8d0:	4630      	mov	r0, r6
 800c8d2:	f000 f81d 	bl	800c910 <_isatty_r>
 800c8d6:	b128      	cbz	r0, 800c8e4 <__smakebuf_r+0x70>
 800c8d8:	89a3      	ldrh	r3, [r4, #12]
 800c8da:	f023 0303 	bic.w	r3, r3, #3
 800c8de:	f043 0301 	orr.w	r3, r3, #1
 800c8e2:	81a3      	strh	r3, [r4, #12]
 800c8e4:	89a3      	ldrh	r3, [r4, #12]
 800c8e6:	431d      	orrs	r5, r3
 800c8e8:	81a5      	strh	r5, [r4, #12]
 800c8ea:	e7cf      	b.n	800c88c <__smakebuf_r+0x18>

0800c8ec <_fstat_r>:
 800c8ec:	b538      	push	{r3, r4, r5, lr}
 800c8ee:	4d07      	ldr	r5, [pc, #28]	; (800c90c <_fstat_r+0x20>)
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	4604      	mov	r4, r0
 800c8f4:	4608      	mov	r0, r1
 800c8f6:	4611      	mov	r1, r2
 800c8f8:	602b      	str	r3, [r5, #0]
 800c8fa:	f7f6 f9de 	bl	8002cba <_fstat>
 800c8fe:	1c43      	adds	r3, r0, #1
 800c900:	d102      	bne.n	800c908 <_fstat_r+0x1c>
 800c902:	682b      	ldr	r3, [r5, #0]
 800c904:	b103      	cbz	r3, 800c908 <_fstat_r+0x1c>
 800c906:	6023      	str	r3, [r4, #0]
 800c908:	bd38      	pop	{r3, r4, r5, pc}
 800c90a:	bf00      	nop
 800c90c:	200005c0 	.word	0x200005c0

0800c910 <_isatty_r>:
 800c910:	b538      	push	{r3, r4, r5, lr}
 800c912:	4d06      	ldr	r5, [pc, #24]	; (800c92c <_isatty_r+0x1c>)
 800c914:	2300      	movs	r3, #0
 800c916:	4604      	mov	r4, r0
 800c918:	4608      	mov	r0, r1
 800c91a:	602b      	str	r3, [r5, #0]
 800c91c:	f7f6 f9dd 	bl	8002cda <_isatty>
 800c920:	1c43      	adds	r3, r0, #1
 800c922:	d102      	bne.n	800c92a <_isatty_r+0x1a>
 800c924:	682b      	ldr	r3, [r5, #0]
 800c926:	b103      	cbz	r3, 800c92a <_isatty_r+0x1a>
 800c928:	6023      	str	r3, [r4, #0]
 800c92a:	bd38      	pop	{r3, r4, r5, pc}
 800c92c:	200005c0 	.word	0x200005c0

0800c930 <_raise_r>:
 800c930:	291f      	cmp	r1, #31
 800c932:	b538      	push	{r3, r4, r5, lr}
 800c934:	4604      	mov	r4, r0
 800c936:	460d      	mov	r5, r1
 800c938:	d904      	bls.n	800c944 <_raise_r+0x14>
 800c93a:	2316      	movs	r3, #22
 800c93c:	6003      	str	r3, [r0, #0]
 800c93e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c942:	bd38      	pop	{r3, r4, r5, pc}
 800c944:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c946:	b112      	cbz	r2, 800c94e <_raise_r+0x1e>
 800c948:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c94c:	b94b      	cbnz	r3, 800c962 <_raise_r+0x32>
 800c94e:	4620      	mov	r0, r4
 800c950:	f000 f830 	bl	800c9b4 <_getpid_r>
 800c954:	462a      	mov	r2, r5
 800c956:	4601      	mov	r1, r0
 800c958:	4620      	mov	r0, r4
 800c95a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c95e:	f000 b817 	b.w	800c990 <_kill_r>
 800c962:	2b01      	cmp	r3, #1
 800c964:	d00a      	beq.n	800c97c <_raise_r+0x4c>
 800c966:	1c59      	adds	r1, r3, #1
 800c968:	d103      	bne.n	800c972 <_raise_r+0x42>
 800c96a:	2316      	movs	r3, #22
 800c96c:	6003      	str	r3, [r0, #0]
 800c96e:	2001      	movs	r0, #1
 800c970:	e7e7      	b.n	800c942 <_raise_r+0x12>
 800c972:	2400      	movs	r4, #0
 800c974:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c978:	4628      	mov	r0, r5
 800c97a:	4798      	blx	r3
 800c97c:	2000      	movs	r0, #0
 800c97e:	e7e0      	b.n	800c942 <_raise_r+0x12>

0800c980 <raise>:
 800c980:	4b02      	ldr	r3, [pc, #8]	; (800c98c <raise+0xc>)
 800c982:	4601      	mov	r1, r0
 800c984:	6818      	ldr	r0, [r3, #0]
 800c986:	f7ff bfd3 	b.w	800c930 <_raise_r>
 800c98a:	bf00      	nop
 800c98c:	20000224 	.word	0x20000224

0800c990 <_kill_r>:
 800c990:	b538      	push	{r3, r4, r5, lr}
 800c992:	4d07      	ldr	r5, [pc, #28]	; (800c9b0 <_kill_r+0x20>)
 800c994:	2300      	movs	r3, #0
 800c996:	4604      	mov	r4, r0
 800c998:	4608      	mov	r0, r1
 800c99a:	4611      	mov	r1, r2
 800c99c:	602b      	str	r3, [r5, #0]
 800c99e:	f7f6 f92d 	bl	8002bfc <_kill>
 800c9a2:	1c43      	adds	r3, r0, #1
 800c9a4:	d102      	bne.n	800c9ac <_kill_r+0x1c>
 800c9a6:	682b      	ldr	r3, [r5, #0]
 800c9a8:	b103      	cbz	r3, 800c9ac <_kill_r+0x1c>
 800c9aa:	6023      	str	r3, [r4, #0]
 800c9ac:	bd38      	pop	{r3, r4, r5, pc}
 800c9ae:	bf00      	nop
 800c9b0:	200005c0 	.word	0x200005c0

0800c9b4 <_getpid_r>:
 800c9b4:	f7f6 b91a 	b.w	8002bec <_getpid>

0800c9b8 <_init>:
 800c9b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9ba:	bf00      	nop
 800c9bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9be:	bc08      	pop	{r3}
 800c9c0:	469e      	mov	lr, r3
 800c9c2:	4770      	bx	lr

0800c9c4 <_fini>:
 800c9c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9c6:	bf00      	nop
 800c9c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9ca:	bc08      	pop	{r3}
 800c9cc:	469e      	mov	lr, r3
 800c9ce:	4770      	bx	lr
